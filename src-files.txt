
===== src/App.css =====
#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}

===== src/App.tsx =====
// src/App.tsx
import { useSelector, useDispatch } from 'src/store/Store';
import { ThemeSettings } from './theme/Theme';
import RTL from './layouts/full/shared/customizer/RTL';
import { AppState } from './store/Store';
import { CssBaseline, ThemeProvider } from '@mui/material';
import { RouterProvider } from 'react-router';
import router from './routes/Router';
import { useEffect } from 'react';
import { initializeFromStorage } from './store/customizer/CustomizerSlice';
import './utils/i18n';

function App() {
  const theme = ThemeSettings();
  const customizer = useSelector((state: AppState) => state.customizer);
  const dispatch = useDispatch();

  useEffect(() => {
    dispatch(initializeFromStorage());
  }, [dispatch]);

  // ضمان وجود قيمة افتراضية للـ direction
  const direction = customizer.activeDir || 'ltr';

  return (
    <ThemeProvider theme={theme}>
      <RTL direction={direction}>
        <CssBaseline />
        <RouterProvider router={router} />
      </RTL>
    </ThemeProvider>
  );
}

export default App;

===== src/components/container/PageContainer.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';

import { Helmet } from 'react-helmet';

type Props = {
  description?: string;
  children: any | any[];
  title?: string;
};

const PageContainer = ({ title, description, children }: Props) => (
  <div>
    <Helmet>
      <title>{title}</title>
      <meta name="description" content={description} />
    </Helmet>
    {children}
  </div>
);

export default PageContainer;

===== src/components/custom-scroll/Scrollbar.tsx =====
import SimpleBar from 'simplebar-react';
import 'simplebar/dist/simplebar.min.css';
import { Box, styled, SxProps } from '@mui/material';

const SimpleBarStyle = styled(SimpleBar)(() => ({
  maxHeight: '100%',
}));

interface PropsType {
  children: React.ReactElement | React.ReactNode;
  sx: SxProps;
}

const Scrollbar = (props: PropsType) => {
  const { children, sx, ...other } = props;
  const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(
    navigator.userAgent,
  );

  if (isMobile) {
    return <Box sx={{ overflowX: 'auto' }}>{children}</Box>;
  }

  return (
    <SimpleBarStyle sx={sx} {...other}>
      {children}
    </SimpleBarStyle>
  );
};

export default Scrollbar;

===== src/components/shared/Avatar.tsx =====
// src/components/shared/Avatar.tsx - إنشاء Avatar component محسن
import React, { useState, useCallback } from 'react';
import { Avatar as MuiAvatar, AvatarProps } from '@mui/material';

interface CustomAvatarProps extends AvatarProps {
  src?: string;
  alt?: string;
}

const Avatar: React.FC<CustomAvatarProps> = ({ src, alt, ...props }) => {
  const [imageError, setImageError] = useState(false);
  const [imageLoaded, setImageLoaded] = useState(false);

  const handleImageLoad = useCallback(() => {
    setImageLoaded(true);
    setImageError(false);
  }, []);

  const handleImageError = useCallback(() => {
    setImageError(true);
    setImageLoaded(false);
  }, []);

  return (
    <MuiAvatar
      {...props}
      src={!imageError ? src : undefined}
      alt={alt}
      imgProps={{
        onLoad: handleImageLoad,
        onError: handleImageError,
        style: { display: imageLoaded ? 'block' : 'none' }
      }}
    />
  );
};

export default Avatar;

===== src/components/shared/BaseCard.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';

import { Card, CardHeader, CardContent, Divider } from '@mui/material';
import { useSelector } from 'src/store/Store';
import { AppState } from 'src/store/Store';

type Props = {
  title: string;
  children: any | any[];
};

const BaseCard = ({ title, children }: Props) => {
  const customizer = useSelector((state: AppState) => state.customizer);

  return (
    <Card
      sx={{ padding: 0 }}
      elevation={customizer.isCardShadow ? 9 : 0}
      variant={!customizer.isCardShadow ? 'outlined' : undefined}
    >
      <CardHeader title={title} />
      <Divider />
      <CardContent>{children}</CardContent>
    </Card>
  );
};

export default BaseCard;

===== src/components/shared/BlankCard.tsx =====
import { Card } from '@mui/material';
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import { useTheme } from '@mui/material/styles';
import { AppState, useSelector } from 'src/store/Store';

type Props = {
  className?: string;
  children: any | any[];
  sx?: any;
};

const BlankCard = ({ children, className, sx }: Props) => {
  const customizer = useSelector((state: AppState) => state.customizer);

  const theme = useTheme();
  const borderColor = theme.palette.grey[100];

  return (
    <Card
      sx={{ p: 0, border: !customizer.isCardShadow ? `1px solid ${borderColor}` : 'none', position: 'relative', sx }}
      className={className}
      elevation={customizer.isCardShadow ? 9 : 0}
      variant={!customizer.isCardShadow ? 'outlined' : undefined}
    >
      {children}
    </Card>
  );
};

export default BlankCard;

===== src/components/shared/DashboardCard.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import { useTheme } from '@mui/material/styles';
import { Card, CardContent, Typography, Stack, Box } from '@mui/material';
import { useSelector } from 'src/store/Store';
import { AppState } from 'src/store/Store';

type Props = {
  title?: string;
  subtitle?: string;
  action?: any | any;
  footer?: any;
  cardheading?: string | any;
  headtitle?: string | any;
  headsubtitle?: string | any;
  children?: any;
  middlecontent?: string | any;
};

const DashboardCard = ({
  title,
  subtitle,
  children,
  action,
  footer,
  cardheading,
  headtitle,
  headsubtitle,
  middlecontent,
}: Props) => {
  const customizer = useSelector((state: AppState) => state.customizer);

  const theme = useTheme();
  const borderColor = theme.palette.grey[100];

  return (
    <Card
      sx={{ padding: 0, border: !customizer.isCardShadow ? `1px solid ${borderColor}` : 'none' }}
      elevation={customizer.isCardShadow ? 9 : 0}
      variant={!customizer.isCardShadow ? 'outlined' : undefined}
    >
      {cardheading ? (
        <CardContent>
          <Typography variant="h5">{headtitle}</Typography>
          <Typography variant="subtitle2" color="textSecondary">
            {headsubtitle}
          </Typography>
        </CardContent>
      ) : (
        <CardContent sx={{ p: "30px" }}>
          {title ? (
            <Stack
              direction="row"
              spacing={2}
              justifyContent="space-between"
              alignItems={'center'}
              mb={3}
            >
              <Box>
                {title ? <Typography variant="h5">{title}</Typography> : ''}

                {subtitle ? (
                  <Typography variant="subtitle2" color="textSecondary">
                    {subtitle}
                  </Typography>
                ) : (
                  ''
                )}
              </Box>
              {action}
            </Stack>
          ) : null}

          {children}
        </CardContent>
      )}

      {middlecontent}
      {footer}
    </Card>
  );
};

export default DashboardCard;

===== src/components/shared/ScrollToTop.tsx =====
import { useEffect, ReactElement } from 'react';
import { useLocation } from 'react-router';

export default function ScrollToTop({ children }: { children: ReactElement | null }) {
  const { pathname } = useLocation();

  useEffect(() => {
    window.scrollTo({
      top: 0,
      left: 0,
      behavior: 'smooth',
    });
  }, [pathname]);

  return children || null;
}

===== src/index.css =====
:root {
  font-family: Inter, system-ui, Avenir, Helvetica, Arial, sans-serif;
  line-height: 1.5;
  font-weight: 400;

  color-scheme: light dark;
  color: rgba(255, 255, 255, 0.87);
  background-color: #242424;

  font-synthesis: none;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  -webkit-text-size-adjust: 100%;
}

a {
  font-weight: 500;
  color: #646cff;
  text-decoration: inherit;
}
a:hover {
  color: #535bf2;
}

body {
  margin: 0;
  display: flex;
  place-items: center;
  min-width: 320px;
  min-height: 100vh;
}

h1 {
  font-size: 3.2em;
  line-height: 1.1;
}

button {
  border-radius: 8px;
  border: 1px solid transparent;
  padding: 0.6em 1.2em;
  font-size: 1em;
  font-weight: 500;
  font-family: inherit;
  background-color: #1a1a1a;
  cursor: pointer;
  transition: border-color 0.25s;
}
button:hover {
  border-color: #646cff;
}
button:focus,
button:focus-visible {
  outline: 4px auto -webkit-focus-ring-color;
}

@media (prefers-color-scheme: light) {
  :root {
    color: #213547;
    background-color: #ffffff;
  }
  a:hover {
    color: #747bff;
  }
  button {
    background-color: #f9f9f9;
  }
}

html[dir="rtl"] {
  font-family: 'Cairo', 'Roboto', sans-serif;
}

html[dir="ltr"] {
  font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;
}

/* تحسينات إضافية للـ RTL */
html[dir="rtl"] .MuiDrawer-paper {
  right: 0;
  left: auto;
}

html[dir="ltr"] .MuiDrawer-paper {
  left: 0;
  right: auto;
}
===== src/layouts/blank/BlankLayout.tsx =====
import { Outlet } from "react-router";
import LoadingBar from '../../LoadingBar';

const BlankLayout = () => (
  <>
    <LoadingBar />
    <Outlet />
  </>
);

export default BlankLayout;

===== src/layouts/full/FullLayout.tsx =====
import { FC } from 'react';
import { styled, Container, Box, useTheme } from '@mui/material';
import { useSelector } from 'src/store/Store';
import { Outlet } from 'react-router';
import { AppState } from 'src/store/Store';
import Header from './vertical/header/Header';
import Sidebar from './vertical/sidebar/Sidebar';
import Customizer from './shared/customizer/Customizer';
import Navigation from '../full/horizontal/navbar/Navigation';
import HorizontalHeader from '../full/horizontal/header/Header';
import ScrollToTop from '../../components/shared/ScrollToTop';
import LoadingBar from '../../LoadingBar';

const MainWrapper = styled('div')(() => ({
  display: 'flex',
  minHeight: '100vh',
  width: '100%',
}));

const PageWrapper = styled('div')(() => ({
  display: 'flex',
  flexGrow: 1,
  paddingBottom: '60px',
  flexDirection: 'column',
  zIndex: 1,
  backgroundColor: 'transparent',
}));

const FullLayout: FC = () => {
  const customizer = useSelector((state: AppState) => state.customizer);

  const theme = useTheme();

  return (
    <>
      <LoadingBar />

      <MainWrapper
        className={customizer.activeMode === 'dark' ? 'darkbg mainwrapper' : 'mainwrapper'}
      >
        {/* ------------------------------------------- */}
        {/* Sidebar */}
        {/* ------------------------------------------- */}
        {customizer.isHorizontal ? '' : <Sidebar />}
        {/* ------------------------------------------- */}
        {/* Main Wrapper */}
        {/* ------------------------------------------- */}
        <PageWrapper
          className="page-wrapper"
          sx={{
            ...(customizer.isCollapse && {
              [theme.breakpoints.up('lg')]: { ml: `${customizer.MiniSidebarWidth}px` },
            }),
          }}
        >
          {/* ------------------------------------------- */}
          {/* Header */}
          {/* ------------------------------------------- */}
          {customizer.isHorizontal ? <HorizontalHeader /> : <Header />}
          {/* PageContent */}
          {customizer.isHorizontal ? <Navigation /> : ''}
          <Container
            sx={{
              maxWidth: customizer.isLayout === 'boxed' ? 'lg' : '100%!important',
            }}
          >
            {/* ------------------------------------------- */}
            {/* PageContent */}
            {/* ------------------------------------------- */}
            <Box sx={{ minHeight: 'calc(100vh - 170px)' }}>
              <ScrollToTop>
                <Outlet />
              </ScrollToTop>
            </Box>
            {/* ------------------------------------------- */}
            {/* End Page */}
            {/* ------------------------------------------- */}
          </Container>
          <Customizer />
        </PageWrapper>
      </MainWrapper>
    </>

  );
};

export default FullLayout;

===== src/layouts/full/horizontal/header/Header.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import * as React from 'react';
import {
  IconButton,
  Box,
  AppBar,
  useMediaQuery,
  Toolbar,
  styled,
  Stack,
  Theme,
} from '@mui/material';

import { useSelector, useDispatch } from 'src/store/Store';
import { toggleMobileSidebar, setDarkMode } from 'src/store/customizer/CustomizerSlice';
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import { IconMenu2, IconMoon, IconSun } from '@tabler/icons-react';
import Notifications from 'src/layouts/full/vertical/header/Notification';
import Cart from 'src/layouts/full/vertical/header/Cart';
import Profile from 'src/layouts/full/vertical/header/Profile';
import Search from 'src/layouts/full/vertical/header/Search';
import Language from 'src/layouts/full/vertical/header/Language';
import Logo from 'src/layouts/full/shared/logo/Logo';
import { AppState } from 'src/store/Store';

const Header = () => {
  const lgDown = useMediaQuery((theme: Theme) => theme.breakpoints.down('lg'));

  // drawer
  const customizer = useSelector((state: AppState) => state.customizer);
  const dispatch = useDispatch();

  const AppBarStyled = styled(AppBar)(({ theme }) => ({
    background: theme.palette.background.paper,
    justifyContent: 'center',
    backdropFilter: 'blur(4px)',

    [theme.breakpoints.up('lg')]: {
      minHeight: customizer.TopbarHeight,
    },
  }));
  const ToolbarStyled = styled(Toolbar)(() => ({ margin: '0 auto', width: '100%' }));

  return (
    <AppBarStyled position="sticky" color="default" elevation={8}>
      <ToolbarStyled
        sx={{
          maxWidth: customizer.isLayout === 'boxed' ? 'lg' : '100%!important',
        }}
      >
        <Box sx={{ width: lgDown ? '45px' : 'auto', overflow: 'hidden' }}>
          <Logo />
        </Box>
        {/* ------------------------------------------- */}
        {/* Toggle Button Sidebar */}
        {/* ------------------------------------------- */}
        {lgDown ? (
          <IconButton
            color="inherit"
            aria-label="menu"
            onClick={() => dispatch(toggleMobileSidebar())}
          >
            <IconMenu2 />
          </IconButton>
        ) : (
          ''
        )}
        {/* ------------------------------------------- */}
        {/* Search Dropdown */}
        {/* ------------------------------------------- */}
        <Search />
        <Box flexGrow={1} />
        <Stack spacing={1} direction="row" alignItems="center">
          <Language />
          {/* ------------------------------------------- */}
          {/* Ecommerce Dropdown */}
          {/* ------------------------------------------- */}
          <Cart />
          {/* ------------------------------------------- */}
          {/* End Ecommerce Dropdown */}
          {/* ------------------------------------------- */}

          <IconButton size="large" color="inherit">
            {customizer.activeMode === 'light' ? (
              <IconMoon size="21" stroke="1.5" onClick={() => dispatch(setDarkMode('dark'))} />
            ) : (
              <IconSun size="21" stroke="1.5" onClick={() => dispatch(setDarkMode('light'))} />
            )}
          </IconButton>

          <Notifications />
          <Profile />
        </Stack>
      </ToolbarStyled>
    </AppBarStyled>
  );
};

export default Header;

===== src/layouts/full/horizontal/navbar/Menudata.ts =====

import {
  IconAperture,
  IconBoxMultiple,
  IconPoint
} from '@tabler/icons-react';
import { uniqueId } from 'lodash';

const Menuitems = [
  {
    id: uniqueId(),
    title: 'Sample Page',
    icon: IconAperture,
    href: '/sample-page',
  },
  {
    id: uniqueId(),
    title: 'Menu Level',
    icon: IconBoxMultiple,
    href: '/menulevel/',
    children: [
      {
        id: uniqueId(),
        title: 'Level 1',
        icon: IconPoint,
        href: '/l1',
      },
      {
        id: uniqueId(),
        title: 'Level 1.1',
        icon: IconPoint,
        href: '/l1.1',
        children: [
          {
            id: uniqueId(),
            title: 'Level 2',
            icon: IconPoint,
            href: '/l2',
          },
          {
            id: uniqueId(),
            title: 'Level 2.1',
            icon: IconPoint,
            href: '/l2.1',
            children: [
              {
                id: uniqueId(),
                title: 'Level 3',
                icon: IconPoint,
                href: '/l3',
              },
              {
                id: uniqueId(),
                title: 'Level 3.1',
                icon: IconPoint,
                href: '/l3.1',
              },
            ],
          },
        ],
      },
    ],
  },
];
export default Menuitems;

===== src/layouts/full/horizontal/navbar/NavCollapse/NavCollapse.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import { useTheme } from '@mui/material/styles';
import { useLocation } from 'react-router';

// mui imports
import { ListItemIcon, styled, ListItemText, Box, ListItemButton } from '@mui/material';
import { useSelector } from 'src/store/Store';

// custom imports
import NavItem from '../NavItem/NavItem';

// plugins
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import { IconChevronDown } from '@tabler/icons-react';
import { AppState } from 'src/store/Store';

type NavGroupProps = {
  [x: string]: any;
  navlabel?: boolean;
  subheader?: string;
  title?: string;
  icon?: any;
  href?: any;
};

interface NavCollapseProps {
  menu: NavGroupProps;
  level: number;
  pathWithoutLastPart: any;
  pathDirect: any;
  hideMenu: any;
  onClick: any;
}

// FC Component For Dropdown Menu
const NavCollapse = ({ menu, level, pathWithoutLastPart, pathDirect, hideMenu }: NavCollapseProps) => {
  const Icon = menu.icon;
  const theme = useTheme();
  const { pathname } = useLocation();
  const [open, setOpen] = React.useState(false);
  const customizer = useSelector((state: AppState) => state.customizer);
  const menuIcon =
    level > 1 ? <Icon stroke={1.5} size="1rem" /> : <Icon stroke={1.5} size="1.1rem" />;

  React.useEffect(() => {
    setOpen(false);
    menu.children.forEach((item: any) => {
      if (item.href === pathname) {
        setOpen(true);
      }
    });
  }, [pathname, menu.children]);

  const ListItemStyled = styled(ListItemButton)(() => ({
    width: 'auto',
    padding: '5px 10px',
    position: 'relative',
    flexGrow: 'unset',
    gap: '10px',
    borderRadius: `${customizer.borderRadius}px`,
    whiteSpace: 'nowrap',
    color: open || pathname.includes(menu.href) || level < 1 ? 'white' : theme.palette.text.secondary,
    backgroundColor: open || pathname.includes(menu.href) ? theme.palette.primary.main : '',

    '&:hover': {
      backgroundColor:
        open || pathname.includes(menu.href)
          ? theme.palette.primary.main
          : theme.palette.primary.light,
    },
    '&:hover > .SubNav': { display: 'block' },
  }));

  const ListSubMenu = styled((props: any) => <Box {...props} />)(() => ({
    display: 'none',
    position: 'absolute',
    top: level > 1 ? `0px` : '35px',
    left: level > 1 ? `${level + 228}px` : '0px',
    padding: '10px',
    width: '250px',
    color: theme.palette.text.primary,
    boxShadow: theme.shadows[8],
    backgroundColor: theme.palette.background.paper,
  }));

  const listItemProps: {
    component: string;
  } = {
    component: 'li',
  };

  // If Menu has Children
  const submenus = menu.children?.map((item: any) => {
    if (item.children) {
      return (
        <NavCollapse
          key={item.id}
          menu={item}
          level={level + 1}
          pathWithoutLastPart={pathWithoutLastPart}
          pathDirect={pathDirect}
          hideMenu={hideMenu} onClick={undefined} />
      );
    } else {
      return (
        <NavItem
          key={item.id}
          item={item}
          level={level + 1}
          pathDirect={pathDirect}
          hideMenu={hideMenu} onClick={function (): void {
            throw new Error('Function not implemented.');
          }} />
      );
    }
  });

  return (
    <React.Fragment key={menu.id}>
      <ListItemStyled
        {...listItemProps}
        selected={pathWithoutLastPart === menu.href}
        className={open ? 'selected' : ''}
      >
        <ListItemIcon
          sx={{
            minWidth: 'auto',
            p: '3px 0',
            color: 'inherit',
          }}
        >
          {menuIcon}
        </ListItemIcon>
        <ListItemText color="inherit" sx={{ mr: 'auto' }}>
          {menu.title}
        </ListItemText>
        <IconChevronDown size="1rem" />
        <ListSubMenu component={'ul'} className="SubNav">
          {submenus}
        </ListSubMenu>
      </ListItemStyled>
    </React.Fragment>
  );
};

export default NavCollapse;

===== src/layouts/full/horizontal/navbar/Navigation.tsx =====
import { useMediaQuery, Box, Drawer, Container, Theme } from '@mui/material';
import NavListing from './NavListing/NavListing';
import Logo from '../../shared/logo/Logo';
import { useSelector, useDispatch } from 'src/store/Store';
import { toggleMobileSidebar } from 'src/store/customizer/CustomizerSlice';
import SidebarItems from '../../vertical/sidebar/SidebarItems';
import { AppState } from 'src/store/Store';

const Navigation = () => {
  const lgUp = useMediaQuery((theme: Theme) => theme.breakpoints.up('lg'));
  const customizer = useSelector((state: AppState) => state.customizer);
  const dispatch = useDispatch();

  if (lgUp) {
    return (
      <Box sx={{ borderBottom: '1px solid rgba(0,0,0,0.05)' }} py={2}>
        {/* ------------------------------------------- */}
        {/* Sidebar for desktop */}
        {/* ------------------------------------------- */}
        <Container
          sx={{
            maxWidth: customizer.isLayout === 'boxed' ? 'lg' : '100%!important',
          }}
        >
          <NavListing />
        </Container>
      </Box>
    );
  }

  return (
    <Drawer
      anchor="left"
      open={customizer.isMobileSidebar}
      onClose={() => dispatch(toggleMobileSidebar())}
      variant="temporary"
      PaperProps={{
        sx: {
          width: customizer.SidebarWidth,
          border: '0 !important',
          boxShadow: (theme) => theme.shadows[8],
        },
      }}
    >
      {/* ------------------------------------------- */}
      {/* Logo */}
      {/* ------------------------------------------- */}
      <Box px={2}>
        <Logo />
      </Box>
      {/* ------------------------------------------- */}
      {/* Sidebar For Mobile */}
      {/* ------------------------------------------- */}
      <SidebarItems />
    </Drawer>
  );
};

export default Navigation;

===== src/layouts/full/horizontal/navbar/NavItem/NavItem.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import { NavLink } from 'react-router';

// mui imports
import { ListItemIcon, List, styled, ListItemText, useTheme, ListItemButton } from '@mui/material';
import { useSelector } from 'src/store/Store';
import { AppState } from 'src/store/Store';

type NavGroup = {
  [x: string]: any;
  id?: string;
  navlabel?: boolean;
  subheader?: string;
  title?: string;
  icon?: any;
  href?: string;
  children?: NavGroup[];
  chip?: string;
  chipColor?: any;
  variant?: string | any;
  external?: boolean;
  level?: number;
};

interface ItemType {
  item: NavGroup;
  onClick: React.MouseEventHandler<HTMLElement>;
  hideMenu: any;
  level?: number | any;
  pathDirect: string;
}

const NavItem = ({ item, level, pathDirect, onClick }: ItemType) => {
  const customizer = useSelector((state: AppState) => state.customizer);
  const Icon = item.icon;
  const theme = useTheme();
  const itemIcon =
    level > 1 ? <Icon stroke={1.5} size="1rem" /> : <Icon stroke={1.5} size="1.1rem" />;

  const ListItemStyled2 = styled(ListItemButton)(() => ({
    padding: '5px 10px',
    gap: '10px',
    borderRadius: `${customizer.borderRadius}px`,
    marginBottom: level > 1 ? '3px' : '0px',
    color:
      level > 1 && pathDirect === item.href ? `${theme.palette.primary.main}!important` : theme.palette.text.secondary,

    '&:hover': {
      backgroundColor: theme.palette.primary.light,
    },
    '&.Mui-selected': {
      color: level > 1 ? theme.palette.primary.main : 'white!important',
      backgroundColor: level > 1 ? 'transparent' : theme.palette.primary.main,
      '&:hover': {
        backgroundColor: level > 1 ? '' : theme.palette.primary.main,
        color: 'white',
      },
    },
  }));

  const listItemProps: {
    component: any;
    href?: string;
    target?: any;
    to?: any;
  } = {
    component: item?.external ? 'a' : NavLink,
    to: item?.href,
    href: item?.external ? item?.href : '',
    target: item?.external ? '_blank' : '',
  };

  return (
    <List component="li" disablePadding key={item.id}>
      <ListItemStyled2
        {...listItemProps}
        disabled={item.disabled}
        selected={pathDirect === item.href}
        onClick={onClick}
      >
        <ListItemIcon
          sx={{
            minWidth: 'auto',
            p: '3px 0',
            color: 'inherit',
          }}
        >
          {itemIcon}
        </ListItemIcon>
        <ListItemText>{item.title}</ListItemText>
      </ListItemStyled2>
    </List>
  );
};


export default NavItem;

===== src/layouts/full/horizontal/navbar/NavListing/NavListing.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import Menudata from '../Menudata';
import { useLocation } from 'react-router';
import { Box, List, Theme, useMediaQuery } from '@mui/material';
import { useSelector } from 'src/store/Store';
import NavItem from '../NavItem/NavItem';
import NavCollapse from '../NavCollapse/NavCollapse';
import { AppState } from 'src/store/Store';

const NavListing = () => {
  const { pathname } = useLocation();
  const pathDirect = pathname;
  const pathWithoutLastPart = pathname.slice(0, pathname.lastIndexOf('/'));
  const customizer = useSelector((state: AppState) => state.customizer);
  const lgUp = useMediaQuery((theme: Theme) => theme.breakpoints.up('lg'));
  const hideMenu = lgUp ? customizer.isCollapse && !customizer.isSidebarHover : '';

  return (
    <Box>
      <List sx={{ p: 0, display: 'flex', gap: '3px', zIndex: '100' }}>
        {Menudata.map((item) => {
          if (item.children) {
            return (
              <NavCollapse
                menu={item}
                pathDirect={pathDirect}
                hideMenu={hideMenu}
                pathWithoutLastPart={pathWithoutLastPart}
                level={1}
                key={item.id} onClick={undefined}              />
            );

            // {/********If Sub No Menu**********/}
          } else {
            return (
              <NavItem item={item} key={item.id} pathDirect={pathDirect} hideMenu={hideMenu} onClick={function (): void {
                throw new Error('Function not implemented.');
              } } />
            );
          }
        })}
      </List>
    </Box>
  );
};
export default NavListing;

===== src/layouts/full/shared/breadcrumb/Breadcrumb.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import { Grid2 as Grid, Typography, Box, Breadcrumbs, Link, Theme } from '@mui/material';
import { NavLink } from 'react-router';

import breadcrumbImg from 'src/assets/images/breadcrumb/ChatBc.png';
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import { IconCircle } from '@tabler/icons-react';

interface BreadCrumbType {
  subtitle?: string;
  items?: any[];
  title: string;
  children?: any;
}

const Breadcrumb = ({ subtitle, items, title, children }: BreadCrumbType) => (
  <Grid
    container
    sx={{
      backgroundColor: 'primary.light',
      borderRadius: (theme: Theme) => theme.shape.borderRadius / 4,
      p: '30px 25px 20px',
      marginBottom: '30px',
      position: 'relative',
      overflow: 'hidden',
    }}
  >
    <Grid
      mb={1}
      size={{
        xs: 12,
        sm: 6,
        lg: 8
      }}>
      <Typography variant="h4">{title}</Typography>
      <Typography color="textSecondary" variant="h6" fontWeight={400} mt={0.8} mb={0}>
        {subtitle}
      </Typography>
      <Breadcrumbs
        separator={
          <IconCircle
            size="5"
            fill="textSecondary"
            fillOpacity={'0.6'}
            style={{ margin: '0 5px' }}
          />
        }
        sx={{ alignItems: 'center', mt: items ? '10px' : '' }}
        aria-label="breadcrumb"
      >
        {items
          ? items.map((item) => (
            <div key={item.title}>
              {item.to ? (
                <Link underline="none" color="inherit" component={NavLink} to={item.to}>
                  {item.title}
                </Link>
              ) : (
                <Typography color="textPrimary">{item.title}</Typography>
              )}
            </div>
          ))
          : ''}
      </Breadcrumbs>
    </Grid>
    <Grid
      display="flex"
      alignItems="flex-end"
      size={{
        xs: 12,
        sm: 6,
        lg: 4
      }}>
      <Box
        sx={{
          display: { xs: 'none', md: 'block', lg: 'flex' },
          alignItems: 'center',
          justifyContent: 'flex-end',
          width: '100%',
        }}
      >
        {children ? (
          <Box sx={{ top: '0px', position: 'absolute' }}>{children}</Box>
        ) : (
          <>
            <Box sx={{ top: '0px', position: 'absolute' }}>
              <img src={breadcrumbImg} alt={breadcrumbImg} />
            </Box>
          </>
        )}
      </Box>
    </Grid>
  </Grid>
);

export default Breadcrumb;

===== src/layouts/full/shared/customizer/Customizer.tsx =====
import { FC, useState } from 'react';
import {
  Fab,
  Drawer,
  Grid2 as Grid,
  Slider,
  Divider,
  styled,
  IconButton,
  Typography,
  Tooltip,
  Stack,
} from '@mui/material';
import { useSelector, useDispatch } from 'src/store/Store';
import Box, { BoxProps } from '@mui/material/Box';
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import { IconX, IconSettings, IconCheck } from '@tabler/icons-react';
import {
  setTheme,
  setDir,
  setDarkMode,
  toggleLayout,
  toggleSidebar,
  toggleHorizontal,
  setBorderRadius,
  setCardShadow,
} from 'src/store/customizer/CustomizerSlice';
import { AppState } from 'src/store/Store';
import Scrollbar from 'src/components/custom-scroll/Scrollbar';
import WbSunnyTwoToneIcon from '@mui/icons-material/WbSunnyTwoTone';
import DarkModeTwoToneIcon from '@mui/icons-material/DarkModeTwoTone';
import SwipeLeftAltTwoToneIcon from '@mui/icons-material/SwipeLeftAltTwoTone';
import SwipeRightAltTwoToneIcon from '@mui/icons-material/SwipeRightAltTwoTone';
import AspectRatioTwoToneIcon from '@mui/icons-material/AspectRatioTwoTone';
import CallToActionTwoToneIcon from '@mui/icons-material/CallToActionTwoTone';
import ViewSidebarTwoToneIcon from '@mui/icons-material/ViewSidebarTwoTone';
import WebAssetTwoToneIcon from '@mui/icons-material/WebAssetTwoTone';
import { ViewComfyTwoTone, PaddingTwoTone, BorderOuter } from '@mui/icons-material';

const SidebarWidth = '320px';
interface colors {
  id: number;
  bgColor: string;
  disp?: string;
}
const Customizer: FC = () => {
  const [showDrawer, setShowDrawer] = useState(false);
  const customizer = useSelector((state: AppState) => state.customizer);

  const dispatch = useDispatch();

  const StyledBox = styled(Box)<BoxProps>(({ theme }) => ({
    boxShadow: theme.shadows[8],
    padding: '20px',
    cursor: 'pointer',
    justifyContent: 'center',
    display: 'flex',
    transition: '0.1s ease-in',
    border: '1px solid rgba(145, 158, 171, 0.12)',
    '&:hover': {
      transform: 'scale(1.05)',
    },
  }));

  const thColors: colors[] = [
    {
      id: 1,
      bgColor: '#5D87FF',
      disp: 'BLUE_THEME',
    },
    {
      id: 2,
      bgColor: '#0074BA',
      disp: 'AQUA_THEME',
    },
    {
      id: 3,
      bgColor: '#763EBD',
      disp: 'PURPLE_THEME',
    },
    {
      id: 4,
      bgColor: '#0A7EA4',
      disp: 'GREEN_THEME',
    },
    {
      id: 5,
      bgColor: '#01C0C8',
      disp: 'CYAN_THEME',
    },
    {
      id: 6,
      bgColor: '#FA896B',
      disp: 'ORANGE_THEME',
    },
  ];

  return (
    (<div>
      {/* ------------------------------------------- */}
      {/* --Floating Button to open customizer ------ */}
      {/* ------------------------------------------- */}
      <Tooltip title="Settings">
        <Fab
          color="primary"
          aria-label="settings"
          sx={{ position: 'fixed', right: '25px', bottom: '15px' }}
          onClick={() => setShowDrawer(true)}
        >
          <IconSettings stroke={1.5} />
        </Fab>
      </Tooltip>
      <Drawer
        anchor="right"
        open={showDrawer}
        onClose={() => setShowDrawer(false)}
        PaperProps={{
          sx: {
            width: SidebarWidth,
          },
        }}
      >
        {/* ------------------------------------------- */}
        {/* ------------ Customizer Sidebar ------------- */}
        {/* ------------------------------------------- */}
        <Scrollbar sx={{ height: 'calc(100vh - 5px)' }}>
          <Box p={2} display="flex" justifyContent={'space-between'} alignItems="center">
            <Typography variant="h4">Settings</Typography>

            <IconButton color="inherit" onClick={() => setShowDrawer(false)}>
              <IconX size="1rem" />
            </IconButton>
          </Box>
          <Divider />
          <Box p={3}>
            {/* ------------------------------------------- */}
            {/* ------------ Dark light theme setting ------------- */}
            {/* ------------------------------------------- */}
            <Typography variant="h6" gutterBottom>
              Theme Option
            </Typography>
            <Stack direction={'row'} gap={2} my={2}>
              <StyledBox onClick={() => dispatch(setDarkMode('light'))} display="flex" gap={1}>
                <WbSunnyTwoToneIcon
                  color={customizer.activeMode === 'light' ? 'primary' : 'inherit'}
                />
                Light
              </StyledBox>
              <StyledBox onClick={() => dispatch(setDarkMode('dark'))} display="flex" gap={1}>
                <DarkModeTwoToneIcon
                  color={customizer.activeMode === 'dark' ? 'primary' : 'inherit'}
                />
                Dark
              </StyledBox>
            </Stack>

            <Box pt={3} />
            {/* ------------------------------------------- */}
            {/* ------------ RTL theme setting -------------*/}
            {/* ------------------------------------------- */}
            <Typography variant="h6" gutterBottom>
              Theme Direction
            </Typography>
            <Stack direction={'row'} gap={2} my={2}>
              <StyledBox onClick={() => dispatch(setDir('ltr'))} display="flex" gap={1}>
                <SwipeLeftAltTwoToneIcon
                  color={customizer.activeDir === 'ltr' ? 'primary' : 'inherit'}
                />{' '}
                LTR
              </StyledBox>
              <StyledBox onClick={() => dispatch(setDir('rtl'))} display="flex" gap={1}>
                <SwipeRightAltTwoToneIcon
                  color={customizer.activeDir === 'rtl' ? 'primary' : 'inherit'}
                />{' '}
                RTL
              </StyledBox>
            </Stack>

            <Box pt={3} />
            {/* ------------------------------------------- */}
            {/* ------------ Theme Color setting ------------- */}
            {/* ------------------------------------------- */}
            <Typography variant="h6" gutterBottom>
              Theme Colors
            </Typography>
            <Grid container spacing={2}>
              {thColors.map((thcolor) => (
                <Grid key={thcolor.id} size={4}>
                  <StyledBox onClick={() => dispatch(setTheme(thcolor.disp))}>
                    <Tooltip title={`${thcolor.disp}`} placement="top">
                      <Box
                        sx={{
                          backgroundColor: thcolor.bgColor,
                          width: '25px',
                          height: '25px',
                          borderRadius: '60px',
                          alignItems: 'center',
                          justifyContent: 'center',
                          display: 'flex',
                          color: 'white',
                        }}
                        aria-label={`${thcolor.bgColor}`}
                      >
                        {customizer.activeTheme === thcolor.disp ? <IconCheck width={13} /> : ''}
                      </Box>
                    </Tooltip>
                  </StyledBox>
                </Grid>
              ))}
            </Grid>
            <Box pt={4} />
            {/* ------------------------------------------- */}
            {/* ------------ Layout Horizontal / Vertical ------------- */}
            {/* ------------------------------------------- */}
            <Typography variant="h6" gutterBottom>
              Layout Type
            </Typography>
            <Stack direction={'row'} gap={2} my={2}>
              <StyledBox onClick={() => dispatch(toggleHorizontal(false))} display="flex" gap={1}>
                <ViewComfyTwoTone
                  color={customizer.isHorizontal === false ? 'primary' : 'inherit'}
                />
                Vertical
              </StyledBox>
              <StyledBox onClick={() => dispatch(toggleHorizontal(true))} display="flex" gap={1}>
                <PaddingTwoTone color={customizer.isHorizontal === true ? 'primary' : 'inherit'} />
                Horizontal
              </StyledBox>
            </Stack>
            <Box pt={4} />
            {/* ------------------------------------------- */}
            {/* ------------ Layout Boxed / Full ------------- */}
            {/* ------------------------------------------- */}
            <Typography variant="h6" gutterBottom>
              Container Option
            </Typography>
            <Stack direction={'row'} gap={2} my={2}>
              <StyledBox onClick={() => dispatch(toggleLayout('boxed'))} display="flex" gap={1}>
                <CallToActionTwoToneIcon
                  color={customizer.isLayout === 'boxed' ? 'primary' : 'inherit'}
                />
                Boxed
              </StyledBox>
              <StyledBox onClick={() => dispatch(toggleLayout('full'))} display="flex" gap={1}>
                <AspectRatioTwoToneIcon
                  color={customizer.isLayout === 'full' ? 'primary' : 'inherit'}
                />
                Full
              </StyledBox>
            </Stack>
            <Box pt={4} />
            {/* ------------------------------------------- */}
            {/* ------------ Sidebar Color setting ------------- */}
            {/* ------------------------------------------- */}

            {/* ------------------------------------------- */}
            {/* ------------ Theme Color setting ------------- */}
            {/* ------------------------------------------- */}
            {customizer.isHorizontal ? (
              ''
            ) : (
              <>
                <Typography variant="h6" gutterBottom>
                  Sidebar Type
                </Typography>
                <Stack direction={'row'} gap={2} my={2}>
                  <StyledBox onClick={() => dispatch(toggleSidebar())} display="flex" gap={1}>
                    <WebAssetTwoToneIcon color={!customizer.isCollapse ? 'primary' : 'inherit'} />
                    Full
                  </StyledBox>
                  <StyledBox onClick={() => dispatch(toggleSidebar())} display="flex" gap={1}>
                    <ViewSidebarTwoToneIcon color={customizer.isCollapse ? 'primary' : 'inherit'} />
                    mini
                  </StyledBox>
                </Stack>
              </>
            )}
            <Box pt={4} />
            <Typography variant="h6" gutterBottom>
              Card With
            </Typography>
            <Stack direction={'row'} gap={2} my={2}>
              <StyledBox onClick={() => dispatch(setCardShadow(false))} display="flex" gap={1}>
                <BorderOuter color={!customizer.isCardShadow ? 'primary' : 'inherit'} />
                Border
              </StyledBox>
              <StyledBox onClick={() => dispatch(setCardShadow(true))} display="flex" gap={1}>
                <CallToActionTwoToneIcon color={customizer.isCardShadow ? 'primary' : 'inherit'} />
                Shadow
              </StyledBox>
            </Stack>
            <Box pt={4} />
            {/* ------------------------------------------- */}
            {/* ------------ Theme Color setting ------------- */}
            {/* ------------------------------------------- */}
            <Typography variant="h6" gutterBottom>
              Theme Border Radius
            </Typography>

            <Slider
              size="small"
              value={customizer.borderRadius}
              aria-label="Small"
              min={4}
              max={24}
              onChange={(event: any) => dispatch(setBorderRadius(event.target.value))}
              valueLabelDisplay="auto"
            />
          </Box>
        </Scrollbar>
      </Drawer>
    </div>)
  );
};

export default Customizer;

===== src/layouts/full/shared/customizer/RTL.tsx =====
import React, { useEffect } from 'react';

import createCache from '@emotion/cache';
import { CacheProvider } from '@emotion/react';
import rtlPlugin from 'stylis-plugin-rtl';

interface RTLType {
  children: React.ReactNode;
  direction: string;
}

const styleCache = () =>
  createCache({
    key: 'rtl',
    prepend: true,

    // We have to temporary ignore this due to incorrect definitions
    // in the stylis-plugin-rtl module
    // @see https://github.com/styled-components/stylis-plugin-rtl/issues/23
    stylisPlugins: [rtlPlugin],
  });

const RTL = (props: RTLType) => {
  const { children, direction } = props;

  useEffect(() => {
    document.dir = direction;
  }, [direction]);

  if (direction === 'rtl') {
    return <CacheProvider value={styleCache()}>{children}</CacheProvider>;
  }

  return <>{children}</>;
};

export default RTL;

===== src/layouts/full/shared/customizer/typings.d.ts =====
declare module "stylis-plugin-rtl" {
  const noTypesYet: any;
  export default noTypesYet;
}

===== src/layouts/full/shared/loadable/Loadable.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React, { Suspense } from 'react';

// project imports
import Spinner from 'src/views/spinner/Spinner';

// ===========================|| LOADABLE - LAZY LOADING ||=========================== //

const Loadable = (Component: any) => (props: any) =>
  (
    <Suspense fallback={<Spinner />}>
      <Component {...props} />
    </Suspense>
  );

export default Loadable;

===== src/layouts/full/shared/logo/Logo.tsx =====
import { FC } from 'react';
import { useSelector } from 'src/store/Store';
import { Link } from 'react-router';
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import { ReactComponent as LogoDark } from 'src/assets/images/logos/dark-logo.svg';
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import { ReactComponent as LogoDarkRTL } from 'src/assets/images/logos/dark-rtl-logo.svg';
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import { ReactComponent as LogoLight } from 'src/assets/images/logos/light-logo.svg';
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import { ReactComponent as LogoLightRTL } from 'src/assets/images/logos/light-logo-rtl.svg';
import { styled } from '@mui/material';
import { AppState } from 'src/store/Store';

const Logo: FC = () => {
  const customizer = useSelector((state: AppState) => state.customizer);
  const LinkStyled = styled(Link)(() => ({
    height: customizer.TopbarHeight,
    width: customizer.isCollapse ? '40px' : '180px',
    overflow: 'hidden',
    display: 'block',
  }));

  if (customizer.activeDir === 'ltr') {
    return (
      <LinkStyled to="/" style={{
        display: 'flex',
        alignItems: 'center',
      }}>
        {customizer.activeMode === 'dark' ? (
          <LogoLight />
        ) : (
          <LogoDark />
        )}
      </LinkStyled>
    );
  }

  return (
    <LinkStyled to="/" style={{
      display: 'flex',
      alignItems: 'center',
    }}>
      {customizer.activeMode === 'dark' ? (
        <LogoDarkRTL />
      ) : (
        <LogoLightRTL />
      )}
    </LinkStyled>
  );
};

export default Logo;

===== src/layouts/full/shared/welcome/Welcome.js =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import * as React from 'react';
import { Snackbar, Alert, AlertTitle } from '@mui/material';

const Welcome = () => {
  const [open, setOpen] = React.useState(false);

  const handleClick = () => {
    setOpen(true);
  };

  const handleClose = (reason) => {
    if (reason === 'clickaway') {
      return;
    }
    setOpen(false);
  };
  React.useEffect(() => {
    // Update the document title using the browser API
    const timer = setTimeout(() => {
      handleClick();
    }, 1500);

    return () => clearTimeout(timer);
  }, []);

  return (
    <React.Fragment>
      <Snackbar
        open={open}
        anchorOrigin={{ vertical: 'top', horizontal: 'right' }}
        autoHideDuration={6000}
        onClose={handleClose}
      >
        <Alert
          onClose={handleClose}
          severity="info"
          variant="filled"
          sx={{ width: '100%', color: 'white' }}
        >
          <AlertTitle>Welcome To Modernize</AlertTitle>
          Easy to customize the Template!!!
        </Alert>
      </Snackbar>
    </React.Fragment>
  );
};

export default Welcome;

===== src/layouts/full/vertical/header/AppLinks.tsx =====
import { Avatar, Box, Typography, Grid2 as Grid, Stack } from '@mui/material';
import * as dropdownData from './data';
import { Link } from 'react-router';
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';

const AppLinks = () => {
  return (
    (<Grid container spacing={3} mb={4}>
      {dropdownData.appsLink.map((links, index) => (
        <Grid
          key={index}
          size={{
            lg: 6
          }}>
          <Link to={links.href} className="hover-text-primary">
            <Stack direction="row" spacing={2}>
              <Box
                minWidth="45px"
                height="45px"
                bgcolor="grey.100"
                display="flex"
                alignItems="center"
                justifyContent="center"
              >
                <Avatar
                  src={links.avatar}
                  alt={links.avatar}
                  sx={{
                    width: 24,
                    height: 24,
                    borderRadius: 0,
                  }}
                />
              </Box>
              <Box>
                <Typography
                  variant="subtitle2"
                  fontWeight={600}
                  color="textPrimary"
                  noWrap
                  className="text-hover"
                  sx={{
                    width: '240px',
                  }}
                >
                  {links.title}
                </Typography>
                <Typography
                  color="textSecondary"
                  variant="subtitle2"
                  fontSize="12px"
                  sx={{
                    width: '240px',
                  }}
                  noWrap
                >
                  {links.subtext}
                </Typography>
              </Box>
            </Stack>
          </Link>
        </Grid>
      ))}
    </Grid>)
  );
};

export default AppLinks;

===== src/layouts/full/vertical/header/Cart.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import { IconShoppingCart } from '@tabler/icons-react';
import { Box, Badge, IconButton } from '@mui/material';

const Cart = () => {
  return (
    <Box>
      <IconButton
        size="large"
        color="inherit"
        sx={{
          color: 'text.secondary',
        }}
      >
        <Badge color="error" badgeContent={0}>
          <IconShoppingCart size="21" stroke="1.5" />
        </Badge>
      </IconButton>
    </Box>
  );
};

export default Cart;

===== src/layouts/full/vertical/header/data.ts =====
import img1 from 'src/assets/images/profile/user-1.jpg';
import img2 from 'src/assets/images/profile/user-2.jpg';
import img3 from 'src/assets/images/profile/user-3.jpg';
import img4 from 'src/assets/images/profile/user-4.jpg';

import icon1 from 'src/assets/images/svgs/icon-account.svg'
import icon2 from 'src/assets/images/svgs/icon-inbox.svg'
import icon3 from 'src/assets/images/svgs/icon-tasks.svg'

import ddIcon1 from 'src/assets/images/svgs/icon-dd-chat.svg'
import ddIcon2 from 'src/assets/images/svgs/icon-dd-cart.svg'
import ddIcon3 from 'src/assets/images/svgs/icon-dd-invoice.svg'
import ddIcon4 from 'src/assets/images/svgs/icon-dd-date.svg'
import ddIcon5 from 'src/assets/images/svgs/icon-dd-mobile.svg'
import ddIcon6 from 'src/assets/images/svgs/icon-dd-lifebuoy.svg'
import ddIcon7 from 'src/assets/images/svgs/icon-dd-message-box.svg'
import ddIcon8 from 'src/assets/images/svgs/icon-dd-application.svg'

// Notifications dropdown

interface notificationType {
  avatar: string;
  title: string;
  subtitle: string;
}

const notifications: notificationType[] = [
  {
    avatar: img1,
    title: 'Roman Joined the Team!',
    subtitle: 'Congratulate him',
  },
  {
    avatar: img2,
    title: 'New message received',
    subtitle: 'Salma sent you new message',
  },
  {
    avatar: img3,
    title: 'New Payment received',
    subtitle: 'Check your earnings',
  },
  {
    avatar: img4,
    title: 'Jolly completed tasks',
    subtitle: 'Assign her new tasks',
  },
  {
    avatar: img1,
    title: 'Roman Joined the Team!',
    subtitle: 'Congratulate him',
  },
  {
    avatar: img2,
    title: 'New message received',
    subtitle: 'Salma sent you new message',
  },
  {
    avatar: img3,
    title: 'New Payment received',
    subtitle: 'Check your earnings',
  },
  {
    avatar: img4,
    title: 'Jolly completed tasks',
    subtitle: 'Assign her new tasks',
  },
];

//
// Messages dropdown
//
interface messageType {
  avatar: string;
  title: string;
  subtitle: string;
  time: string;
  status: string;
}
const messages: messageType[] = [
  {
    avatar: img1,
    title: 'Roman Joined the Team!',
    subtitle: 'Congratulate him',
    time: '1 hours ago',
    status: 'success',
  },
  {
    avatar: img2,
    title: 'New message received',
    subtitle: 'Salma sent you new message',
    time: '1 day ago',
    status: 'warning',
  },
  {
    avatar: img3,
    title: 'New Payment received',
    subtitle: 'Check your earnings',
    time: '2 days ago',
    status: 'success',
  },
  {
    avatar: img4,
    title: 'Jolly completed tasks',
    subtitle: 'Assign her new tasks',
    time: '1 week ago',
    status: 'danger',
  },
];

//
// Profile dropdown
//
interface ProfileType {
  href: string;
  title: string;
  subtitle: string;
  icon: any;
}
const profile: ProfileType[] = [
  {
    href: '/',
    title: 'My Profile',
    subtitle: 'Account Settings',
    icon: icon1,
  },
  {
    href: '/',
    title: 'My Inbox',
    subtitle: 'Messages & Emails',
    icon: icon2,
  },
  {
    href: '/',
    title: 'My Tasks',
    subtitle: 'To-do and Daily Tasks',
    icon: icon3,
  },
];

// apps dropdown

interface appsLinkType {
  href: string;
  title : string;
  subtext: string;
  avatar: string;
}

const appsLink:appsLinkType[] = [
  {
    href: '/',
    title: 'Chat Application',
    subtext: 'New messages arrived',
    avatar: ddIcon1
  },
  {
    href: '/',
    title: 'eCommerce App',
    subtext: 'New stock available',
    avatar: ddIcon2
  },
  {
    href: '/',
    title: 'Notes App',
    subtext: 'To-do and Daily tasks',
    avatar: ddIcon3
  },
  {
    href: '/',
    title: 'Calendar App',
    subtext: 'Get dates',
    avatar: ddIcon4
  },
  {
    href: '/',
    title: 'Contact Application',
    subtext: '2 Unsaved Contacts',
    avatar: ddIcon5
  },
  {
    href: '/',
    title: 'Tickets App',
    subtext: 'Submit tickets',
    avatar: ddIcon6
  },
  {
    href: '/',
    title: 'Email App',
    subtext: 'Get new emails',
    avatar: ddIcon7
  },
  {
    href: '/',
    title: 'Blog App',
    subtext: 'added new blog',
    avatar: ddIcon8
  },
]


interface LinkType {
  href: string;
  title: string;
}

const pageLinks:LinkType[] = [
  {
    href: '/',
    title: 'Pricing Page'
  },
  {
    href: '/',
    title: 'Authentication Design'
  },
  {
    href: '/',
    title: 'Register Now'
  },
  {
    href: '/',
    title: '404 Error Page'
  },
  {
    href: '/',
    title: 'Login Page'
  },
  {
    href: '/',
    title: 'User Application'
  },
  {
    href: '/',
    title: 'Blog Design'
  },
  {
    href: '/',
    title: 'Shopping Cart'
  },
]

export { notifications, messages, profile, pageLinks, appsLink };

===== src/layouts/full/vertical/header/Header.tsx =====
import { IconButton, Box, AppBar, useMediaQuery, Toolbar, styled, Stack } from '@mui/material';

import { useSelector, useDispatch } from 'src/store/Store';
import {
  toggleSidebar,
  toggleMobileSidebar,
  setDarkMode,
} from 'src/store/customizer/CustomizerSlice';
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import { IconMenu2, IconMoon, IconSun } from '@tabler/icons-react';
import Notifications from './Notification';
import Profile from './Profile';
import Cart from './Cart';
import Search from './Search';
import Language from './Language';
import { AppState } from 'src/store/Store';
import Navigation from './Navigation';
import MobileRightSidebar from './MobileRightSidebar';

const Header = () => {
  const lgUp = useMediaQuery((theme: any) => theme.breakpoints.up('lg'));
  const lgDown = useMediaQuery((theme: any) => theme.breakpoints.down('lg'));

  // drawer
  const customizer = useSelector((state: AppState) => state.customizer);
  const dispatch = useDispatch();

  const AppBarStyled = styled(AppBar)(({ theme }) => ({
    boxShadow: 'none',
    background: theme.palette.background.paper,
    justifyContent: 'center',
    backdropFilter: 'blur(4px)',
    [theme.breakpoints.up('lg')]: {
      minHeight: customizer.TopbarHeight,
    },
  }));
  const ToolbarStyled = styled(Toolbar)(({ theme }) => ({
    width: '100%',
    color: theme.palette.text.secondary,
  }));

  return (
    <AppBarStyled position="sticky" color="default">
      <ToolbarStyled>
        {/* ------------------------------------------- */}
        {/* Toggle Button Sidebar */}
        {/* ------------------------------------------- */}
        <IconButton
          color="inherit"
          aria-label="menu"
          onClick={lgUp ? () => dispatch(toggleSidebar()) : () => dispatch(toggleMobileSidebar())}
        >
          <IconMenu2 size="20" />
        </IconButton>

        {/* ------------------------------------------- */}
        {/* Search Dropdown */}
        {/* ------------------------------------------- */}
        <Search />
        {lgUp ? (
          <>
            <Navigation />
          </>
        ) : null}

        <Box flexGrow={1} />
        <Stack spacing={1} direction="row" alignItems="center">
          <Language />
          {/* ------------------------------------------- */}
          {/* Ecommerce Dropdown */}
          {/* ------------------------------------------- */}
          <Cart />
          {/* ------------------------------------------- */}
          {/* End Ecommerce Dropdown */}
          {/* ------------------------------------------- */}

          <IconButton size="large" color="inherit">
            {customizer.activeMode === 'light' ? (
              <IconMoon size="21" stroke="1.5" onClick={() => dispatch(setDarkMode('dark'))} />
            ) : (
              <IconSun size="21" stroke="1.5" onClick={() => dispatch(setDarkMode('light'))} />
            )}
          </IconButton>

          <Notifications />
          {/* ------------------------------------------- */}
          {/* Toggle Right Sidebar for mobile */}
          {/* ------------------------------------------- */}
          {lgDown ? <MobileRightSidebar /> : null}
          <Profile />
        </Stack>
      </ToolbarStyled>
    </AppBarStyled>
  );
};

export default Header;

===== src/layouts/full/vertical/header/Language.tsx =====
// تحديث src/layouts/full/vertical/header/Language.tsx
import React, { useEffect } from 'react';
import { Avatar, IconButton, Menu, MenuItem, Typography, Stack } from '@mui/material';
import { useSelector, useDispatch } from 'src/store/Store';
import { setLanguage } from 'src/store/customizer/CustomizerSlice';
import FlagEn from 'src/assets/images/flag/icon-flag-en.svg';
import FlagSa from 'src/assets/images/flag/icon-flag-sa.svg';
import { useTranslation } from 'react-i18next';
import { AppState } from 'src/store/Store';

const Languages = [
  {
    flagname: 'العربية (Arabic)',
    icon: FlagSa,
    value: 'ar',
  },
  {
    flagname: 'English (UK)',
    icon: FlagEn,
    value: 'en',
  },
];

const Language = () => {
  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);
  const dispatch = useDispatch();
  const open = Boolean(anchorEl);
  const customizer = useSelector((state: AppState) => state.customizer);
  const currentLang = Languages.find((_lang) => _lang.value === customizer.isLanguage) || Languages[0];
  const { i18n } = useTranslation();

  const handleClick = (event: React.MouseEvent<HTMLElement>) => {
    setAnchorEl(event.currentTarget);
  };

  const handleClose = () => {
    setAnchorEl(null);
  };

  const handleLanguageChange = (langValue: string) => {
    dispatch(setLanguage(langValue));
    i18n.changeLanguage(langValue);
    handleClose();
  };

  // تحديث i18n عند تغيير اللغة في الـ store
  useEffect(() => {
    if (customizer.isLanguage && i18n.language !== customizer.isLanguage) {
      i18n.changeLanguage(customizer.isLanguage);
    }
  }, [customizer.isLanguage, i18n]);

  return (
    <>
      <IconButton
        aria-label="language selector"
        id="language-button"
        aria-controls={open ? 'language-menu' : undefined}
        aria-expanded={open ? 'true' : undefined}
        aria-haspopup="true"
        onClick={handleClick}
        size="large"
        color="inherit"
      >
        <Avatar 
          src={currentLang.icon} 
          alt={currentLang.value} 
          sx={{ width: 20, height: 20 }}
        />
      </IconButton>
      
      <Menu
        id="language-menu"
        anchorEl={anchorEl}
        open={open}
        onClose={handleClose}
        sx={{
          '& .MuiMenu-paper': {
            width: '200px',
          },
        }}
      >
        {Languages.map((option, index) => (
          <MenuItem
            key={index}
            sx={{ py: 2, px: 3 }}
            onClick={() => handleLanguageChange(option.value)}
            selected={option.value === customizer.isLanguage}
          >
            <Stack direction="row" spacing={1} alignItems="center">
              <Avatar 
                src={option.icon} 
                alt={option.flagname} 
                sx={{ width: 20, height: 20 }}
              />
              <Typography>{option.flagname}</Typography>
            </Stack>
          </MenuItem>
        ))}
      </Menu>
    </>
  );
};

export default Language;

===== src/layouts/full/vertical/header/Message.tsx =====
import { useState } from 'react';
import {
  IconButton,
  Box,
  Badge,
  Menu,
  MenuItem,
  Avatar,
  Typography,
  Divider,
  Button,
  Stack
} from '@mui/material';
import * as dropdownData from './data';

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import { IconChecks, IconClock, IconMessageDots } from '@tabler/icons-react';
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';

const Message = () => {
  const [anchorEl2, setAnchorEl2] = useState(null);

  const handleClick2 = (event: any) => {
    setAnchorEl2(event.currentTarget);
  };

  const handleClose2 = () => {
    setAnchorEl2(null);
  };

  return (
    <Box>
      <IconButton
        size="large"
        aria-label="show 11 new notifications"
        color="inherit"
        aria-controls="msgs-menu"
        aria-haspopup="true"
        sx={{
          color: anchorEl2 ? 'primary.main' : '',
        }}
        onClick={handleClick2}
      >
        <Badge variant="dot" color="primary">
          <IconMessageDots size="21" stroke="1.5" />
        </Badge>
      </IconButton>
      {/* ------------------------------------------- */}
      {/* Message Dropdown */}
      {/* ------------------------------------------- */}
      <Menu
        id="msgs-menu"
        anchorEl={anchorEl2}
        keepMounted
        open={Boolean(anchorEl2)}
        onClose={handleClose2}
        anchorOrigin={{ horizontal: 'right', vertical: 'bottom' }}
        transformOrigin={{ horizontal: 'right', vertical: 'top' }}
        sx={{
          '& .MuiMenu-paper': {
            width: '385px',
          },
        }}
      >
        <Stack direction="row" p={2} justifyContent="space-between" alignItems="center">
          <Box>
            <Typography variant="h5">Messages</Typography>
            <Typography variant="subtitle2" color="textSecondary">
              You have 3 unread messages
            </Typography>
          </Box>
          <IconChecks width={20} height={20} />
        </Stack>
        <Divider />
        {dropdownData.messages.map((message) => (
          <Box key={message.title}>
            <MenuItem sx={{ py: 2 }}>
              <Stack direction="row" spacing={2}>
                <Avatar
                  src={message.avatar}
                  alt={message.avatar}
                  sx={{
                    width: 45,
                    height: 45,
                  }}
                />
                <Box>
                  <Typography
                    variant="h6"
                    noWrap
                    sx={{
                      width: '240px',
                    }}
                  >
                    {message.title}
                  </Typography>
                  <Typography
                    color="textSecondary"
                    variant="subtitle1"
                    fontWeight={400}
                    sx={{
                      width: '240px',
                    }}
                    noWrap
                  >
                    {message.subtitle}
                  </Typography>
                  <Typography
                    color="textSecondary"
                    variant="subtitle2"
                    display="flex"
                    alignItems="center"
                    gap={1}
                  >
                    <IconClock width={16} height={16} />
                    {message.time}
                  </Typography>
                </Box>
              </Stack>
            </MenuItem>
            <Divider
              style={{
                marginTop: 0,
                marginBottom: 0,
              }}
            />
          </Box>
        ))}
        <Box p={2} pb={1}>
          <Button variant="contained" color="primary" fullWidth>
            See all messages
          </Button>
        </Box>
      </Menu>
    </Box>
  );
};

export default Message;

===== src/layouts/full/vertical/header/MobileRightSidebar.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React, { useState } from 'react';
import {
  IconApps,
  IconCalendarEvent,
  IconChevronDown,
  IconChevronUp,
  IconGridDots,
  IconMail,
  IconMessages,
} from '@tabler/icons-react';
import {
  Box,
  Typography,
  Drawer,
  IconButton,
  List,
  ListItemButton,
  ListItemIcon,
  ListItemText,
  Collapse,
} from '@mui/material';

import { Link } from 'react-router';
import AppLinks from './AppLinks';
import QuickLinks from './QuickLinks';

const MobileRightSidebar = () => {
  const [showDrawer, setShowDrawer] = useState(false);

  const [open, setOpen] = React.useState(true);

  const handleClick = () => {
    setOpen(!open);
  };

  const cartContent = (
    <Box>
      {/* ------------------------------------------- */}
      {/* Apps Content */}
      {/* ------------------------------------------- */}
      <Box px={1}>
        <List
          sx={{ width: '100%', maxWidth: 360, bgcolor: 'background.paper' }}
          component="nav"
          aria-labelledby="nested-list-subheader"
        >
          <ListItemButton component={Link} to="/apps/chats">
            <ListItemIcon sx={{ minWidth: 35 }}>
              <IconMessages size="21" stroke="1.5" />
            </ListItemIcon>
            <ListItemText>
              <Typography variant="subtitle2" fontWeight={600}>
                Chats
              </Typography>
            </ListItemText>
          </ListItemButton>
          <ListItemButton component={Link} to="/apps/calendar">
            <ListItemIcon sx={{ minWidth: 35 }}>
              <IconCalendarEvent size="21" stroke="1.5" />
            </ListItemIcon>
            <ListItemText>
              <Typography variant="subtitle2" fontWeight={600}>
                Calendar
              </Typography>
            </ListItemText>
          </ListItemButton>
          <ListItemButton component={Link} to="/apps/email">
            <ListItemIcon sx={{ minWidth: 35 }}>
              <IconMail size="21" stroke="1.5" />
            </ListItemIcon>
            <ListItemText>
              <Typography variant="subtitle2" fontWeight={600}>
                Email
              </Typography>
            </ListItemText>
          </ListItemButton>
          <ListItemButton onClick={handleClick}>
            <ListItemIcon sx={{ minWidth: 35 }}>
              <IconApps size="21" stroke="1.5" />
            </ListItemIcon>
            <ListItemText>
              <Typography variant="subtitle2" fontWeight={600}>
                Apps
              </Typography>
            </ListItemText>
            {open ? (
              <IconChevronDown size="21" stroke="1.5" />
            ) : (
              <IconChevronUp size="21" stroke="1.5" />
            )}
          </ListItemButton>
          <Collapse in={open} timeout="auto" unmountOnExit>
            <Box px={4} pt={3} overflow="hidden">
              <AppLinks />
            </Box>
          </Collapse>
        </List>
      </Box>

      <Box px={3} mt={3}>
        <QuickLinks />
      </Box>
    </Box>
  );

  return (
    <Box>
      <IconButton
        size="large"
        color="inherit"
        onClick={() => setShowDrawer(true)}
        sx={{
          ...(showDrawer && {
            color: 'primary.main',
          }),
        }}
      >
        <IconGridDots size="21" stroke="1.5" />
      </IconButton>
      {/* ------------------------------------------- */}
      {/* Cart Sidebar */}
      {/* ------------------------------------------- */}
      <Drawer
        anchor="right"
        open={showDrawer}
        onClose={() => setShowDrawer(false)}
        PaperProps={{ sx: { width: '300px' } }}
      >
        <Box p={3} pb={0}>
          <Typography variant="h5" fontWeight={600}>
            Navigation
          </Typography>
        </Box>

        {/* component */}
        {cartContent}
      </Drawer>
    </Box>
  );
};

export default MobileRightSidebar;

===== src/layouts/full/vertical/header/Navigation.tsx =====
import { useState } from 'react';
import { Box, Menu, Typography, Button, Divider, Grid2 as Grid } from '@mui/material';
import { Link } from 'react-router';
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import { IconChevronDown, IconHelp } from '@tabler/icons-react';
import AppLinks from './AppLinks';
import QuickLinks from './QuickLinks';
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';

const AppDD = () => {
  const [anchorEl2, setAnchorEl2] = useState(null);

  const handleClick2 = (event: any) => {
    setAnchorEl2(event.currentTarget);
  };

  const handleClose2 = () => {
    setAnchorEl2(null);
  };

  return (<>
    <Box>
      <Button
        aria-label="show 11 new notifications"
        color="inherit"
        variant="text"
        aria-controls="msgs-menu"
        aria-haspopup="true"
        sx={{
          bgcolor: anchorEl2 ? 'primary.light' : '',
          color: anchorEl2 ? 'primary.main' : (theme) => theme.palette.text.secondary,
        }}
        onClick={handleClick2}
        endIcon={<IconChevronDown size="15" style={{ marginLeft: '-5px', marginTop: '2px' }} />}
      >
        Apps
      </Button>
      {/* ------------------------------------------- */}
      {/* Message Dropdown */}
      {/* ------------------------------------------- */}
      <Menu
        id="msgs-menu"
        anchorEl={anchorEl2}
        keepMounted
        open={Boolean(anchorEl2)}
        onClose={handleClose2}
        anchorOrigin={{ horizontal: 'left', vertical: 'bottom' }}
        transformOrigin={{ horizontal: 'left', vertical: 'top' }}
        sx={{
          '& .MuiMenu-paper': {
            width: '850px',
          },
          '& .MuiMenu-paper ul': {
            p: 0,
          },
        }}
      >
        <Grid container>
          <Grid
            display="flex"
            size={{
              sm: 8
            }}>
            <Box p={4} pr={0} pb={3}>
              <AppLinks />
              <Divider />
              <Box
                sx={{
                  display: {
                    xs: 'none',
                    sm: 'flex',
                  },
                }}
                alignItems="center"
                justifyContent="space-between"
                pt={2}
                pr={4}
              >
                <Link to="/faq">
                  <Typography
                    variant="subtitle2"
                    fontWeight="600"
                    color="textPrimary"
                    display="flex"
                    alignItems="center"
                    gap="4px"
                  >
                    <IconHelp width={24} />
                    Frequently Asked Questions
                  </Typography>
                </Link>
                <Button variant="contained" color="primary">
                  Check
                </Button>
              </Box>
            </Box>
            <Divider orientation="vertical" />
          </Grid>
          <Grid
            size={{
              sm: 4
            }}>
            <Box p={4}>
              <QuickLinks />
            </Box>
          </Grid>
        </Grid>
      </Menu>
    </Box>
    <Button color="inherit" sx={{ color: (theme) => theme.palette.text.secondary }} variant="text" to="/" component={Link}>
      Chat
    </Button>
    <Button color="inherit" sx={{ color: (theme) => theme.palette.text.secondary }} variant="text" to="/" component={Link}>
      Calendar
    </Button>
    <Button color="inherit" sx={{ color: (theme) => theme.palette.text.secondary }} variant="text" to="/" component={Link}>
      Email
    </Button>
  </>);
};

export default AppDD;

===== src/layouts/full/vertical/header/Notification.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React, { useState } from 'react';
import {
  IconButton,
  Box,
  Badge,
  Menu,
  MenuItem,
  Avatar,
  Typography,
  Button,
  Chip,
  Stack
} from '@mui/material';
import * as dropdownData from './data';
import Scrollbar from 'src/components/custom-scroll/Scrollbar';

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import { IconBellRinging } from '@tabler/icons-react';
import { Link } from 'react-router';

const Notifications = () => {
  const [anchorEl2, setAnchorEl2] = useState(null);

  const handleClick2 = (event: any) => {
    setAnchorEl2(event.currentTarget);
  };

  const handleClose2 = () => {
    setAnchorEl2(null);
  };

  return (
    <Box>
      <IconButton
        size="large"
        aria-label="show 11 new notifications"
        color="inherit"
        aria-controls="msgs-menu"
        aria-haspopup="true"
        sx={{
          color: anchorEl2 ? 'primary.main' : 'text.secondary',
        }}
        onClick={handleClick2}
      >
        <Badge variant="dot" color="primary">
          <IconBellRinging size="21" stroke="1.5" />
        </Badge>
      </IconButton>
      {/* ------------------------------------------- */}
      {/* Message Dropdown */}
      {/* ------------------------------------------- */}
      <Menu
        id="msgs-menu"
        anchorEl={anchorEl2}
        keepMounted
        open={Boolean(anchorEl2)}
        onClose={handleClose2}
        anchorOrigin={{ horizontal: 'right', vertical: 'bottom' }}
        transformOrigin={{ horizontal: 'right', vertical: 'top' }}
        sx={{
          '& .MuiMenu-paper': {
            width: '360px',
          },
        }}
      >
        <Stack direction="row" py={2} px={4} justifyContent="space-between" alignItems="center">
          <Typography variant="h6">Notifications</Typography>
          <Chip label="5 new" color="primary" size="small" />
        </Stack>
        <Scrollbar sx={{ height: '385px' }}>
          {dropdownData.notifications.map((notification, index) => (
            <Box key={index}>
              <MenuItem sx={{ py: 2, px: 4 }}>
                <Stack direction="row" spacing={2}>
                  <Avatar
                    src={notification.avatar}
                    alt={notification.avatar}
                    sx={{
                      width: 48,
                      height: 48,
                    }}
                  />
                  <Box>
                    <Typography
                      variant="subtitle2"
                      color="textPrimary"
                      fontWeight={600}
                      noWrap
                      sx={{
                        width: '240px',
                      }}
                    >
                      {notification.title}
                    </Typography>
                    <Typography
                      color="textSecondary"
                      variant="subtitle2"
                      sx={{
                        width: '240px',
                      }}
                      noWrap
                    >
                      {notification.subtitle}
                    </Typography>
                  </Box>
                </Stack>
              </MenuItem>
            </Box>
          ))}
        </Scrollbar>
        <Box p={3} pb={1}>
          <Button to="/" variant="outlined" component={Link} color="primary" fullWidth>
            See all Notifications
          </Button>
        </Box>
      </Menu>
    </Box>
  );
};

export default Notifications;

===== src/layouts/full/vertical/header/Profile.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React, { useState } from 'react';
import { Link } from 'react-router';
import {
  Box,
  Menu,
  Avatar,
  Typography,
  Divider,
  Button,
  IconButton,
  Stack
} from '@mui/material';
import * as dropdownData from './data';

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import { IconMail } from '@tabler/icons-react';

import ProfileImg from 'src/assets/images/profile/user-1.jpg';
import unlimitedImg from 'src/assets/images/backgrounds/unlimited-bg.png';

const Profile = () => {
  const [anchorEl2, setAnchorEl2] = useState(null);
  const handleClick2 = (event: any) => {
    setAnchorEl2(event.currentTarget);
  };
  const handleClose2 = () => {
    setAnchorEl2(null);
  };

  return (
    <Box>
      <IconButton
        size="large"
        aria-label="show 11 new notifications"
        color="inherit"
        aria-controls="msgs-menu"
        aria-haspopup="true"
        sx={{
          ...(typeof anchorEl2 === 'object' && {
            color: 'primary.main',
          }),
        }}
        onClick={handleClick2}
      >
        <Avatar
          src={ProfileImg}
          alt={ProfileImg}
          sx={{
            width: 35,
            height: 35,
          }}
        />
      </IconButton>
      {/* ------------------------------------------- */}
      {/* Message Dropdown */}
      {/* ------------------------------------------- */}
      <Menu
        id="msgs-menu"
        anchorEl={anchorEl2}
        keepMounted
        open={Boolean(anchorEl2)}
        onClose={handleClose2}
        anchorOrigin={{ horizontal: 'right', vertical: 'bottom' }}
        transformOrigin={{ horizontal: 'right', vertical: 'top' }}
        sx={{
          '& .MuiMenu-paper': {
            width: '360px',
            p: 4,
          },
        }}
      >
        <Typography variant="h5">User Profile</Typography>
        <Stack direction="row" py={3} spacing={2} alignItems="center">
          <Avatar src={ProfileImg} alt={ProfileImg} sx={{ width: 95, height: 95 }} />
          <Box>
            <Typography variant="subtitle2" color="textPrimary" fontWeight={600}>
              Mathew Anderson
            </Typography>
            <Typography variant="subtitle2" color="textSecondary">
              Designer
            </Typography>
            <Typography
              variant="subtitle2"
              color="textSecondary"
              display="flex"
              alignItems="center"
              gap={1}
            >
              <IconMail width={15} height={15} />
              info@modernize.com
            </Typography>
          </Box>
        </Stack>
        <Divider />
        {dropdownData.profile.map((profile) => (
          <Box key={profile.title}>
            <Box sx={{ py: 2, px: 0 }} className="hover-text-primary">
              <Link to={profile.href}>
                <Stack direction="row" spacing={2}>
                  <Box
                    width="45px"
                    height="45px"
                    bgcolor="primary.light"
                    display="flex"
                    alignItems="center"
                    justifyContent="center"
                  >
                    <Avatar
                      src={profile.icon}
                      alt={profile.icon}
                      sx={{
                        width: 24,
                        height: 24,
                        borderRadius: 0,
                      }}
                    />
                  </Box>
                  <Box>
                    <Typography
                      variant="subtitle2"
                      fontWeight={600}
                      color="textPrimary"
                      className="text-hover"
                      noWrap
                      sx={{
                        width: '240px',
                      }}
                    >
                      {profile.title}
                    </Typography>
                    <Typography
                      color="textSecondary"
                      variant="subtitle2"
                      sx={{
                        width: '240px',
                      }}
                      noWrap
                    >
                      {profile.subtitle}
                    </Typography>
                  </Box>
                </Stack>
              </Link>
            </Box>
          </Box>
        ))}
        <Box mt={2}>
          <Box bgcolor="primary.light" p={3} mb={3} overflow="hidden" position="relative">
            <Box display="flex" justifyContent="space-between">
              <Box>
                <Typography variant="h5" mb={2}>
                  Unlimited <br />
                  Access
                </Typography>
                <Button variant="contained" color="primary">
                  Upgrade
                </Button>
              </Box>
              <img src={unlimitedImg} alt="unlimited" className="signup-bg"></img>
            </Box>
          </Box>
          <Button to="/" variant="outlined" color="primary" component={Link} fullWidth>
            Logout
          </Button>
        </Box>
      </Menu>
    </Box>
  );
};

export default Profile;

===== src/layouts/full/vertical/header/QuickLinks.tsx =====
import { Typography, Stack } from '@mui/material';
import * as dropdownData from './data';
import { Link } from 'react-router';

const QuickLinks = () => {
  return (
    <>
      <Typography variant="h5">Quick Links</Typography>
      <Stack spacing={2} mt={2}>
        {dropdownData.pageLinks.map((pagelink, index) => (
          <Link to={pagelink.href} key={index} className="hover-text-primary">
            <Typography
              variant="subtitle2"
              color="textPrimary"
              className="text-hover"
              fontWeight={600}
            >
              {pagelink.title}
            </Typography>
          </Link>
        ))}
      </Stack>
    </>
  );
};

export default QuickLinks;

===== src/layouts/full/vertical/header/Search.tsx =====
import { useState } from 'react';
import {
  IconButton,
  Dialog,
  DialogContent,
  Stack,
  Divider,
  Box,
  List,
  ListItemText,
  Typography,
  TextField,
  ListItemButton,
} from '@mui/material';
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import { IconSearch, IconX } from '@tabler/icons-react';
import Menuitems from '../sidebar/MenuItems';
import { Link } from 'react-router';

interface menuType {
  title: string;
  id: string;
  subheader: string;
  children: menuType[];
  href: string;
}

const Search = () => {
  // drawer top
  const [showDrawer2, setShowDrawer2] = useState(false);
  const [search, setSerach] = useState('');

  const handleDrawerClose2 = () => {
    setShowDrawer2(false);
  };

  const filterRoutes = (rotr: any, cSearch: string) => {
    if (rotr.length > 1)
      return rotr.filter((t: any) =>
        t.title ? t.href.toLocaleLowerCase().includes(cSearch.toLocaleLowerCase()) : '',
      );

    return rotr;
  };
  const searchData = filterRoutes(Menuitems, search);

  return (
    <>
      <IconButton
        aria-label="show 4 new mails"
        color="inherit"
        aria-controls="search-menu"
        aria-haspopup="true"
        onClick={() => setShowDrawer2(true)}
        size="large"
      >
        <IconSearch size="16" />
      </IconButton>
      <Dialog
        open={showDrawer2}
        onClose={() => setShowDrawer2(false)}
        fullWidth
        maxWidth={'sm'}
        aria-labelledby="alert-dialog-title"
        aria-describedby="alert-dialog-description"
        PaperProps={{ sx: { position: 'fixed', top: 30, m: 0 } }}
      >
        <DialogContent className="testdialog">
          <Stack direction="row" spacing={2} alignItems="center">
            <TextField
              id="tb-search"
              placeholder="Search here"
              fullWidth
              onChange={(e) => setSerach(e.target.value)}
              inputProps={{ 'aria-label': 'Search here' }}
            />
            <IconButton size="small" onClick={handleDrawerClose2}>
              <IconX size="18" />
            </IconButton>
          </Stack>
        </DialogContent>
        <Divider />
        <Box p={2} sx={{ maxHeight: '60vh', overflow: 'auto' }}>
          <Typography variant="h5" p={1}>
            Quick Page Links
          </Typography>
          <Box>
            <List component="nav">
              {searchData.map((menu: menuType) => {
                return (
                  <Box key={menu.title ? menu.id : menu.subheader}>
                    {menu.title && !menu.children ? (
                      <ListItemButton sx={{ py: 0.5, px: 1 }} to={menu?.href} component={Link}>
                        <ListItemText
                          primary={menu.title}
                          secondary={menu?.href}
                          sx={{ my: 0, py: 0.5 }}
                        />
                      </ListItemButton>
                    ) : (
                      ''
                    )}
                    {menu.children ? (
                      <>
                        {menu.children.map((child: menuType) => {
                          return (
                            <ListItemButton
                              sx={{ py: 0.5, px: 1 }}
                              to={child.href}
                              component={Link}
                              key={child.title ? child.id : menu.subheader}
                            >
                              <ListItemText
                                primary={child.title}
                                secondary={child.href}
                                sx={{ my: 0, py: 0.5 }}
                              />
                            </ListItemButton>
                          );
                        })}
                      </>
                    ) : (
                      ''
                    )}
                  </Box>
                );
              })}
            </List>
          </Box>
        </Box>
      </Dialog>
    </>
  );
};

export default Search;

===== src/layouts/full/vertical/sidebar/MenuItems.ts =====
// src/layouts/full/vertical/sidebar/MenuItems.ts
import { uniqueId } from 'lodash';

interface MenuitemsType {
  [x: string]: any;
  id?: string;
  navlabel?: boolean;
  subheader?: string;
  title?: string;
  icon?: any;
  href?: string;
  children?: MenuitemsType[];
  chip?: string;
  chipColor?: string;
  variant?: string;
  external?: boolean;
  disabled?: boolean;
  subtitle?: string;
}

import {
  IconDashboard,
  IconCreditCard,
  IconPlus,
  IconQrcode,
  IconAnalyze,
  IconUser,
  IconSettings,
  IconBell,
  IconCrown,
  IconShare,
  IconEye,
  IconEdit,
  IconDownload,
  IconHelp,
  IconMail,
  IconPhone,
  IconUsers,
  IconChartBar,
  IconPalette,
  IconDeviceMobile,
  IconWorld,
  IconShield,
  IconStar
} from '@tabler/icons-react';

const Menuitems: MenuitemsType[] = [
  // Dashboard Section
  {
    navlabel: true,
    subheader: 'sidebar.sections.dashboard',
  },
  {
    id: uniqueId(),
    title: 'sidebar.dashboard.home',
    icon: IconDashboard,
    href: '/dashboard/home',
  },
  {
    id: uniqueId(),
    title: 'sidebar.dashboard.analytics',
    icon: IconAnalyze,
    href: '/dashboard/analytics',
    chip: 'sidebar.chips.new',
    chipColor: 'primary',
  },

  // Cards Management Section
  {
    navlabel: true,
    subheader: 'sidebar.sections.cards',
  },
  {
    id: uniqueId(),
    title: 'sidebar.cards.myCards',
    icon: IconCreditCard,
    href: '/dashboard/cards',
  },
  {
    id: uniqueId(),
    title: 'sidebar.cards.createNew',
    icon: IconPlus,
    href: '/dashboard/cards/create',
    chip: 'sidebar.chips.create',
    chipColor: 'success',
  },
  {
    id: uniqueId(),
    title: 'sidebar.cards.templates',
    icon: IconPalette,
    href: '/dashboard/cards/templates', // تصحيح المسار
  },

  // QR & Sharing Section
  {
    navlabel: true,
    subheader: 'sidebar.sections.sharing',
  },
  {
    id: uniqueId(),
    title: 'sidebar.qr.generator',
    icon: IconQrcode,
    href: '/dashboard/qr',
  },
  {
    id: uniqueId(),
    title: 'sidebar.sharing.share',
    icon: IconShare,
    href: '/dashboard/share',
    chip: 'sidebar.chips.soon',
    chipColor: 'info',
    variant: 'outlined',
  },
  {
    id: uniqueId(),
    title: 'sidebar.sharing.publicView',
    icon: IconEye,
    href: '/dashboard/public-view',
    chip: 'sidebar.chips.soon',
    chipColor: 'info',
    variant: 'outlined',
  },

  // Contacts & Networking
  {
    navlabel: true,
    subheader: 'sidebar.sections.networking',
  },
  {
    id: uniqueId(),
    title: 'sidebar.contacts.contacts',
    icon: IconUsers,
    href: '/dashboard/contacts',
    chip: 'sidebar.chips.soon',
    chipColor: 'info',
    variant: 'outlined',
  },
  {
    id: uniqueId(),
    title: 'sidebar.contacts.leads',
    icon: IconChartBar,
    href: '/dashboard/leads',
    chip: 'sidebar.chips.soon',
    chipColor: 'info',
    variant: 'outlined',
  },

  // Tools & Features
  {
    navlabel: true,
    subheader: 'sidebar.sections.tools',
  },
  {
    id: uniqueId(),
    title: 'sidebar.tools.nfc',
    icon: IconDeviceMobile,
    href: '/dashboard/nfc',
    chip: 'sidebar.chips.pro',
    chipColor: 'warning',
  },
  {
    id: uniqueId(),
    title: 'sidebar.tools.landingPages',
    icon: IconWorld,
    href: '/dashboard/landing-pages',
    chip: 'sidebar.chips.soon',
    chipColor: 'info',
    variant: 'outlined',
  },
  {
    id: uniqueId(),
    title: 'sidebar.tools.downloads',
    icon: IconDownload,
    href: '/dashboard/downloads',
    chip: 'sidebar.chips.soon',
    chipColor: 'info',
    variant: 'outlined',
  },

  // Account & Settings
  {
    navlabel: true,
    subheader: 'sidebar.sections.account',
  },
  {
    id: uniqueId(),
    title: 'sidebar.account.profile',
    icon: IconUser,
    href: '/dashboard/profile',
    chip: 'sidebar.chips.soon',
    chipColor: 'info',
    variant: 'outlined',
  },
  {
    id: uniqueId(),
    title: 'sidebar.account.subscription',
    icon: IconCrown,
    href: '/dashboard/subscription',
    chip: 'sidebar.chips.upgrade',
    chipColor: 'secondary',
    variant: 'outlined',
  },
  {
    id: uniqueId(),
    title: 'sidebar.account.notifications',
    icon: IconBell,
    href: '/dashboard/notifications',
    chip: 'sidebar.chips.soon',
    chipColor: 'info',
    variant: 'outlined',
  },
  {
    id: uniqueId(),
    title: 'sidebar.account.settings',
    icon: IconSettings,
    href: '/dashboard/settings',
    chip: 'sidebar.chips.soon',
    chipColor: 'info',
    variant: 'outlined',
  },
  {
    id: uniqueId(),
    title: 'sidebar.account.privacy',
    icon: IconShield,
    href: '/dashboard/privacy',
    chip: 'sidebar.chips.soon',
    chipColor: 'info',
    variant: 'outlined',
  },

  // Support & Help
  {
    navlabel: true,
    subheader: 'sidebar.sections.support',
  },
  {
    id: uniqueId(),
    title: 'sidebar.support.help',
    icon: IconHelp,
    href: '/dashboard/help',
    chip: 'sidebar.chips.soon',
    chipColor: 'info',
    variant: 'outlined',
  },
  {
    id: uniqueId(),
    title: 'sidebar.support.contact',
    icon: IconMail,
    href: '/dashboard/contact',
    chip: 'sidebar.chips.soon',
    chipColor: 'info',
    variant: 'outlined',
  },
  {
    id: uniqueId(),
    title: 'sidebar.support.feedback',
    icon: IconStar,
    href: '/dashboard/feedback',
    subtitle: 'sidebar.support.feedbackSubtitle',
    chip: 'sidebar.chips.soon',
    chipColor: 'info',
    variant: 'outlined',
  },

  // External Links
  {
    id: uniqueId(),
    title: 'sidebar.external.website',
    external: true,
    icon: IconWorld,
    href: 'https://mazyone.com',
  },
];

export default Menuitems;

===== src/layouts/full/vertical/sidebar/module-name.d.ts =====
declare module 'stylis-plugin-rtl';

===== src/layouts/full/vertical/sidebar/NavCollapse/index.tsx =====
// src/layouts/full/vertical/sidebar/NavCollapse/index.tsx
import React from 'react';
import { useState } from 'react';
import { useSelector } from 'src/store/Store';
import { useLocation } from 'react-router';
import {
  ListItemIcon,
  ListItemButton,
  Collapse,
  styled,
  ListItemText,
  useTheme,
} from '@mui/material';
import NavItem from '../NavItem';
import { IconChevronDown, IconChevronUp } from '@tabler/icons-react';
import { AppState } from 'src/store/Store';

type NavGroupProps = {
  [x: string]: any;
  navlabel?: boolean;
  subheader?: string;
  title?: string;
  icon?: any;
  href?: any;
  children?: NavGroupProps[];
};

interface NavCollapseProps {
  menu: NavGroupProps;
  level: number;
  pathWithoutLastPart: any;
  pathDirect: any;
  hideMenu: any;
  onClick: (event: React.MouseEvent<HTMLElement>) => void;
  t: (key: string) => string;
}

const NavCollapse = ({
  menu,
  level,
  pathWithoutLastPart,
  pathDirect,
  hideMenu,
  onClick,
  t
}: NavCollapseProps) => {
  const customizer = useSelector((state: AppState) => state.customizer);
  const Icon = menu?.icon;
  const theme = useTheme();
  const { pathname } = useLocation();
  const [open, setOpen] = useState(false);
  const menuIcon =
    level > 1 ? <Icon stroke={1.5} size="1rem" /> : <Icon stroke={1.5} size="1.3rem" />;

  const handleClick = () => {
    setOpen(!open);
  };

  // menu collapse for sub-levels
  React.useEffect(() => {
    setOpen(false);
    menu?.children?.forEach((item: any) => {
      if (item?.href === pathname) {
        setOpen(true);
      }
    });
  }, [pathname, menu.children]);

  const ListItemStyled = styled(ListItemButton)(() => ({
    marginBottom: '2px',
    padding: '8px 10px',
    paddingLeft: hideMenu ? '10px' : level > 2 ? `${level * 15}px` : '10px',
    backgroundColor: open && level < 2 ? theme.palette.primary.main : '',
    whiteSpace: 'nowrap',
    '&:hover': {
      backgroundColor: pathname.includes(menu.href) || open
        ? theme.palette.primary.main
        : theme.palette.primary.light,
      color: pathname.includes(menu.href) || open ? 'white' : theme.palette.primary.main,
    },
    color:
      open && level < 2
        ? 'white'
        : level > 1 && open
          ? theme.palette.primary.main
          : theme.palette.text.secondary,
    borderRadius: `${customizer.borderRadius}px`,
  }));

  // If Menu has Children
  const submenus = menu.children?.map((item: any) => {
    if (item.children) {
      return (
        <NavCollapse
          key={item?.id}
          menu={item}
          level={level + 1}
          pathWithoutLastPart={pathWithoutLastPart}
          pathDirect={pathDirect}
          hideMenu={hideMenu}
          onClick={onClick}
          t={t}
        />
      );
    } else {
      return (
        <NavItem
          key={item.id}
          item={item}
          level={level + 1}
          pathDirect={pathDirect}
          hideMenu={hideMenu}
          onClick={onClick}
          t={t}
        />
      );
    }
  });

  return (
    <>
      <ListItemStyled
        onClick={handleClick}
        selected={pathWithoutLastPart === menu.href}
        key={menu?.id}
      >
        <ListItemIcon
          sx={{
            minWidth: '36px',
            p: '3px 0',
            color: 'inherit',
          }}
        >
          {menuIcon}
        </ListItemIcon>
        <ListItemText color="inherit">
          {hideMenu ? '' : <>{t(menu.title ?? '')}</>}
        </ListItemText>
        {!hideMenu && (
          <>
            {!open ? <IconChevronDown size="1rem" /> : <IconChevronUp size="1rem" />}
          </>
        )}
      </ListItemStyled>
      <Collapse in={open} timeout="auto" unmountOnExit>
        {submenus}
      </Collapse>
    </>
  );
};

export default NavCollapse;

===== src/layouts/full/vertical/sidebar/NavGroup/NavGroup.tsx =====
// src/layouts/full/vertical/sidebar/NavGroup/NavGroup.tsx
import { ListSubheader, styled, useTheme } from '@mui/material';
import { IconDots } from '@tabler/icons-react';
import React from 'react';
import { useSelector } from 'src/store/Store';
import { AppState } from 'src/store/Store';

type NavGroup = {
  navlabel?: boolean;
  subheader?: string;
};

interface ItemType {
  item: NavGroup;
  hideMenu: string | boolean;
  t: (key: string) => string;
}

const NavGroup = ({ item, hideMenu, t }: ItemType) => {
  const theme = useTheme();
  const customizer = useSelector((state: AppState) => state.customizer);
  
  const ListSubheaderStyle = styled((props: any) => <ListSubheader disableSticky {...props} />)(
    ({ theme }) => ({
      ...theme.typography.overline,
      fontWeight: '700',
      marginTop: theme.spacing(3),
      marginBottom: theme.spacing(0),
      color: customizer.activeMode === 'dark' 
        ? theme.palette.text.secondary 
        : theme.palette.text.primary,
      lineHeight: '26px',
      padding: '3px 12px',
    }),
  );

  return (
    <ListSubheaderStyle>
      {hideMenu ? <IconDots size="14" /> : t(item?.subheader || '')}
    </ListSubheaderStyle>
  );
};

export default NavGroup;

===== src/layouts/full/vertical/sidebar/NavItem/index.tsx =====
// src/layouts/full/vertical/sidebar/NavItem/index.tsx
import React from 'react';
import { NavLink } from 'react-router';
import {
  ListItemIcon,
  List,
  styled,
  ListItemText,
  Chip,
  useTheme,
  Typography,
  ListItemButton,
} from '@mui/material';
import { useSelector } from 'src/store/Store';
import { AppState } from 'src/store/Store';

type NavGroup = {
  [x: string]: any;
  id?: string;
  navlabel?: boolean;
  subheader?: string;
  title?: string;
  icon?: any;
  href?: string;
  children?: NavGroup[];
  chip?: string;
  chipColor?: any;
  variant?: string | any;
  external?: boolean;
  level?: number;
  disabled?: boolean;
  subtitle?: string;
  onClick?: React.MouseEvent<HTMLButtonElement, MouseEvent>;
};

interface ItemType {
  item: NavGroup;
  hideMenu?: any;
  onClick: (event: React.MouseEvent<HTMLElement>) => void;
  level?: number | any;
  pathDirect: string;
  t: (key: string) => string;
}

const NavItem = ({ item, level, pathDirect, hideMenu, onClick, t }: ItemType) => {
  const customizer = useSelector((state: AppState) => state.customizer);
  const Icon = item?.icon;
  const theme = useTheme();
  const itemIcon =
    level > 1 ? <Icon stroke={1.5} size="1rem" /> : <Icon stroke={1.5} size="1.3rem" />;

  const ListItemStyled = styled(ListItemButton)(() => ({
    whiteSpace: 'nowrap',
    marginBottom: '2px',
    padding: '8px 10px',
    borderRadius: `${customizer.borderRadius}px`,
    backgroundColor: level > 1 ? 'transparent !important' : 'inherit',
    color:
      level > 1 && pathDirect === item?.href
        ? `${theme.palette.primary.main}!important`
        : theme.palette.text.secondary,
    paddingLeft: hideMenu ? '10px' : level > 2 ? `${level * 15}px` : '10px',
    '&:hover': {
      backgroundColor: theme.palette.primary.light,
      color: theme.palette.primary.main,
    },
    '&.Mui-selected': {
      color: 'white',
      backgroundColor: theme.palette.primary.main,
      '&:hover': {
        backgroundColor: theme.palette.primary.main,
        color: 'white',
      },
    },
  }));

  const listItemProps: {
    component: any;
    href?: string;
    target?: any;
    to?: any;
  } = {
    component: item?.external ? 'a' : NavLink,
    to: item?.href,
    href: item?.external ? item?.href : '',
    target: item?.external ? '_blank' : '',
  };

  return (
    <List component="li" disablePadding key={item?.id && item.title}>
      <ListItemStyled
        {...listItemProps}
        disabled={item?.disabled}
        selected={pathDirect === item?.href}
        onClick={onClick}
      >
        <ListItemIcon
          sx={{
            minWidth: '36px',
            p: '3px 0',
            color:
              level > 1 && pathDirect === item?.href
                ? `${theme.palette.primary.main}!important`
                : 'inherit',
          }}
        >
          {itemIcon}
        </ListItemIcon>
        <ListItemText>
          {hideMenu ? '' : <>{t(item?.title ?? '')}</>}
          {item?.subtitle && !hideMenu && (
            <>
              <br />
              <Typography variant="caption" sx={{ fontSize: '11px' }}>
                {t(item?.subtitle ?? '')}
              </Typography>
            </>
          )}
        </ListItemText>

        {!item?.chip || hideMenu ? null : (
          <Chip
            color={item?.chipColor}
            variant={item?.variant ? item?.variant : 'filled'}
            size="small"
            label={item?.chip?.startsWith('sidebar.') ? t(item?.chip) : item?.chip}
          />
        )}
      </ListItemStyled>
    </List>
  );
};

export default NavItem;

===== src/layouts/full/vertical/sidebar/Sidebar.tsx =====
// src/layouts/full/vertical/sidebar/Sidebar.tsx
import { useMediaQuery, Box, Drawer, useTheme } from '@mui/material';
import SidebarItems from './SidebarItems';
import Logo from '../../shared/logo/Logo';
import { useSelector, useDispatch } from 'src/store/Store';
import { hoverSidebar, toggleMobileSidebar } from 'src/store/customizer/CustomizerSlice';
import Scrollbar from 'src/components/custom-scroll/Scrollbar';
import { Profile } from './SidebarProfile/Profile';
import { AppState } from 'src/store/Store';

const Sidebar = () => {
  const lgUp = useMediaQuery((theme: any) => theme.breakpoints.up('lg'));
  const customizer = useSelector((state: AppState) => state.customizer);
  const dispatch = useDispatch();
  const theme = useTheme();
  const toggleWidth =
    customizer.isCollapse && !customizer.isSidebarHover
      ? customizer.MiniSidebarWidth
      : customizer.SidebarWidth;

  const onHoverEnter = () => {
    if (customizer.isCollapse) {
      dispatch(hoverSidebar(true));
    }
  };

  const onHoverLeave = () => {
    dispatch(hoverSidebar(false));
  };

  if (lgUp) {
    return (
      <Box
        sx={{
          width: toggleWidth,
          flexShrink: 0,
          ...(customizer.isCollapse && {
            position: 'absolute',
          }),
        }}
      >
        <Drawer
          anchor="left"
          open
          onMouseEnter={onHoverEnter}
          onMouseLeave={onHoverLeave}
          variant="permanent"
          PaperProps={{
            sx: {
              transition: theme.transitions.create('width', {
                duration: theme.transitions.duration.shortest,
              }),
              width: toggleWidth,
              boxSizing: 'border-box',
              borderRight: `1px solid ${theme.palette.divider}`,
              height: '100vh', // طول الصفحة بالكامل
              overflow: 'hidden', // منع الـ scroll للـ sidebar نفسه
            },
          }}
        >
          <Box
            sx={{
              height: '100vh', // طول الصفحة بالكامل
              display: 'flex',
              flexDirection: 'column',
              overflow: 'hidden', // منع الـ scroll
            }}
          >
            {/* Logo Section - ثابت في الأعلى */}
            <Box 
              sx={{ 
                px: 3, 
                py: 2,
                flexShrink: 0, // لا يتقلص
                borderBottom: `1px solid ${theme.palette.divider}`,
                backgroundColor: theme.palette.background.paper,
              }}
            >
              <Logo />
            </Box>
            
            {/* Menu Items Section - قابل للتمرير */}
            <Box
              sx={{
                flex: 1, // يأخذ المساحة المتبقية
                overflow: 'hidden', // منع الـ overflow
                display: 'flex',
                flexDirection: 'column',
              }}
            >
              <Scrollbar 
                sx={{ 
                  flex: 1,
                  '& .simplebar-content': {
                    height: '100%',
                    display: 'flex',
                    flexDirection: 'column',
                  }
                }}
              >
                <SidebarItems />
              </Scrollbar>
            </Box>
            
            {/* Profile Section - ثابت في الأسفل */}
            <Box
              sx={{
                flexShrink: 0, // لا يتقلص
                borderTop: `1px solid ${theme.palette.divider}`,
                backgroundColor: theme.palette.background.paper,
              }}
            >
              <Profile />
            </Box>
          </Box>
        </Drawer>
      </Box>
    );
  }

  // Mobile Sidebar
  return (
    <Drawer
      anchor="left"
      open={customizer.isMobileSidebar}
      onClose={() => dispatch(toggleMobileSidebar())}
      variant="temporary"
      PaperProps={{
        sx: {
          width: customizer.SidebarWidth,
          border: '0 !important',
          boxShadow: (theme) => theme.shadows[8],
          height: '100vh', // طول الصفحة بالكامل للموبايل
          overflow: 'hidden', // منع الـ scroll للـ sidebar نفسه
        },
      }}
    >
      <Box
        sx={{
          height: '100vh',
          display: 'flex',
          flexDirection: 'column',
          overflow: 'hidden',
        }}
      >
        {/* Logo Section - Mobile */}
        <Box 
          sx={{ 
            px: 2, 
            py: 2,
            flexShrink: 0,
            borderBottom: `1px solid ${theme.palette.divider}`,
            backgroundColor: theme.palette.background.paper,
          }}
        >
          <Logo />
        </Box>
        
        {/* Menu Items Section - Mobile */}
        <Box
          sx={{
            flex: 1,
            overflow: 'hidden',
            display: 'flex',
            flexDirection: 'column',
          }}
        >
          <Scrollbar 
            sx={{ 
              flex: 1,
              '& .simplebar-content': {
                height: '100%',
                display: 'flex',
                flexDirection: 'column',
              }
            }}
          >
            <SidebarItems />
          </Scrollbar>
        </Box>
        
        {/* Profile Section - Mobile */}
        <Box
          sx={{
            flexShrink: 0,
            borderTop: `1px solid ${theme.palette.divider}`,
            backgroundColor: theme.palette.background.paper,
          }}
        >
          <Profile />
        </Box>
      </Box>
    </Drawer>
  );
};

export default Sidebar;

===== src/layouts/full/vertical/sidebar/SidebarItems.tsx =====
// src/layouts/full/vertical/sidebar/SidebarItems.tsx
import React from 'react';
import Menuitems from './MenuItems';
import { useLocation } from 'react-router';
import { Box, List, useMediaQuery } from '@mui/material';
import { useSelector, useDispatch } from 'src/store/Store';
import { toggleMobileSidebar } from 'src/store/customizer/CustomizerSlice';
import NavItem from './NavItem';
import NavCollapse from './NavCollapse';
import NavGroup from './NavGroup/NavGroup';
import { useTranslation } from 'react-i18next';
import { AppState } from 'src/store/Store';

const SidebarItems = () => {
  const { pathname } = useLocation();
  const pathDirect = pathname;
  const pathWithoutLastPart = pathname.slice(0, pathname.lastIndexOf('/'));
  const customizer = useSelector((state: AppState) => state.customizer);
  const lgUp = useMediaQuery((theme: any) => theme.breakpoints.up('lg'));
  const hideMenu: any = lgUp ? customizer.isCollapse && !customizer.isSidebarHover : '';
  const dispatch = useDispatch();
  const { t } = useTranslation();

  return (
    <Box sx={{ px: 3 }}>
      <List sx={{ pt: 0 }} className="sidebarNav">
        {Menuitems.map((item) => {
          // {/********SubHeader**********/}
          if (item.subheader) {
            return <NavGroup item={item} hideMenu={hideMenu} key={item.subheader} t={t} />;

            // {/********If Sub Menu**********/}
            /* eslint no-else-return: "off" */
          } else if (item.children) {
            return (
              <NavCollapse
                menu={item}
                pathDirect={pathDirect}
                hideMenu={hideMenu}
                pathWithoutLastPart={pathWithoutLastPart}
                level={1}
                key={item.id}
                onClick={() => dispatch(toggleMobileSidebar())}
                t={t}
              />
            );

            // {/********If Sub No Menu**********/}
          } else {
            return (
              <NavItem 
                item={item} 
                key={item.id} 
                pathDirect={pathDirect} 
                hideMenu={hideMenu}
                onClick={() => dispatch(toggleMobileSidebar())} 
                t={t}
              />
            );
          }
        })}
      </List>
    </Box>
  );
};

export default SidebarItems;

===== src/layouts/full/vertical/sidebar/SidebarProfile/Profile.tsx =====
import { Box, Avatar, Typography, IconButton, Tooltip, useMediaQuery } from '@mui/material';
import { useSelector } from 'src/store/Store';
import img1 from 'src/assets/images/profile/user-1.jpg';
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import { IconPower } from '@tabler/icons-react';
import { AppState } from 'src/store/Store';
import { Link } from 'react-router';

export const Profile = () => {
  const customizer = useSelector((state: AppState) => state.customizer);
  const lgUp = useMediaQuery((theme: any) => theme.breakpoints.up('lg'));
  const hideMenu = lgUp ? customizer.isCollapse && !customizer.isSidebarHover : '';

  return (
    <Box
      display={'flex'}
      alignItems="center"
      gap={2}
      sx={{ m: 3, p: 2, bgcolor: `${'secondary.light'}` }}
    >
      {!hideMenu ? (
        <>
          <Avatar alt="Remy Sharp" src={img1} />

          <Box>
            <Typography variant="h6">Mathew </Typography>
            <Typography variant="caption">Designer</Typography>
          </Box>
          <Box sx={{ ml: 'auto' }}>
            <Tooltip title="Logout" placement="top">
              <IconButton
                color="primary"
                component={Link}
                to="auth/login"
                aria-label="logout"
                size="small"
              >
                <IconPower size="20" />
              </IconButton>
            </Tooltip>
          </Box>
        </>
      ) : (
        ''
      )}
    </Box>
  );
};

===== src/LoadingBar.tsx =====
import { useState, useEffect } from 'react';
import TopLoadingBar from 'react-top-loading-bar';
import { useLocation } from 'react-router';


function LoadingBar() {
    const [progress, setProgress] = useState(0);
    const location = useLocation(); // page navigation.

    const startLoading = () => {
        setProgress(10); // Start loading
    };

    const finishLoading = () => {
        setProgress(100); // Complete loading
        setTimeout(() => setProgress(0), 10); // Reset progress after completion
    };

    // Trigger loading when route changes
    useEffect(() => {
        startLoading();
        setTimeout(() => {
            finishLoading(); // Complete the loader after 2 seconds (or after data load)
        }, 2000); // 2-second delay 
    }, [location]); // trigger whenever the route changes

    return (
        <TopLoadingBar
            color="#5D87FF"
            height={3}
            progress={progress}
        />
    );
}

export default LoadingBar;




===== src/main.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React, { Suspense } from 'react';
import { Provider } from 'react-redux';
import ReactDOM from 'react-dom/client';
import App from './App';
import { store } from './store/Store';
import Spinner from './views/spinner/Spinner';
import './utils/i18n';

ReactDOM.createRoot(document.getElementById('root')!).render(
  <Provider store={store}>
    <Suspense fallback={<Spinner />}>

      <App />

    </Suspense>
  </Provider>,
)

===== src/routes/Router.tsx =====
// src/routes/Router.tsx
import { lazy } from 'react';
import { createBrowserRouter, Navigate } from 'react-router';
import Loadable from '../layouts/full/shared/loadable/Loadable';

/* ***Layouts**** */
const FullLayout = Loadable(lazy(() => import('../layouts/full/FullLayout')));
const BlankLayout = Loadable(lazy(() => import('../layouts/blank/BlankLayout')));

/* ****Public Pages (Blank Layout)**** */
const Homepage = Loadable(lazy(() => import('../views/homepage/Homepage')));
const Login = Loadable(lazy(() => import('../views/authentication/Login')));
const Register = Loadable(lazy(() => import('../views/authentication/Register')));
const ForgotPassword = Loadable(lazy(() => import('../views/authentication/ForgotPassword')));
const ResetPassword = Loadable(lazy(() => import('../views/authentication/ResetPassword')));
const VerifyEmail = Loadable(lazy(() => import('../views/authentication/VerifyEmail')));
const Error404 = Loadable(lazy(() => import('../views/authentication/Error')));

/* ****Protected Pages (Full Layout)**** */
const Dashboard = Loadable(lazy(() => import('../views/dashboard/Dashboard')));
const Analytics = Loadable(lazy(() => import('../views/analytics/Analytics')));

// Cards Management
const MyCards = Loadable(lazy(() => import('../views/cards/MyCards')));
const CreateCard = Loadable(lazy(() => import('../views/cards/CreateCard')));
const EditCard = Loadable(lazy(() => import('../views/cards/EditCard')));
const CardPreview = Loadable(lazy(() => import('../views/cards/CardPreview')));
const Templates = Loadable(lazy(() => import('../views/cards/Templates')));

// QR & Tools
const QRGenerator = Loadable(lazy(() => import('../views/qr/QRGenerator')));

// Placeholder components for future development
const ComingSoon = Loadable(lazy(() => import('../views/common/ComingSoon')));

/* ****Public Card View**** */
const PublicCard = Loadable(lazy(() => import('../views/public/PublicCard')));

const Router = [
  // Public Routes (Blank Layout)
  {
    path: '/',
    element: <BlankLayout />,
    children: [
      // Homepage as default
      { path: '/', element: <Homepage /> },
      
      // Authentication routes
      { path: '/auth/login', element: <Login /> },
      { path: '/auth/register', element: <Register /> },
      { path: '/auth/forgot-password', element: <ForgotPassword /> },
      { path: '/auth/reset-password', element: <ResetPassword /> },
      { path: '/auth/verify-email', element: <VerifyEmail /> },
      
      // Public card view
      { path: '/card/:username', element: <PublicCard /> },
      { path: '/c/:cardId', element: <PublicCard /> },
      
      // Error pages
      { path: '/404', element: <Error404 /> },
      { path: '/auth/404', element: <Error404 /> },
    ],
  },
  
  // Protected Routes (Full Layout)
  {
    path: '/dashboard',
    element: <FullLayout />,
    children: [
      // Dashboard as default for protected area
      { path: '/dashboard', element: <Navigate to="/dashboard/home" /> },
      { path: '/dashboard/home', element: <Dashboard /> },
      
      // Analytics
      { path: '/dashboard/analytics', element: <Analytics /> },
      
      // Cards Management
      { path: '/dashboard/cards', element: <MyCards /> },
      { path: '/dashboard/cards/create', element: <CreateCard /> },
      { path: '/dashboard/cards/edit/:id', element: <EditCard /> },
      { path: '/dashboard/cards/preview/:id', element: <CardPreview /> },
      { path: '/dashboard/cards/templates', element: <Templates /> },
      
      // QR Code Management
      { path: '/dashboard/qr', element: <QRGenerator /> },
      
      // Sharing & Public View (placeholder)
      { path: '/dashboard/share', element: <ComingSoon /> },
      { path: '/dashboard/public-view', element: <ComingSoon /> },
      
      // Contacts & Networking (placeholder)
      { path: '/dashboard/contacts', element: <ComingSoon /> },
      { path: '/dashboard/leads', element: <ComingSoon /> },
      
      // Tools & Features (placeholder)
      { path: '/dashboard/nfc', element: <ComingSoon /> },
      { path: '/dashboard/landing-pages', element: <ComingSoon /> },
      { path: '/dashboard/downloads', element: <ComingSoon /> },
      
      // Account & Settings (placeholder)
      { path: '/dashboard/profile', element: <ComingSoon /> },
      { path: '/dashboard/subscription', element: <ComingSoon /> },
      { path: '/dashboard/notifications', element: <ComingSoon /> },
      { path: '/dashboard/settings', element: <ComingSoon /> },
      { path: '/dashboard/privacy', element: <ComingSoon /> },
      
      // Support & Help (placeholder)
      { path: '/dashboard/help', element: <ComingSoon /> },
      { path: '/dashboard/contact', element: <ComingSoon /> },
      { path: '/dashboard/feedback', element: <ComingSoon /> },
      
      // Catch all for protected routes
      { path: '/dashboard/*', element: <Navigate to="/dashboard/home" /> },
    ],
  },
  
  // Catch all unmatched routes
  {
    path: '*',
    element: <Navigate to="/404" />,
  },
];

const router = createBrowserRouter(Router);
export default router;

===== src/store/customizer/CustomizerSlice.tsx =====
// src/store/customizer/CustomizerSlice.ts
import { createSlice } from '@reduxjs/toolkit';

interface StateType {
  activeDir: string; // إزالة علامة الاستفهام
  activeMode: string;
  activeTheme: string;
  SidebarWidth: number;
  MiniSidebarWidth: number;
  TopbarHeight: number;
  isCollapse: boolean;
  isLayout: string;
  isSidebarHover: boolean;
  isMobileSidebar: boolean;
  isHorizontal: boolean;
  isLanguage: string;
  isCardShadow: boolean;
  borderRadius: number;
}

// دوال مساعدة لضمان وجود قيم افتراضية
const getInitialLanguage = (): string => {
  const savedLanguage = localStorage.getItem('language');
  return savedLanguage || 'ar';
};

const getInitialDirection = (): string => {
  const savedDirection = localStorage.getItem('direction');
  const savedLanguage = localStorage.getItem('language');
  if (savedDirection) return savedDirection;
  return savedLanguage === 'ar' ? 'rtl' : 'ltr';
};

const getInitialMode = (): string => {
  return localStorage.getItem('activeMode') || 'light';
};

const getInitialTheme = (): string => {
  return localStorage.getItem('activeTheme') || 'BLUE_THEME';
};

const getInitialLayout = (): string => {
  return localStorage.getItem('isLayout') || 'boxed';
};

const initialState: StateType = {
  activeDir: getInitialDirection(),
  activeMode: getInitialMode(),
  activeTheme: getInitialTheme(),
  SidebarWidth: 270,
  MiniSidebarWidth: 87,
  TopbarHeight: 70,
  isLayout: getInitialLayout(),
  isCollapse: JSON.parse(localStorage.getItem('isCollapse') || 'false'),
  isSidebarHover: false,
  isMobileSidebar: false,
  isHorizontal: JSON.parse(localStorage.getItem('isHorizontal') || 'false'),
  isLanguage: getInitialLanguage(),
  isCardShadow: JSON.parse(localStorage.getItem('isCardShadow') || 'true'),
  borderRadius: parseInt(localStorage.getItem('borderRadius') || '7'),
};

export const CustomizerSlice = createSlice({
  name: 'customizer',
  initialState,
  reducers: {
    setTheme: (state: StateType, action) => {
      state.activeTheme = action.payload;
      localStorage.setItem('activeTheme', action.payload);
    },
    setDarkMode: (state: StateType, action) => {
      state.activeMode = action.payload;
      localStorage.setItem('activeMode', action.payload);
    },
    setDir: (state: StateType, action) => {
      state.activeDir = action.payload;
      localStorage.setItem('direction', action.payload);
    },
    setLanguage: (state: StateType, action) => {
      state.isLanguage = action.payload;
      const newDirection = action.payload === 'ar' ? 'rtl' : 'ltr';
      state.activeDir = newDirection;
      
      localStorage.setItem('language', action.payload);
      localStorage.setItem('direction', newDirection);
      
      document.documentElement.dir = newDirection;
      document.documentElement.lang = action.payload;
    },
    setCardShadow: (state: StateType, action) => {
      state.isCardShadow = action.payload;
      localStorage.setItem('isCardShadow', JSON.stringify(action.payload));
    },
    toggleSidebar: (state) => {
      state.isCollapse = !state.isCollapse;
      localStorage.setItem('isCollapse', JSON.stringify(state.isCollapse));
    },
    hoverSidebar: (state: StateType, action) => {
      state.isSidebarHover = action.payload;
    },
    toggleMobileSidebar: (state) => {
      state.isMobileSidebar = !state.isMobileSidebar;
    },
    toggleLayout: (state: StateType, action) => {
      state.isLayout = action.payload;
      localStorage.setItem('isLayout', action.payload);
    },
    toggleHorizontal: (state: StateType, action) => {
      state.isHorizontal = action.payload;
      localStorage.setItem('isHorizontal', JSON.stringify(action.payload));
    },
    setBorderRadius: (state: StateType, action) => {
      state.borderRadius = action.payload;
      localStorage.setItem('borderRadius', action.payload.toString());
    },
    initializeFromStorage: (state: StateType) => {
      const savedLanguage = localStorage.getItem('language') || 'ar';
      const savedDirection = localStorage.getItem('direction') || (savedLanguage === 'ar' ? 'rtl' : 'ltr');
      
      state.isLanguage = savedLanguage;
      state.activeDir = savedDirection;
      
      document.documentElement.dir = savedDirection;
      document.documentElement.lang = savedLanguage;
    },
  },
});

export const {
  setTheme,
  setDarkMode,
  setDir,
  toggleSidebar,
  hoverSidebar,
  toggleMobileSidebar,
  toggleLayout,
  setBorderRadius,
  toggleHorizontal,
  setLanguage,
  setCardShadow,
  initializeFromStorage,
} = CustomizerSlice.actions;

export default CustomizerSlice.reducer;

===== src/store/Store.tsx =====
import { configureStore } from '@reduxjs/toolkit';
import CustomizerReducer from './customizer/CustomizerSlice';
import { combineReducers } from 'redux';
import {
  useDispatch as useAppDispatch,
  useSelector as useAppSelector,
  TypedUseSelectorHook,
} from 'react-redux';

export const store = configureStore({
  reducer: {
    customizer: CustomizerReducer,
  },
});

const rootReducer = combineReducers({
  customizer: CustomizerReducer,
});

export type AppState = ReturnType<typeof rootReducer>;
export type AppDispatch = typeof store.dispatch;
export const { dispatch } = store;
export const useDispatch = () => useAppDispatch<AppDispatch>();
export const useSelector: TypedUseSelectorHook<AppState> = useAppSelector;

export default store;

===== src/theme/Components.tsx =====
// project imports
import './DefaultColors';
import { Theme } from '@mui/material/styles';

const components: any = (theme: Theme) => {
  return {
    MuiCssBaseline: {
      styleOverrides: {
        '*': {
          boxSizing: 'border-box',
        },
        html: {
          height: '100%',
          width: '100%',
        },
        a: {
          textDecoration: 'none',
        },
        body: {
          height: '100%',
          margin: 0,
          padding: 0,
        },
        '#root': {
          height: '100%',
        },
        "*[dir='rtl'] .buyNowImg": {
          transform: 'scaleX(-1)',
        },
        '.border-none': {
          border: '0px',
          td: {
            border: '0px',
          },
        },
        '.btn-xs': {
          minWidth: '30px !important',
          width: '30px',
          height: '30px',
          borderRadius: '6px !important',
          padding: '0px !important',
        },
        '.hover-text-primary:hover .text-hover': {
          color: theme.palette.primary.main,
        },
        '.hoverCard:hover': {
          scale: '1.01',
          transition: ' 0.1s ease-in',
        },
        '.signup-bg': {
          position: 'absolute',
          top: 0,
          right: 0,
          height: '100%',
        },
        '.MuiBox-root': {
          borderRadius: theme.shape.borderRadius,
        },
        '.MuiCardHeader-action': {
          alignSelf: 'center !important',
        },
        '.emoji-picker-react .emoji-scroll-wrapper': {
          overflowX: 'hidden',
        },
        '.scrollbar-container': {
          borderRight: '0 !important',
        },
        '.theme-timeline .MuiTimelineOppositeContent-root': {
          minWidth: '90px',
        },
        '.MuiAlert-root .MuiAlert-icon': {
          color: 'inherit!important',
        },
        '.MuiTimelineConnector-root': {
          width: '1px !important',
        },
        ' .simplebar-scrollbar:before': {
          background: `${theme.palette.grey[300]} !important`,
        },
        '@keyframes gradient': {
          '0%': {
            backgroundPosition: '0% 50%',
          },
          '50%': {
            backgroundPosition: ' 100% 50%',
          },
          '100% ': {
            backgroundPosition: ' 0% 50%',
          },
        },
        '@keyframes slide': {
          '0%': {
            transform: 'translate3d(0, 0, 0)',
          },
          '100% ': {
            transform: 'translate3d(-2086px, 0, 0)',
          },
        },
        '.rounded-bars .apexcharts-bar-series.apexcharts-plot-series .apexcharts-series path': {
          clipPath: 'inset(0 0 5% 0 round 20px)',
        },
      },
    },
    MuiButtonGroup: {
      styleOverrides: {
        root: {
          boxShadow: 'none',
        },
      },
    },
    MuiAccordion: {
      styleOverrides: {
        root: {
          ':before': {
            backgroundColor: theme.palette.grey[100],
          },
        },
      },
    },
    MuiPaper: {
      styleOverrides: {
        root: {
          // border: `1px solid ${theme.palette.divider}`,
          backgroundImage: 'none',
        },
      },
    },
    MuiStepConnector: {
      styleOverrides: {
        line: {
          borderColor: theme.palette.divider,
        },
      },
    },
    MuiFab: {
      styleOverrides: {
        root: {
          boxShadow: 'none',
        },
        sizeSmall: {
          width: 30,
          height: 30,
          minHeight: 30,
        },
      },
    },
    MuiIconButton: {
      styleOverrides: {
        root: {
          '&:hover': {
            backgroundColor: theme.palette.primary.light,
            color: theme.palette.primary.main,
          },
        },
        colorPrimary: {
          '&:hover': {
            backgroundColor: theme.palette.primary.main,
            color: 'white',
          },
        },
        colorSecondary: {
          '&:hover': {
            backgroundColor: theme.palette.secondary.main,
            color: 'white',
          },
        },
        colorSuccess: {
          '&:hover': {
            backgroundColor: theme.palette.success.main,
            color: 'white',
          },
        },
        colorError: {
          '&:hover': {
            backgroundColor: theme.palette.error.main,
            color: 'white',
          },
        },
        colorWarning: {
          '&:hover': {
            backgroundColor: theme.palette.warning.main,
            color: 'white',
          },
        },
        colorInfo: {
          '&:hover': {
            backgroundColor: theme.palette.info.main,
            color: 'white',
          },
        },
      },
    },
    MuiButton: {
      styleOverrides: {
        root: {
          textTransform: 'none',
          boxShadow: 'none',
        },
        text: {
          padding: '5px 15px',
          '&:hover': {
            backgroundColor: theme.palette.primary.light,
            color: theme.palette.primary.main,
          },
        },
        textPrimary: {
          backgroundColor: theme.palette.primary.light,
          '&:hover': {
            backgroundColor: theme.palette.primary.main,
            color: 'white',
          },
        },
        textSecondary: {
          backgroundColor: theme.palette.secondary.light,
          '&:hover': {
            backgroundColor: theme.palette.secondary.main,
            color: 'white',
          },
        },
        textSuccess: {
          backgroundColor: theme.palette.success.light,
          '&:hover': {
            backgroundColor: theme.palette.success.main,
            color: 'white',
          },
        },
        textError: {
          backgroundColor: theme.palette.error.light,
          '&:hover': {
            backgroundColor: theme.palette.error.main,
            color: 'white',
          },
        },
        textInfo: {
          backgroundColor: theme.palette.info.light,
          '&:hover': {
            backgroundColor: theme.palette.info.main,
            color: 'white',
          },
        },
        textWarning: {
          backgroundColor: theme.palette.warning.light,
          '&:hover': {
            backgroundColor: theme.palette.warning.main,
            color: 'white',
          },
        },
        outlinedPrimary: {
          '&:hover': {
            backgroundColor: theme.palette.primary.main,
            color: 'white',
          },
        },
        outlinedSecondary: {
          '&:hover': {
            backgroundColor: theme.palette.secondary.main,
            color: 'white',
          },
        },
        outlinedError: {
          '&:hover': {
            backgroundColor: theme.palette.error.main,
            color: 'white',
          },
        },
        outlinedSuccess: {
          '&:hover': {
            backgroundColor: theme.palette.success.main,
            color: 'white',
          },
        },
        outlinedInfo: {
          '&:hover': {
            backgroundColor: theme.palette.info.main,
            color: 'white',
          },
        },
        outlinedWarning: {
          '&:hover': {
            backgroundColor: theme.palette.warning.main,
            color: 'white',
          },
        },
      },
    },
    MuiCardHeader: {
      styleOverrides: {
        root: {
          padding: '16px 24px',
        },
        title: {
          fontSize: '1.125rem',
        },
      },
    },
    MuiCard: {
      styleOverrides: {
        root: {
          width: '100%',
          padding: '15px',
          backgroundImage: 'none',
        },
      },
    },
    MuiCardContent: {
      styleOverrides: {
        root: {
          padding: '24px',
        },
      },
    },
    MuiTableCell: {
      styleOverrides: {
        root: {
          borderBottom: `1px solid ${theme.palette.divider}`,
        },
      },
    },
    MuiTableRow: {
      styleOverrides: {
        root: {
          '&:last-child td': {
            borderBottom: 0,
          },
        },
      },
    },
    MuiGridItem: {
      styleOverrides: {
        root: {
          paddingTop: '30px',
          paddingLeft: '30px !important',
        },
      },
    },
    MuiLinearProgress: {
      styleOverrides: {
        root: {
          backgroundColor: theme.palette.grey[200],
          borderRadius: '6px',
        },
      },
    },
    MuiTimelineConnector: {
      styleOverrides: {
        root: {
          backgroundColor: theme.palette.divider,
        },
      },
    },
    MuiDivider: {
      styleOverrides: {
        root: {
          borderColor: theme.palette.divider,
        },
      },
    },

    MuiChip: {
      styleOverrides: {
        root: {
          fontWeight: 600,
          fontSize: '0.75rem',
        },
      },
    },
    MuiAlert: {
      styleOverrides: {
        filledSuccess: {
          color: 'white',
        },
        filledInfo: {
          color: 'white',
        },
        filledError: {
          color: 'white',
        },
        filledWarning: {
          color: 'white',
        },
        standardSuccess: {
          backgroundColor: theme.palette.success.light,
          color: theme.palette.success.main,
        },
        standardError: {
          backgroundColor: theme.palette.error.light,
          color: theme.palette.error.main,
        },
        standardWarning: {
          backgroundColor: theme.palette.warning.light,
          color: theme.palette.warning.main,
        },
        standardInfo: {
          backgroundColor: theme.palette.info.light,
          color: theme.palette.info.main,
        },
        outlinedSuccess: {
          borderColor: theme.palette.success.main,
          color: theme.palette.success.main,
        },
        outlinedWarning: {
          borderColor: theme.palette.warning.main,
          color: theme.palette.warning.main,
        },
        outlinedError: {
          borderColor: theme.palette.error.main,
          color: theme.palette.error.main,
        },
        outlinedInfo: {
          borderColor: theme.palette.info.main,
          color: theme.palette.info.main,
        },
        successIcon: {
          color: theme.palette.info.main,
        },
      },
    },
    MuiOutlinedInput: {
      styleOverrides: {
        root: {
          '& .MuiOutlinedInput-notchedOutline': {
            borderColor:
              theme.palette.mode === 'dark' ? theme.palette.grey[200] : theme.palette.grey[300],
          },
          '&:hover .MuiOutlinedInput-notchedOutline': {
            borderColor: theme.palette.grey[300],
          },
        },
        input: {
          padding: '12px 14px',
        },
        inputSizeSmall: {
          padding: '8px 14px',
        },
      },
    },
    MuiTooltip: {
      styleOverrides: {
        tooltip: {
          color: theme.palette.background.paper,
          background: theme.palette.text.primary,
        },
      },
    },
    MuiDrawer: {
      styleOverrides: {
        paper: {
          borderColor: `${theme.palette.divider}`,
        },
      },
    },
    MuiDialogTitle: {
      styleOverrides: {
        root: {
          fontSize: '1.25rem',
        },
      },
    },
    MuiPopover: {
      styleOverrides: {
        paper: {
          boxShadow:
            'rgb(145 158 171 / 30%) 0px 0px 2px 0px, rgb(145 158 171 / 12%) 0px 12px 24px -4px',
        },
      },
    },
  };
};
export default components;

===== src/theme/DarkThemeColors.tsx =====
const DarkThemeColors = [
  {
    name: 'BLUE_THEME',
    palette: {
      primary: {
        main: '#5D87FF',
        light: '#253662',
        dark: '#4570EA',
        contrastText: '#ffffff',
      },
      secondary: {
        main: '#49BEFF',
        light: '#1C455D',
        dark: '#23afdb',
        contrastText: '#ffffff',
      },
      background: {
        default: '#2A3447',
        dark: '#2A3547',
        paper: '#2A3447',
      },
    },
  },
  {
    name: 'AQUA_THEME',
    palette: {
      primary: {
        main: '#0074BA',
        light: '#103247',
        dark: '#006DAF',
        contrastText: '#ffffff',
      },
      secondary: {
        main: '#47D7BC',
        light: '#0C4339',
        dark: '#39C7AD',
        contrastText: '#ffffff',
      },
    },
  },
  {
    name: 'PURPLE_THEME',
    palette: {
      primary: {
        main: '#763EBD',
        light: '#26153C',
        dark: '#6E35B7',
        contrastText: '#ffffff',
      },
      secondary: {
        main: '#95CFD5',
        light: '#09454B',
        dark: '#8BC8CE',
        contrastText: '#ffffff',
      },
    },
  },
  {
    name: 'GREEN_THEME',
    palette: {
      primary: {
        main: '#0A7EA4',
        light: '#05313F',
        dark: '#06769A',
        contrastText: '#ffffff',
      },
      secondary: {
        main: '#CCDA4E',
        light: '#282917',
        dark: '#C3D046',
        contrastText: '#ffffff',
      },
    },
  },
  {
    name: 'CYAN_THEME',
    palette: {
      primary: {
        main: '#01C0C8',
        light: '#003638',
        dark: '#00B9C0',
        contrastText: '#ffffff',
      },
      secondary: {
        main: '#FB9678',
        light: '#40241C',
        dark: '#F48B6C',
        contrastText: '#ffffff',
      },
    },
  },
  {
    name: 'ORANGE_THEME',
    palette: {
      primary: {
        main: '#FA896B',
        light: '#402E32',
        dark: '#F48162',
        contrastText: '#ffffff',
      },
      secondary: {
        main: '#0074BA',
        light: '#082E45',
        dark: '#006FB1',
        contrastText: '#ffffff',
      },
    },
  },
];

export { DarkThemeColors };

===== src/theme/DefaultColors.tsx =====
import { grey } from '@mui/material/colors';

const baselightTheme = {
  direction: 'ltr',
  palette: {
    primary: {
      main: '#5D87FF',
      light: '#ECF2FF',
      dark: '#4570EA',
    },
    secondary: {
      main: '#49BEFF',
      light: '#E8F7FF',
      dark: '#23afdb',
    },
    success: {
      main: '#13DEB9',
      light: '#E6FFFA',
      dark: '#02b3a9',
      contrastText: '#ffffff',
    },
    info: {
      main: '#539BFF',
      light: '#EBF3FE',
      dark: '#1682d4',
      contrastText: '#ffffff',
    },
    error: {
      main: '#FA896B',
      light: '#FDEDE8',
      dark: '#f3704d',
      contrastText: '#ffffff',
    },
    warning: {
      main: '#FFAE1F',
      light: '#FEF5E5',
      dark: '#ae8e59',
      contrastText: '#ffffff',
    },
    purple: {
      A50: '#EBF3FE',
      A100: '#6610f2',
      A200: '#557fb9',
    },
    grey: {
      100: '#F2F6FA',
      200: '#EAEFF4',
      300: '#DFE5EF',
      400: '#7C8FAC',
      500: '#5A6A85',
      600: '#2A3547',
    },
    text: {
      primary: '#2A3547',
      secondary: '#5A6A85',
    },
    action: {
      disabledBackground: 'rgba(73,82,88,0.12)',
      hoverOpacity: 0.02,
      hover: '#f6f9fc',
    },
    divider: '#ebf1f6',
  },
};

const baseDarkTheme = {
  direction: 'ltr',
  palette: {
    primary: {
      main: '#5D87FF',
      light: '#ECF2FF',
      dark: '#4570EA',
    },
    secondary: {
      main: '#777e89',
      light: '#1C455D',
      dark: '#173f98',
    },
    success: {
      main: '#13DEB9',
      light: '#1B3C48',
      dark: '#02b3a9',
      contrastText: '#ffffff',
    },
    info: {
      main: '#539BFF',
      light: '#223662',
      dark: '#1682d4',
      contrastText: '#ffffff',
    },
    error: {
      main: '#FA896B',
      light: '#4B313D',
      dark: '#f3704d',
      contrastText: '#ffffff',
    },
    warning: {
      main: '#FFAE1F',
      light: '#4D3A2A',
      dark: '#ae8e59',
      contrastText: '#ffffff',
    },
    purple: {
      A50: '#EBF3FE',
      A100: '#6610f2',
      A200: '#557fb9',
    },
    grey: {
      100: '#333F55',
      200: '#465670',
      300: '#7C8FAC',
      400: '#DFE5EF',
      500: '#EAEFF4',
      600: '#F2F6FA',
    },
    text: {
      primary: '#EAEFF4',
      secondary: '#7C8FAC',
    },
    action: {
      disabledBackground: 'rgba(73,82,88,0.12)',
      hoverOpacity: 0.02,
      hover: '#333F55',
    },
    divider: grey[100],
    background: {
      default: '#171c23',
      dark: '#171c23',
      paper: '#171c23',
    },
  },
};

export { baseDarkTheme, baselightTheme };

===== src/theme/LightThemeColors.tsx =====
const LightThemeColors = [
  {
    name: 'BLUE_THEME',
    palette: {
      primary: {
        main: '#5D87FF',
        light: '#ECF2FF',
        dark: '#4570EA',
        contrastText: '#ffffff',
      },
      secondary: {
        main: '#49BEFF',
        light: '#E8F7FF',
        dark: '#23afdb',
        contrastText: '#ffffff',
      },
    },
  },
  {
    name: 'AQUA_THEME',
    palette: {
      primary: {
        main: '#0074BA',
        light: '#EFF9FF',
        dark: '#006DAF',
        contrastText: '#ffffff',
      },
      secondary: {
        main: '#47D7BC',
        light: '#EDFBF7',
        dark: '#39C7AD',
        contrastText: '#ffffff',
      },
    },
  },
  {
    name: 'PURPLE_THEME',
    palette: {
      primary: {
        main: '#763EBD',
        light: '#F2ECF9',
        dark: '#6E35B7',
        contrastText: '#ffffff',
      },
      secondary: {
        main: '#95CFD5',
        light: '#EDF8FA',
        dark: '#8BC8CE',
        contrastText: '#ffffff',
      },
    },
  },
  {
    name: 'GREEN_THEME',
    palette: {
      primary: {
        main: '#0A7EA4',
        light: '#F4F9FB',
        dark: '#06769A',
        contrastText: '#ffffff',
      },
      secondary: {
        main: '#CCDA4E',
        light: '#FAFBEF',
        dark: '#C3D046',
        contrastText: '#ffffff',
      },
    },
  },
  {
    name: 'CYAN_THEME',
    palette: {
      primary: {
        main: '#01C0C8',
        light: '#EBF9FA',
        dark: '#00B9C0',
        contrastText: '#ffffff',
      },
      secondary: {
        main: '#FB9678',
        light: '#FFF5F2',
        dark: '#F48B6C',
        contrastText: '#ffffff',
      },
    },
  },
  {
    name: 'ORANGE_THEME',
    palette: {
      primary: {
        main: '#FA896B',
        light: '#FBF2EF',
        dark: '#F48162',
        contrastText: '#ffffff',
      },
      secondary: {
        main: '#0074BA',
        light: '#EFF9FF',
        dark: '#006FB1',
        contrastText: '#ffffff',
      },
    },
  },
];

export { LightThemeColors };

===== src/theme/Shadows.tsx =====
const shadows = [
  'none',
  '0px 2px 3px rgba(0,0,0,0.10)',
  '0 0 1px 0 rgba(0,0,0,0.31), 0 2px 2px -2px rgba(0,0,0,0.25)',
  '0 0 1px 0 rgba(0,0,0,0.31), 0 3px 4px -2px rgba(0,0,0,0.25)',
  '0 0 1px 0 rgba(0,0,0,0.31), 0 3px 4px -2px rgba(0,0,0,0.25)',
  '0 0 1px 0 rgba(0,0,0,0.31), 0 4px 6px -2px rgba(0,0,0,0.25)',
  '0 0 1px 0 rgba(0,0,0,0.31), 0 4px 6px -2px rgba(0,0,0,0.25)',
  '0 0 1px 0 rgba(0,0,0,0.31), 0 4px 8px -2px rgba(0,0,0,0.25)',
  '0 9px 17.5px rgb(0,0,0,0.05)',
  'rgb(145 158 171 / 30%) 0px 0px 2px 0px, rgb(145 158 171 / 12%) 0px 12px 24px -4px',
  '0 0 1px 0 rgba(0,0,0,0.31), 0 7px 12px -4px rgba(0,0,0,0.25)',
  '0 0 1px 0 rgba(0,0,0,0.31), 0 6px 16px -4px rgba(0,0,0,0.25)',
  '0 0 1px 0 rgba(0,0,0,0.31), 0 7px 16px -4px rgba(0,0,0,0.25)',
  '0 0 1px 0 rgba(0,0,0,0.31), 0 8px 18px -8px rgba(0,0,0,0.25)',
  '0 0 1px 0 rgba(0,0,0,0.31), 0 9px 18px -8px rgba(0,0,0,0.25)',
  '0 0 1px 0 rgba(0,0,0,0.31), 0 10px 20px -8px rgba(0,0,0,0.25)',
  '0 0 1px 0 rgba(0,0,0,0.31), 0 11px 20px -8px rgba(0,0,0,0.25)',
  '0 0 1px 0 rgba(0,0,0,0.31), 0 12px 22px -8px rgba(0,0,0,0.25)',
  '0 0 1px 0 rgba(0,0,0,0.31), 0 13px 22px -8px rgba(0,0,0,0.25)',
  '0 0 1px 0 rgba(0,0,0,0.31), 0 14px 24px -8px rgba(0,0,0,0.25)',
  '0 0 1px 0 rgba(0,0,0,0.31), 0 16px 28px -8px rgba(0,0,0,0.25)',
  '0 0 1px 0 rgba(0,0,0,0.31), 0 18px 30px -8px rgba(0,0,0,0.25)',
  '0 0 1px 0 rgba(0,0,0,0.31), 0 20px 32px -8px rgba(0,0,0,0.25)',
  '0 0 1px 0 rgba(0,0,0,0.31), 0 22px 34px -8px rgba(0,0,0,0.25)',
  '0 0 1px 0 rgba(0,0,0,0.31), 0 24px 36px -8px rgba(0,0,0,0.25)',
];

const darkshadows = [
  'none',
  '0px 2px 3px rgba(0,0,0,0.10)',
  '0 0 1px 0 rgba(0,0,0,0.31), 0 2px 2px -2px rgba(0,0,0,0.25)',
  '0 0 1px 0 rgba(0,0,0,0.31), 0 3px 4px -2px rgba(0,0,0,0.25)',
  '0 0 1px 0 rgba(0,0,0,0.31), 0 3px 4px -2px rgba(0,0,0,0.25)',
  '0 0 1px 0 rgba(0,0,0,0.31), 0 4px 6px -2px rgba(0,0,0,0.25)',
  '0 0 1px 0 rgba(0,0,0,0.31), 0 4px 6px -2px rgba(0,0,0,0.25)',
  '0 0 1px 0 rgba(0,0,0,0.31), 0 4px 8px -2px rgba(0,0,0,0.25)',
  '0 9px 17.5px rgb(0,0,0,0.05)',
  'rgb(145 158 171 / 30%) 0px 0px 2px 0px, rgb(145 158 171 / 2%) 0px 12px 24px -4px',
  '0 0 1px 0 rgba(0,0,0,0.31), 0 7px 12px -4px rgba(0,0,0,0.25)',
  '0 0 1px 0 rgba(0,0,0,0.31), 0 6px 16px -4px rgba(0,0,0,0.25)',
  '0 0 1px 0 rgba(0,0,0,0.31), 0 7px 16px -4px rgba(0,0,0,0.25)',
  '0 0 1px 0 rgba(0,0,0,0.31), 0 8px 18px -8px rgba(0,0,0,0.25)',
  '0 0 1px 0 rgba(0,0,0,0.31), 0 9px 18px -8px rgba(0,0,0,0.25)',
  '0 0 1px 0 rgba(0,0,0,0.31), 0 10px 20px -8px rgba(0,0,0,0.25)',
  '0 0 1px 0 rgba(0,0,0,0.31), 0 11px 20px -8px rgba(0,0,0,0.25)',
  '0 0 1px 0 rgba(0,0,0,0.31), 0 12px 22px -8px rgba(0,0,0,0.25)',
  '0 0 1px 0 rgba(0,0,0,0.31), 0 13px 22px -8px rgba(0,0,0,0.25)',
  '0 0 1px 0 rgba(0,0,0,0.31), 0 14px 24px -8px rgba(0,0,0,0.25)',
  '0 0 1px 0 rgba(0,0,0,0.31), 0 16px 28px -8px rgba(0,0,0,0.25)',
  '0 0 1px 0 rgba(0,0,0,0.31), 0 18px 30px -8px rgba(0,0,0,0.25)',
  '0 0 1px 0 rgba(0,0,0,0.31), 0 20px 32px -8px rgba(0,0,0,0.25)',
  '0 0 1px 0 rgba(0,0,0,0.31), 0 22px 34px -8px rgba(0,0,0,0.25)',
  '0 0 1px 0 rgba(0,0,0,0.31), 0 24px 36px -8px rgba(0,0,0,0.25)',
];

export { shadows, darkshadows };

===== src/theme/Theme.tsx =====
// src/theme/Theme.tsx
import _ from 'lodash';
import { createTheme } from '@mui/material/styles';
import { useSelector } from 'src/store/Store';
import { useEffect } from 'react';
import { AppState } from '../store/Store';
import components from './Components';
import typography from './Typography';
import { shadows, darkshadows } from './Shadows';
import { DarkThemeColors } from './DarkThemeColors';
import { LightThemeColors } from './LightThemeColors';
import { baseDarkTheme, baselightTheme } from './DefaultColors';
import * as locales from '@mui/material/locale';

interface BuildThemeConfig {
  direction: string;
  theme: string;
}

export const BuildTheme = (config: BuildThemeConfig) => {
  const themeOptions = LightThemeColors.find((theme) => theme.name === config.theme);
  const darkthemeOptions = DarkThemeColors.find((theme) => theme.name === config.theme);
  const customizer = useSelector((state: AppState) => state.customizer);
  const defaultTheme = customizer.activeMode === 'dark' ? baseDarkTheme : baselightTheme;
  const defaultShadow = customizer.activeMode === 'dark' ? darkshadows : shadows;
  const themeSelect = customizer.activeMode === 'dark' ? darkthemeOptions : themeOptions;
  
  const baseMode = {
    palette: {
      mode: customizer.activeMode,
    },
    shape: {
      borderRadius: customizer.borderRadius,
    },
    shadows: defaultShadow,
    typography: {
      ...typography,
      fontFamily: config.direction === 'rtl' 
        ? '"Cairo", "Roboto", "Helvetica", "Arial", sans-serif'
        : '"Roboto", "Helvetica", "Arial", sans-serif',
    },
  };
  
  const theme = createTheme(
    _.merge({}, baseMode, defaultTheme, locales, themeSelect, {
      direction: config.direction,
    }),
  );
  theme.components = components(theme);

  return theme;
};

const ThemeSettings = () => {
  const customizer = useSelector((state: AppState) => state.customizer);
  
  // ضمان وجود قيم افتراضية
  const activDir = customizer.activeDir || 'ltr';
  const activeTheme = customizer.activeTheme || 'BLUE_THEME';
  const isLanguage = customizer.isLanguage || 'ar';
  
  const theme = BuildTheme({
    direction: activDir,
    theme: activeTheme,
  });
  
  useEffect(() => {
    document.dir = activDir;
    document.documentElement.dir = activDir;
    document.documentElement.lang = isLanguage;
  }, [activDir, isLanguage]);

  return theme;
};

export { ThemeSettings };

===== src/theme/ThemeColors.tsx =====
const ThemeColors = [
  {
    name: 'BLUE_THEME',
    palette: {
      primary: {
        main: '#0074BA',
        light: '#EFF9FF',
        dark: '#006DAF',
      },
      secondary: {
        main: '#47D7BC',
        light: '#EDFBF7',
        dark: '#39C7AD',
      },
    },
  },
  {
    name: 'GREEN_THEME',
    palette: {
      primary: {
        main: '#0A7EA4',
        light: '#F4F9FB',
        dark: '#06769A',
      },
      secondary: {
        main: '#CCDA4E',
        light: '#FAFBEF',
        dark: '#C3D046',
      },
      background: {
        default: '#f8fffc',
        dark: '#ffffff',
        paper: '#ffffff',
      },
    },
  },
  {
    name: 'PURPLE_THEME',
    palette: {
      primary: {
        main: '#763EBD',
        light: '#F2ECF9',
        dark: '#6E35B7',
      },
      secondary: {
        main: '#95CFD5',
        light: '#EDF8FA',
        dark: '#8BC8CE',
      },
    },
  },
  {
    name: 'ORANGE_THEME',
    palette: {
      primary: {
        main: '#FA896B',
        light: '#FBF2EF',
        dark: '#F48162',
      },
      secondary: {
        main: '#0074BA',
        light: '#EFF9FF',
        dark: '#006FB1',
      },
    },
  },
  {
    name: 'CYAN_THEME',
    palette: {
      primary: {
        main: '#01C0C8',
        light: '#EBF9FA',
        dark: '#00B9C0',
      },
      secondary: {
        main: '#FB9678',
        light: '#FFF5F2',
        dark: '#F48B6C',
      },
    },
  },
];

export default ThemeColors;

===== src/theme/ThemeProvider.tsx =====
// src/theme/ThemeProvider.tsx
import React, { createContext, useContext, useEffect } from 'react';
import { ThemeProvider as MuiThemeProvider, createTheme } from '@mui/material/styles';
import { CssBaseline, useMediaQuery } from '@mui/material';
import { useTranslation } from 'react-i18next';
import { useSelector } from 'src/store/Store';
import { AppState } from 'src/store/Store';
import { baselightTheme } from './DefaultColors';
import { DarkThemeColors } from './DarkThemeColors';
import rtlPlugin from 'stylis-plugin-rtl';
import { CacheProvider } from '@emotion/react';
import createCache, { StylisElement, StylisPluginCallback } from '@emotion/cache';

interface ThemeContextType {
  direction: 'ltr' | 'rtl';
}

const ThemeContext = createContext<ThemeContextType>({ direction: 'ltr' });

export const useThemeContext = () => useContext(ThemeContext);

const ThemeProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const { i18n } = useTranslation();
  const customizer = useSelector((state: AppState) => state.customizer);
  const prefersDarkMode = useMediaQuery('(prefers-color-scheme: dark)');
  
  const direction = i18n.language === 'ar' ? 'rtl' : 'ltr';
  
  // إنشاء emotion cache للـ RTL
  const cacheRtl = createCache({
    key: 'muirtl',
    stylisPlugins: [prefixer, rtlPlugin],
  });

  const cacheLtr = createCache({
    key: 'muiltr',
    stylisPlugins: [prefixer],
  });

  // إنشاء الثيم مع دعم RTL
  const theme = createTheme({
    ...((customizer.activeMode === 'dark' || (customizer.activeMode === 'auto' && prefersDarkMode)) 
      ? DarkThemeColors 
      : baselightTheme),
    direction,
    typography: {
      fontFamily: direction === 'rtl' 
        ? '"Cairo", "Roboto", "Helvetica", "Arial", sans-serif'
        : '"Roboto", "Helvetica", "Arial", sans-serif',
    },
  });

  useEffect(() => {
    // تحديث اتجاه الصفحة
    document.documentElement.dir = direction;
    document.documentElement.lang = i18n.language;
  }, [direction, i18n.language]);

  return (
    <ThemeContext.Provider value={{ direction }}>
      <CacheProvider value={direction === 'rtl' ? cacheRtl : cacheLtr}>
        <MuiThemeProvider theme={theme}>
          <CssBaseline />
          {children}
        </MuiThemeProvider>
      </CacheProvider>
    </ThemeContext.Provider>
  );
};

export default ThemeProvider;
function prefixer(_element: StylisElement, _index: number, _children: StylisElement[], _callback: StylisPluginCallback): string | void {
    throw new Error('Function not implemented.');
}


===== src/theme/Typography.tsx =====
const typography: any = {
  fontFamily: "'Plus Jakarta Sans', sans-serif;",
  h1: {
    fontWeight: 600,
    fontSize: '2.25rem',
    lineHeight: '2.75rem',
  },
  h2: {
    fontWeight: 600,
    fontSize: '1.875rem',
    lineHeight: '2.25rem',
  },
  h3: {
    fontWeight: 600,
    fontSize: '1.5rem',
    lineHeight: '1.75rem',
  },
  h4: {
    fontWeight: 600,
    fontSize: '1.3125rem',
    lineHeight: '1.6rem',
  },
  h5: {
    fontWeight: 600,
    fontSize: '1.125rem',
    lineHeight: '1.6rem',
  },
  h6: {
    fontWeight: 600,
    fontSize: '1rem',
    lineHeight: '1.2rem',
  },
  button: {
    textTransform: 'capitalize',
    fontWeight: 400,
  },
  body1: {
    fontSize: '0.875rem',
    fontWeight: 400,
    lineHeight: '1.334rem',
  },
  body2: {
    fontSize: '0.75rem',
    letterSpacing: '0rem',
    fontWeight: 400,
    lineHeight: '1rem',
  },
  subtitle1: {
    fontSize: '0.875rem',
    fontWeight: 400,
  },
  subtitle2: {
    fontSize: '0.875rem',
    fontWeight: 400,
  },
};

export default typography;

===== src/utils/axios.js =====
 import axios from 'axios';

 const axiosServices = axios.create();
 
 // interceptor for http
 axiosServices.interceptors.response.use(
     (response) => response,
     (error) => Promise.reject((error.response && error.response.data) || 'Wrong Services')
 );
 
 export default axiosServices;
 
===== src/utils/i18n.ts =====
// src/i18n/index.ts - تحديث إعدادات i18n
import i18n from 'i18next';
import { initReactI18next } from 'react-i18next';
import Backend from 'i18next-http-backend';
import LanguageDetector from 'i18next-browser-languagedetector';

import arTranslation from './languages/ar.json';
import enTranslation from './languages/en.json';

const resources = {
  ar: {
    translation: arTranslation
  },
  en: {
    translation: enTranslation
  }
};

i18n
  .use(Backend)
  .use(LanguageDetector)
  .use(initReactI18next)
  .init({
    resources,
    fallbackLng: 'ar',
    debug: false,
    interpolation: {
      escapeValue: false
    },
    detection: {
      order: ['localStorage', 'navigator', 'htmlTag'],
      caches: ['localStorage'],
      lookupLocalStorage: 'language'
    }
  });

export default i18n;

===== src/utils/languages/ar.json =====
{
  "header": {
    "home": "الرئيسية",
    "features": "الميزات", 
    "howItWorks": "كيف يعمل",
    "pricing": "التسعير",
    "support": "الدعم",
    "login": "تسجيل الدخول",
    "signup": "ابدأ الآن"
  },
  "homepage": {
    "title": "أنشئ بطاقة عمل رقمية احترافية باستخدام NFC وQR – بدون تطبيق",
    "description": "أنشئ بطاقة رقمية ذكية في أقل من دقيقة وشاركها عبر NFC أو QR أو رابط مباشر. بدون تطبيقات، مع تحكم كامل بالخصوصية وتحليلات فورية.",
    "hero": {
      "title": "بطاقتك الرقمية، هويتك الذكية ",
      "titleHighlight": "💼",
      "subtitle": "أنشئ بطاقة احترافية وشاركها عبر QR، NFC أو رابط مخصص – دون الحاجة لتطبيق!",
      "primaryButton": "جرّب الآن مجانًا",
      "secondaryButton": "شاهد كيف تعمل",
      "imageAlt": "عرض بصري تفاعلي لمنصة البطاقة الرقمية"
    },
    "features": {
      "title": "ميزات المنصة الذكية",
      "subtitle": "اكتشف الإمكانيات اللامحدودة لبطاقتك الرقمية",
      "digitalCards": {
        "title": "بطاقات رقمية ذكية",
        "description": "أنشئ بطاقات احترافية بتصاميم متنوعة وقابلة للتخصيص بالكامل مع دعم NFC وQR"
      },
      "qrCustom": {
        "title": "QR مخصص بالكامل",
        "description": "رمز QR فريد لكل بطاقة مع إمكانية تخصيص الألوان والشعار والتصميم"
      },
      "landingPages": {
        "title": "صفحات هبوط قابلة للتخصيص",
        "description": "أنشئ صفحات هبوط مخصصة لعرض خدماتك ومعلوماتك بطريقة احترافية"
      },
      "privacy": {
        "title": "تحكم كامل بالخصوصية",
        "description": "تحكم كامل في من يمكنه رؤية بطاقتك ومعلوماتك الشخصية مع إعدادات أمان متقدمة"
      },
      "notifications": {
        "title": "إشعارات لحظية ذكية",
        "description": "احصل على إشعارات فورية عند تفاعل الآخرين مع بطاقتك مع تحليلات مفصلة"
      },
      "analytics": {
        "title": "تحليلات متقدمة ومفصلة",
        "description": "تتبع أداء بطاقتك ومعرفة إحصائيات التفاعل والمشاهدات والموقع الجغرافي"
      }
    },
    "howItWorks": {
      "title": "كيف يعمل النظام؟",
      "subtitle": "ثلاث خطوات بسيطة للحصول على بطاقتك الرقمية الاحترافية",
      "step1": {
        "title": "أنشئ بطاقتك الذكية",
        "description": "أضف معلوماتك، صورتك، وروابط التواصل الاجتماعي في دقائق معدودة"
      },
      "step2": {
        "title": "شاركها عبر QR أو NFC",
        "description": "احصل على رمز QR مخصص أو استخدم تقنية NFC للمشاركة الفورية والذكية"
      },
      "step3": {
        "title": "تابع النشاط والتفاعل",
        "description": "راقب من زار بطاقتك وتفاعل معها عبر لوحة التحكم المتقدمة والتحليلات الفورية"
      }
    },
    "testimonials": {
      "title": "ماذا يقول عملاؤنا الكرام",
      "subtitle": "آراء حقيقية من مستخدمين راضين عن خدماتنا وتجربتهم المميزة",
      "testimonial1": {
        "name": "أحمد محمد السالم",
        "title": "مدير مبيعات - شركة التقنية المتقدمة",
        "review": "منصة رائعة وسهلة الاستخدام. وفرت علي الكثير من الوقت والجهد في مشاركة معلوماتي المهنية مع العملاء والشركاء."
      },
      "testimonial2": {
        "name": "فاطمة أحمد الزهراني",
        "title": "مصممة جرافيك ومؤسسة استوديو الإبداع",
        "review": "التصاميم جميلة والتخصيص سهل جداً. أصبحت أشارك أعمالي ومعرض أعمالي بطريقة أكثر احترافية وتميزاً."
      },
      "testimonial3": {
        "name": "محمد علي الأحمدي",
        "title": "رائد أعمال ومؤسس شركة الابتكار",
        "review": "الإحصائيات والتحليلات مفيدة جداً لمتابعة أداء شبكتي المهنية وقياس تأثير بطاقتي الرقمية. أنصح بها بشدة."
      }
    },
    "pricing": {
      "title": "خطط الأسعار المرنة",
      "subtitle": "اختر الخطة التي تناسب احتياجاتك وميزانيتك",
      "popular": "الأكثر شعبية",
      "free": {
        "name": "مجاني",
        "price": "0 ريال",
        "description": "للأفراد والاستخدام الشخصي البسيط",
        "button": "ابدأ مجاناً الآن",
        "features": {
          "0": "بطاقة رقمية واحدة",
          "1": "رمز QR أساسي",
          "2": "روابط التواصل الاجتماعي",
          "3": "إحصائيات بسيطة",
          "4": "دعم عبر البريد الإلكتروني"
        }
      },
      "pro": {
        "name": "احترافي",
        "price": "29 ريال/شهر",
        "description": "للمحترفين ورجال الأعمال والمستقلين",
        "button": "اشترك الآن",
        "features": {
          "0": "بطاقات رقمية غير محدودة",
          "1": "QR مخصص بالألوان والشعار",
          "2": "صفحات هبوط مخصصة",
          "3": "تحليلات متقدمة ومفصلة",
          "4": "دعم أولوية 24/7"
        }
      },
      "business": {
        "name": "الأعمال",
        "price": "99 ريال/شهر",
        "description": "للشركات والفرق والمؤسسات",
        "button": "تواصل معنا",
        "features": {
          "0": "حسابات متعددة للفريق",
          "1": "علامة تجارية مخصصة",
          "2": "تكامل مع CRM",
          "3": "تقارير مفصلة وتحليلات عميقة",
          "4": "مدير حساب مخصص"
        }
      }
    },
    "cta": {
      "title": "جاهز للبدء في رحلتك الرقمية؟",
      "subtitle": "انضم إلى آلاف المحترفين الذين يستخدمون بطاقاتنا الرقمية لتوسيع شبكتهم المهنية وزيادة تأثيرهم",
      "primaryButton": "أنشئ بطاقتك الآن",
      "secondaryButton": "جرب مجاناً لمدة 14 يوم"
    }
  },
  "auth": {
    "login": {
      "title": "تسجيل الدخول - منصة البطاقات الرقمية",
      "description": "سجل دخولك للوصول إلى لوحة التحكم وإدارة بطاقاتك الرقمية",
      "welcome": "مرحباً بعودتك!",
      "subtitle": "سجل دخولك للمتابعة إلى لوحة التحكم",
      "email": "البريد الإلكتروني",
      "password": "كلمة المرور",
      "rememberMe": "تذكرني",
      "forgotPassword": "نسيت كلمة المرور؟",
      "loginButton": "تسجيل الدخول",
      "loggingIn": "جاري تسجيل الدخول...",
      "orContinueWith": "أو تابع باستخدام",
      "noAccount": "ليس لديك حساب؟",
      "signUp": "أنشئ حساب جديد",
      "error": "خطأ في البريد الإلكتروني أو كلمة المرور"
    },
    "register": {
      "title": "إنشاء حساب جديد - منصة البطاقات الرقمية",
      "description": "أنشئ حسابك الجديد وابدأ في إنشاء بطاقاتك الرقمية الاحترافية",
      "createAccount": "إنشاء حساب جديد",
      "subtitle": "انضم إلينا وابدأ رحلتك الرقمية",
      "firstName": "الاسم الأول",
      "lastName": "الاسم الأخير",
      "email": "البريد الإلكتروني",
      "password": "كلمة المرور",
      "confirmPassword": "تأكيد كلمة المرور",
      "passwordWeak": "كلمة مرور ضعيفة",
      "passwordMedium": "كلمة مرور متوسطة",
      "passwordStrong": "كلمة مرور قوية",
      "passwordMismatch": "كلمتا المرور غير متطابقتين",
      "acceptTerms": "أوافق على",
      "termsOfService": "شروط الخدمة",
      "and": "و",
      "privacyPolicy": "سياسة الخصوصية",
      "acceptTermsRequired": "يجب الموافقة على الشروط والأحكام",
      "createButton": "إنشاء الحساب",
      "creating": "جاري إنشاء الحساب...",
      "orContinueWith": "أو تابع باستخدام",
      "haveAccount": "لديك حساب بالفعل؟",
      "signIn": "سجل دخولك",
      "error": "حدث خطأ أثناء إنشاء الحساب"
    },
      "forgotPassword": {
      "title": "نسيت كلمة المرور",
      "description": "أعد تعيين كلمة المرور الخاصة بك",
      "subtitle": "أدخل بريدك الإلكتروني وسنرسل لك رابط إعادة تعيين كلمة المرور",
      "successMessage": "تم إرسال رابط إعادة التعيين بنجاح",
      "email": "البريد الإلكتروني",
      "sendButton": "إرسال رابط الإعادة",
      "sending": "جاري الإرسال...",
      "emailSent": "تم إرسال رابط إعادة تعيين كلمة المرور إلى بريدك الإلكتروني",
      "backToLogin": "العودة لتسجيل الدخول",
      "error": "حدث خطأ أثناء إرسال البريد الإلكتروني"
    },
    "resetPassword": {
      "title": "إعادة تعيين كلمة المرور",
      "description": "قم بإنشاء كلمة مرور جديدة وقوية",
      "subtitle": "أدخل كلمة المرور الجديدة الخاصة بك",
      "newPassword": "كلمة المرور الجديدة",
      "confirmPassword": "تأكيد كلمة المرور",
      "passwordWeak": "كلمة مرور ضعيفة",
      "passwordMedium": "كلمة مرور متوسطة",
      "passwordStrong": "كلمة مرور قوية",
      "passwordMismatch": "كلمتا المرور غير متطابقتين",
      "passwordTooWeak": "كلمة المرور ضعيفة جداً، يرجى اختيار كلمة مرور أقوى",
      "updateButton": "تحديث كلمة المرور",
      "updating": "جاري التحديث...",
      "successMessage": "تم تحديث كلمة المرور بنجاح",
      "invalidToken": "رابط إعادة التعيين غير صحيح أو منتهي الصلاحية",
      "error": "حدث خطأ أثناء تحديث كلمة المرور"
    },
    "verifyEmail": {
      "title": "تأكيد البريد الإلكتروني",
      "description": "تأكيد عنوان بريدك الإلكتروني لتفعيل حسابك",
      "checkEmail": "تحقق من بريدك الإلكتروني",
      "checkEmailMessage": "لقد أرسلنا رابط التأكيد إلى بريدك الإلكتروني. انقر على الرابط لتفعيل حسابك.",
      "verifying": "جاري التحقق...",
      "verifyingMessage": "يرجى الانتظار بينما نتحقق من بريدك الإلكتروني",
      "successTitle": "تم التأكيد بنجاح!",
      "successMessage": "تم تأكيد بريدك الإلكتروني بنجاح. يمكنك الآن تسجيل الدخول إلى حسابك.",
      "errorTitle": "فشل التأكيد",
      "errorMessage": "لم نتمكن من تأكيد بريدك الإلكتروني. قد يكون الرابط منتهي الصلاحية.",
      "tokenExpired": "انتهت صلاحية رابط التأكيد أو أنه غير صحيح",
      "resendEmail": "إعادة إرسال البريد",
      "resending": "جاري الإرسال...",
      "resendSuccess": "تم إعادة إرسال رابط التأكيد بنجاح",
      "continueToLogin": "متابعة لتسجيل الدخول",
      "backToLogin": "العودة لتسجيل الدخول",
      "redirectMessage": "سيتم إعادة توجيهك لصفحة تسجيل الدخول خلال 3 ثوان...",
      "verificationSuccess": "تم تأكيد حسابك بنجاح! يمكنك الآن تسجيل الدخول"
    }
  },
   "dashboard": {
    "title": "لوحة التحكم - منصة البطاقات الرقمية",
    "description": "إدارة بطاقاتك الرقمية ومتابعة الإحصائيات",
    "welcome": {
      "title": "مرحباً بك في لوحة التحكم",
      "subtitle": "تابع أداء بطاقاتك الرقمية وإحصائياتها من هنا"
    },
    "stats": {
      "totalViews": "إجمالي المشاهدات",
      "totalShares": "إجمالي المشاركات",
      "qrScans": "مسح رمز QR",
      "newContacts": "جهات اتصال جديدة"
    },
    "actions": {
      "createCard": "إنشاء بطاقة",
      "viewAnalytics": "عرض التحليلات"
    },
    "cards": {
      "title": "بطاقاتي",
      "add": "إضافة",
      "addNew": "إضافة بطاقة جديدة",
      "active": "نشطة",
      "draft": "مسودة",
      "updated": "آخر تحديث:",
      "views": "مشاهدة",
      "shares": "مشاركة",
      "scans": "مسح",
      "viewAll": "عرض جميع البطاقات"
    },
    "quickActions": {
      "title": "إجراءات سريعة",
      "createCard": "إنشاء بطاقة جديدة",
      "generateQR": "إنشاء رمز QR",
      "shareCard": "مشاركة بطاقة",
      "viewAnalytics": "عرض التحليلات",
      "settings": "الإعدادات",
      "notifications": "الإشعارات"
    },
    "activity": {
      "title": "النشاط الأخير",
      "cardViewed": "تم عرض البطاقة",
      "cardShared": "تم مشاركة البطاقة",
      "qrScanned": "تم مسح رمز QR",
      "newContact": "جهة اتصال جديدة"
    }
  },
  "createCard": {
    "title": "إنشاء بطاقة جديدة",
    "description": "أنشئ بطاقتك الرقمية الاحترافية",
    "backToCards": "العودة للبطاقات",
    "step": "الخطوة",
    "of": "من",
    "livePreview": "معاينة مباشرة",
    "saveDraft": "حفظ مسودة",
    "createCard": "إنشاء البطاقة",
    "steps": {
      "basicInfo": "المعلومات الأساسية",
      "contactInfo": "معلومات الاتصال",
      "socialLinks": "الروابط الاجتماعية",
      "design": "التصميم",
      "preview": "المعاينة"
    },
    "basicInfo": {
      "title": "المعلومات الأساسية",
      "firstName": "الاسم الأول",
      "lastName": "الاسم الأخير",
      "jobTitle": "المسمى الوظيفي",
      "company": "الشركة",
      "bio": "نبذة تعريفية",
      "dragImage": "اسحب الصورة هنا أو انقر للتحميل"
    },
    "socialLinks": {
      "title": "الروابط الاجتماعية",
      "description": "أضف روابط حساباتك على وسائل التواصل الاجتماعي",
      "add": "إضافة",
      "addLink": "إضافة رابط",
      "addFirst": "إضافة أول رابط",
      "platform": "المنصة",
      "url": "الرابط",
      "noLinks": "لا توجد روابط",
      "noLinksDescription": "ابدأ بإضافة روابط حساباتك الاجتماعية",
      "quickAdd": "إضافة سريعة للمنصات الشائعة"
    },
    "preview": {
      "title": "معاينة البطاقة",
      "description": "راجع بطاقتك قبل الحفظ وتأكد من صحة جميع المعلومات",
      "settings": "إعدادات البطاقة",
      "makePublic": "جعل البطاقة عامة",
      "allowDownload": "السماح بتحميل البطاقة",
      "showQR": "عرض رمز QR"
    },
    "contactInfo": {
      "title": "معلومات الاتصال",
      "description": "أضف طرق التواصل معك لتسهيل الوصول إليك",
      "email": "البريد الإلكتروني",
      "phone": "رقم الهاتف",
      "website": "الموقع الإلكتروني",
      "address": "العنوان",
      "addressPlaceholder": "المدينة، الدولة",
      "required": "مطلوب",
      "emailError": "البريد الإلكتروني غير صحيح",
      "phoneError": "رقم الهاتف غير صحيح",
      "websiteError": "رابط الموقع غير صحيح",
      "preview": "معاينة معلومات الاتصال",
      "tips": {
        "title": "نصائح مهمة",
        "tip1": "تأكد من صحة البريد الإلكتروني لتلقي الرسائل",
        "tip2": "أضف رمز الدولة لرقم الهاتف (+966 للسعودية)",
        "tip3": "يمكن إضافة الموقع بدون http:// أو https://"
      }
    },
    "design": {
      "title": "تخصيص التصميم",
      "selectTemplate": "اختر القالب",
      "colors": "الألوان",
      "colorPalettes": "لوحات الألوان",
      "primaryColor": "اللون الأساسي",
      "backgroundColor": "لون الخلفية",
      "typography": "الخطوط",
      "fontFamily": "نوع الخط",
      "fontSize": "حجم الخط",
      "advanced": "إعدادات متقدمة",
      "cardShadow": "ظل البطاقة",
      "cardBorder": "حدود البطاقة",
      "backgroundPattern": "نمط الخلفية",
      "borderRadius": "انحناء الزوايا",
      "opacity": "الشفافية",
      "resetToDefault": "إعادة تعيين للافتراضي",
      "templates": {
        "modern": "عصري",
        "minimal": "بسيط",
        "professional": "مهني",
        "creative": "إبداعي",
        "elegant": "أنيق",
        "bold": "جريء"
      }
    }
  },
  "common": {
    "back": "رجوع",
    "next": "التالي",
    "previous": "السابق",
    "save": "حفظ",
    "cancel": "إلغاء"
  },
  "sidebar": {
    "sections": {
      "dashboard": "لوحة التحكم",
      "cards": "إدارة البطاقات",
      "sharing": "المشاركة والنشر",
      "networking": "التواصل والشبكات",
      "tools": "الأدوات والميزات",
      "account": "الحساب والإعدادات",
      "support": "الدعم والمساعدة"
    },
    "dashboard": {
      "home": "الرئيسية",
      "analytics": "التحليلات والإحصائيات"
    },
    "cards": {
      "myCards": "بطاقاتي",
      "createNew": "إنشاء بطاقة جديدة",
      "templates": "القوالب والتصاميم"
    },
    "qr": {
      "generator": "مولد رمز QR"
    },
    "sharing": {
      "share": "مشاركة البطاقة",
      "publicView": "العرض العام"
    },
    "contacts": {
      "contacts": "جهات الاتصال",
      "leads": "العملاء المحتملين"
    },
    "tools": {
      "nfc": "تقنية NFC",
      "landingPages": "صفحات الهبوط",
      "downloads": "التحميلات"
    },
    "account": {
      "profile": "الملف الشخصي",
      "subscription": "الاشتراك والباقات",
      "notifications": "الإشعارات",
      "settings": "الإعدادات العامة",
      "privacy": "الخصوصية والأمان"
    },
    "support": {
      "help": "المساعدة والدعم",
      "contact": "تواصل معنا",
      "feedback": "تقييم الخدمة",
      "feedbackSubtitle": "شاركنا رأيك لتحسين الخدمة"
    },
    "external": {
      "website": "موقعنا الإلكتروني"
    },
    "chips": {
      "new": "جديد",
      "create": "إنشاء",
      "pro": "احترافي",
      "upgrade": "ترقية",
            "soon": "قريباً"

    }
  },
    "cards": {
    "title": "بطاقاتي - إدارة البطاقات الرقمية",
    "description": "إدارة وتنظيم جميع بطاقاتك الرقمية",
    "myCards": "بطاقاتي",
    "createNew": "إنشاء بطاقة جديدة",
    "searchPlaceholder": "البحث في البطاقات...",
    "status": "الحالة",
    "allStatus": "جميع الحالات",
    "active": "نشطة",
    "draft": "مسودة",
    "inactive": "غير نشطة",
    "gridView": "عرض شبكي",
    "listView": "عرض قائمة",
    "views": "مشاهدة",
    "shares": "مشاركة",
    "scans": "مسح",
    "preview": "معاينة",
    "edit": "تعديل",
    "share": "مشاركة",
    "copyQR": "نسخ رمز QR",
    "download": "تحميل",
    "delete": "حذف",
    "noCards": "لا توجد بطاقات",
    "noCardsDescription": "ابدأ بإنشاء أول بطاقة رقمية لك",
    "noCardsFound": "لم يتم العثور على بطاقات",
    "noCardsFoundDescription": "جرب تغيير معايير البحث أو الفلتر",
    "createFirstCard": "إنشاء أول بطاقة",
    "deleteConfirmTitle": "تأكيد حذف البطاقة",
    "deleteWarning": "هذا الإجراء لا يمكن التراجع عنه",
    "deleteConfirmMessage": "هل أنت متأكد من حذف البطاقة '{cardName}'؟",
    "deleting": "جاري الحذف...",
    "shareCard": "مشاركة البطاقة",
    "cardLink": "رابط البطاقة",
    "qrCodeDescription": "امسح هذا الرمز للوصول للبطاقة",
    "downloadQR": "تحميل رمز QR"
  },
   "qr": {
    "title": "مولد رمز QR - إنشاء رموز QR مخصصة",
    "description": "أنشئ رموز QR مخصصة لمختلف الأغراض",
    "generator": "مولد رمز QR",
    "preview": "معاينة",
    "download": "تحميل",
    "share": "مشاركة",
    "copyUrl": "نسخ الرابط",
    "copied": "تم النسخ",
    "generating": "جاري التوليد...",
    "enterDataToGenerate": "أدخل البيانات لتوليد رمز QR",
    "tabs": {
      "content": "المحتوى",
      "design": "التصميم",
      "advanced": "متقدم"
    },
    "types": {
      "url": "رابط",
      "text": "نص",
      "email": "بريد إلكتروني",
      "phone": "هاتف",
      "sms": "رسالة نصية",
      "wifi": "واي فاي",
      "location": "موقع"
    },
    "selectType": "اختر نوع رمز QR",
    "enterData": "أدخل البيانات",
    "customizeDesign": "تخصيص التصميم",
    "advancedOptions": "خيارات متقدمة",
    "advancedDescription": "خيارات متقدمة لتخصيص رمز QR بشكل أكبر",
    "fields": {
      "url": "الرابط",
      "text": "النص",
      "email": "البريد الإلكتروني",
      "subject": "الموضوع",
      "body": "المحتوى",
      "phone": "رقم الهاتف",
      "message": "الرسالة",
      "ssid": "اسم الشبكة",
      "password": "كلمة المرور",
      "security": "نوع الحماية",
      "latitude": "خط العرض",
      "longitude": "خط الطول"
    },
    "placeholders": {
      "text": "أدخل النص هنا...",
      "subject": "موضوع الرسالة",
      "body": "محتوى الرسالة",
      "message": "نص الرسالة",
      "ssid": "اسم شبكة الواي فاي",
      "password": "كلمة مرور الشبكة"
    },
    "security": {
      "open": "مفتوحة"
    },
    "size": "الحجم",
    "foregroundColor": "لون المقدمة",
    "backgroundColor": "لون الخلفية",
    "errorCorrection": "تصحيح الأخطاء",
    "margin": "الهامش",
    "addLogo": "إضافة شعار",
    "logoSize": "حجم الشعار",
    "resetToDefault": "إعادة تعيين للافتراضي",
    "errorLevels": {
      "low": "منخفض (7%)",
      "medium": "متوسط (15%)",
      "quartile": "ربعي (25%)",
      "high": "عالي (30%)"
    },
    "type": "النوع",
    "shareTitle": "رمز QR مخصص"
  },
   "analytics": {
    "title": "التحليلات والإحصائيات",
    "description": "تحليل أداء بطاقاتك الرقمية ومتابعة الإحصائيات",
    "totalViews": "إجمالي المشاهدات",
    "totalShares": "إجمالي المشاركات",
    "qrScans": "مسح رمز QR",
    "newContacts": "جهات اتصال جديدة",
    "card": "البطاقة",
    "allCards": "جميع البطاقات",
    "period": "الفترة",
    "last7Days": "آخر 7 أيام",
    "last30Days": "آخر 30 يوم",
    "last90Days": "آخر 90 يوم",
    "lastYear": "آخر سنة",
    "exportReport": "تصدير التقرير",
    "performanceOverview": "نظرة عامة على الأداء",
    "views": "مشاهدات",
    "shares": "مشاركات",
    "scans": "مسح",
    "chartPlaceholder": "سيتم عرض الرسم البياني هنا",
    "topCards": "أفضل البطاقات أداءً",
    "deviceBreakdown": "تحليل الأجهزة",
    "mobile": "الهاتف المحمول",
    "desktop": "سطح المكتب",
    "tablet": "الجهاز اللوحي",
    "topLocations": "أهم المواقع",
    "recentActivity": "النشاط الأخير",
    "filter": "تصفية",
    "activity": {
      "cardViewed": "تم عرض البطاقة",
      "cardShared": "تم مشاركة البطاقة",
      "qrScanned": "تم مسح رمز QR",
      "contactAdded": "تم إضافة جهة اتصال"
    }
  },
   "editCard": {
    "title": "تعديل البطاقة",
    "description": "تعديل وتخصيص بطاقتك الرقمية",
    "editCard": "تعديل البطاقة",
    "loading": "جاري تحميل البطاقة...",
    "loadingDescription": "يرجى الانتظار بينما نحمل بيانات بطاقتك",
    "backToCards": "العودة للبطاقات",
    "livePreview": "معاينة مباشرة",
    "lastSaved": "آخر حفظ",
    "unsavedChanges": "تغييرات غير محفوظة",
    "save": "حفظ التغييرات",
    "saving": "جاري الحفظ...",
    "preview": "معاينة",
    "copyLink": "نسخ الرابط",
    "discardChanges": "تجاهل التغييرات",
    "deleteCard": "حذف البطاقة",
    "tabs": {
      "basicInfo": "المعلومات الأساسية",
      "contact": "معلومات الاتصال",
      "social": "الروابط الاجتماعية",
      "design": "التصميم",
      "preview": "المعاينة"
    },
    "finalPreview": "المعاينة النهائية",
    "previewDescription": "راجع بطاقتك النهائية قبل النشر",
    "cardSettings": "إعدادات البطاقة",
    "makePublic": "جعل البطاقة عامة",
    "allowDownload": "السماح بالتحميل",
    "showQR": "عرض رمز QR",
    "cardStats": "إحصائيات البطاقة",
    "totalViews": "إجمالي المشاهدات",
    "totalShares": "إجمالي المشاركات",
    "created": "تاريخ الإنشاء",
    "lastUpdated": "آخر تحديث",
    "deleteConfirmTitle": "تأكيد حذف البطاقة",
    "deleteWarning": "هذا الإجراء لا يمكن التراجع عنه",
    "deleteConfirmMessage": "هل أنت متأكد من حذف البطاقة '{cardName}'؟",
    "confirmDelete": "تأكيد الحذف",
    "discardTitle": "تجاهل التغييرات",
    "discardMessage": "هل أنت متأكد من تجاهل جميع التغييرات غير المحفوظة؟",
    "confirmDiscard": "تأكيد التجاهل",
    "success": {
      "saved": "تم حفظ التغييرات بنجاح",
      "discarded": "تم تجاهل التغييرات",
      "deleted": "تم حذف البطاقة بنجاح",
      "linkCopied": "تم نسخ الرابط"
    },
    "errors": {
      "loadFailed": "فشل في تحميل البطاقة",
      "saveFailed": "فشل في حفظ التغييرات",
      "deleteFailed": "فشل في حذف البطاقة",
      "notFound": "البطاقة غير موجودة",
      "notFoundDescription": "البطاقة التي تبحث عنها غير موجودة أو تم حذفها"
    }
  },
  "cardPreview": {
    "title": "معاينة البطاقة",
    "description": "معاينة شاملة لبطاقتك الرقمية",
    "preview": "معاينة البطاقة",
    "loading": "جاري تحميل المعاينة...",
    "notFound": "البطاقة غير موجودة",
    "edit": "تعديل",
    "share": "مشاركة",
    "download": "تحميل",
    "desktopView": "عرض سطح المكتب",
    "mobileView": "عرض الهاتف",
    "fullscreen": "ملء الشاشة",
    "zoomIn": "تكبير",
    "zoomOut": "تصغير",
    "stats": "الإحصائيات",
    "views": "مشاهدة",
    "shares": "مشاركة",
    "qrScans": "مسح QR",
    "quickActions": "إجراءات سريعة",
    "copyLink": "نسخ الرابط",
    "copied": "تم النسخ",
    "showQR": "عرض رمز QR",
    "downloadCard": "تحميل البطاقة",
    "contactInfo": "معلومات الاتصال",
    "socialLinks": "الروابط الاجتماعية",
    "shareCard": "مشاركة البطاقة",
    "cardLink": "رابط البطاقة",
    "qrCode": "رمز QR",
    "qrDescription": "امسح هذا الرمز للوصول للبطاقة",
    "downloadQR": "تحميل رمز QR"
  },
   "basicInfo": {
    "title": "المعلومات الأساسية",
    "description": "أضف معلوماتك الشخصية والمهنية الأساسية",
    "profilePhoto": "الصورة الشخصية",
    "firstName": "الاسم الأول",
    "lastName": "الاسم الأخير", 
    "jobTitle": "المسمى الوظيفي",
    "company": "الشركة أو المؤسسة",
    "bio": "نبذة تعريفية",
    "dragImage": "اسحب الصورة هنا أو انقر للتحميل",
    "imageFormats": "PNG, JPG, GIF حتى 5MB",
    "imageRecommendation": "يُنصح باستخدام صورة مربعة بدقة 400x400 بكسل للحصول على أفضل النتائج",
    "required": "مطلوب",
    "jobTitleHelper": "مثال: مطور تطبيقات، مدير مبيعات، مصمم جرافيك",
    "companyHelper": "اسم الشركة أو المؤسسة التي تعمل بها",
    "bioHelper": "نبذة مختصرة عنك وعن خبراتك",
    "preview": "معاينة المعلومات الأساسية",
    "errors": {
      "nameShort": "الاسم يجب أن يكون حرفين على الأقل",
      "jobTitleShort": "المسمى الوظيفي يجب أن يكون 3 أحرف على الأقل",
      "companyShort": "اسم الشركة يجب أن يكون حرفين على الأقل",
      "bioLong": "النبذة التعريفية يجب ألا تتجاوز 200 حرف"
    },
    "tips": {
      "title": "نصائح مهمة",
      "tip1": "استخدم صورة واضحة ومهنية لتترك انطباعاً جيداً",
      "tip2": "اكتب مسمى وظيفي واضح ومحدد",
      "tip3": "النبذة التعريفية يجب أن تكون مختصرة ومفيدة",
      "tip4": "تأكد من صحة جميع المعلومات قبل الحفظ"
    }
  },
   "publicCard": {
    "loading": "جاري تحميل البطاقة...",
    "notFound": "البطاقة غير موجودة",
    "notFoundDescription": "البطاقة التي تبحث عنها غير موجودة أو غير متاحة للعرض العام",
    "views": "مشاهدة",
    "likes": "إعجاب",
    "like": "إعجاب",
    "unlike": "إلغاء الإعجاب",
    "share": "مشاركة",
    "showQR": "عرض رمز QR",
    "contactInfo": "معلومات الاتصال",
    "socialLinks": "الروابط الاجتماعية",
    "saveContact": "حفظ جهة الاتصال",
    "saveContactDescription": "احفظ معلومات الاتصال في هاتفك",
    "downloadContact": "تحميل جهة الاتصال",
    "qrCode": "رمز QR",
    "qrDescription": "امسح هذا الرمز لحفظ معلومات الاتصال",
    "downloadQR": "تحميل رمز QR",
    "shareCard": "مشاركة البطاقة",
    "copyLink": "نسخ الرابط",
    "copied": "تم النسخ"
  },
  "templates": {
    "title": "قوالب البطاقات",
    "description": "اختر من مجموعة متنوعة من القوالب الاحترافية",
    "createCustom": "إنشاء قالب مخصص",
    "searchPlaceholder": "البحث في القوالب...",
    "category": "الفئة",
    "templatesFound": "قالب موجود",
    "premium": "مميز",
    "preview": "معاينة",
    "downloads": "تحميل",
    "features": "المميزات",
    "use": "استخدام",
    "useTemplate": "استخدام القالب",
    "noTemplatesFound": "لم يتم العثور على قوالب",
    "noTemplatesDescription": "جرب تغيير معايير البحث أو الفلتر",
    "clearFilters": "مسح الفلاتر",
    "categories": {
      "all": "جميع الفئات",
      "business": "أعمال",
      "creative": "إبداعي",
      "minimal": "بسيط",
      "technology": "تقني",
      "elegant": "أنيق",
      "bold": "جريء"
    }
  },
   "comingSoon": {
    "title": "قريباً",
    "description": "هذه الميزة قيد التطوير",
    "message": "نحن نعمل بجد لإنجاز هذه الميزة. ستكون متاحة قريباً مع تحديثات مثيرة!",
    "goToDashboard": "العودة للوحة التحكم"
  }
}

===== src/utils/languages/ch.json =====
{
    "Sample Page": "示例页面",
    "Menu Level": "菜单层",
    "Sub Caption": "副标题",
    "Chip": "芯片",
    "Outlined": "概述",
    "External Link": "外部链接"
}
===== src/utils/languages/en.json =====
{
  "header": {
    "home": "Home",
    "features": "Features", 
    "howItWorks": "How It Works",
    "pricing": "Pricing",
    "support": "Support",
    "login": "Login",
    "signup": "Get Started"
  },
  "homepage": {
    "title": "Create Professional Digital Business Cards with NFC & QR – No App Required",
    "description": "Create a smart digital card in under a minute and share it via NFC, QR, or direct link. No apps needed, with full privacy control and instant analytics.",
    "hero": {
      "title": "Your Digital Card, Your Smart Identity ",
      "titleHighlight": "💼",
      "subtitle": "Create a professional card and share it via QR, NFC or custom link – no app needed!",
      "primaryButton": "Try Now for Free",
      "secondaryButton": "See How It Works",
      "imageAlt": "Interactive visual display of the digital card platform"
    },
    "features": {
      "title": "Smart Platform Features",
      "subtitle": "Discover the unlimited possibilities of your digital card",
      "digitalCards": {
        "title": "Smart Digital Cards",
        "description": "Create professional cards with various designs and fully customizable with NFC and QR support"
      },
      "qrCustom": {
        "title": "Fully Custom QR",
        "description": "Unique QR code for each card with customizable colors, logo and design"
      },
      "landingPages": {
        "title": "Customizable Landing Pages",
        "description": "Create custom landing pages to showcase your services and information professionally"
      },
      "privacy": {
        "title": "Complete Privacy Control",
        "description": "Full control over who can see your card and personal information with advanced security settings"
      },
      "notifications": {
        "title": "Smart Instant Notifications",
        "description": "Get instant notifications when others interact with your card with detailed analytics"
      },
      "analytics": {
        "title": "Advanced Detailed Analytics",
        "description": "Track your card's performance and know interaction statistics, views and geographic location"
      }
    },
    "howItWorks": {
      "title": "How Does The System Work?",
      "subtitle": "Three simple steps to get your professional digital card",
      "step1": {
        "title": "Create Your Smart Card",
        "description": "Add your information, photo, and social media links in just a few minutes"
      },
      "step2": {
        "title": "Share via QR or NFC",
        "description": "Get a custom QR code or use NFC technology for instant and smart sharing"
      },
      "step3": {
        "title": "Track Activity and Engagement",
        "description": "Monitor who visited your card and interacted with it through advanced dashboard and instant analytics"
      }
    },
    "testimonials": {
      "title": "What Our Valued Customers Say",
      "subtitle": "Real opinions from satisfied users about our services and their outstanding experience",
      "testimonial1": {
        "name": "Ahmed Mohammed Al-Salem",
        "title": "Sales Manager - Advanced Technology Company",
        "review": "Amazing platform and very easy to use. It saved me a lot of time and effort in sharing my professional information with clients and partners."
      },
      "testimonial2": {
        "name": "Fatima Ahmed Al-Zahrani",
        "title": "Graphic Designer & Founder of Creative Studio",
        "review": "Beautiful designs and very easy customization. I now share my work and portfolio in a more professional and distinctive way."
      },
      "testimonial3": {
        "name": "Mohammed Ali Al-Ahmadi",
        "title": "Entrepreneur & Founder of Innovation Company",
        "review": "The statistics and analytics are very useful for tracking my professional network performance and measuring my digital card impact. Highly recommend it."
      }
    },
    "pricing": {
      "title": "Flexible Pricing Plans",
      "subtitle": "Choose the plan that fits your needs and budget",
      "popular": "Most Popular",
      "free": {
        "name": "Free",
        "price": "$0",
        "description": "For individuals and simple personal use",
        "button": "Start Free Now",
        "features": {
          "0": "One digital card",
          "1": "Basic QR code",
          "2": "Social media links",
          "3": "Simple statistics",
          "4": "Email support"
        }
      },
      "pro": {
        "name": "Professional",
        "price": "$29/month",
        "description": "For professionals, business people and freelancers",
        "button": "Subscribe Now",
        "features": {
          "0": "Unlimited digital cards",
          "1": "Custom QR with colors and logo",
          "2": "Custom landing pages",
          "3": "Advanced detailed analytics",
          "4": "24/7 priority support"
        }
      },
      "business": {
        "name": "Business",
        "price": "$99/month",
        "description": "For companies, teams and organizations",
        "button": "Contact Us",
        "features": {
          "0": "Multiple team accounts",
          "1": "Custom branding",
          "2": "CRM integration",
          "3": "Detailed reports and deep analytics",
          "4": "Dedicated account manager"
        }
      }
    },
    "cta": {
      "title": "Ready to Start Your Digital Journey?",
      "subtitle": "Join thousands of professionals who use our digital cards to expand their professional network and increase their impact",
      "primaryButton": "Create Your Card Now",
      "secondaryButton": "Try Free for 14 Days"
    }
  },
   "auth": {
    "login": {
      "title": "Login - Digital Business Cards Platform",
      "description": "Sign in to access your dashboard and manage your digital cards",
      "welcome": "Welcome Back!",
      "subtitle": "Sign in to continue to your dashboard",
      "email": "Email Address",
      "password": "Password",
      "rememberMe": "Remember me",
      "forgotPassword": "Forgot password?",
      "loginButton": "Sign In",
      "loggingIn": "Signing in...",
      "orContinueWith": "Or continue with",
      "noAccount": "Don't have an account?",
      "signUp": "Sign up",
      "error": "Invalid email or password"
    },
    "register": {
      "title": "Create Account - Digital Business Cards Platform",
      "description": "Create your new account and start building your professional digital cards",
      "createAccount": "Create New Account",
      "subtitle": "Join us and start your digital journey",
      "firstName": "First Name",
      "lastName": "Last Name",
      "email": "Email Address",
      "password": "Password",
      "confirmPassword": "Confirm Password",
      "passwordWeak": "Weak password",
      "passwordMedium": "Medium password",
      "passwordStrong": "Strong password",
      "passwordMismatch": "Passwords do not match",
      "acceptTerms": "I agree to the",
      "termsOfService": "Terms of Service",
      "and": "and",
      "privacyPolicy": "Privacy Policy",
      "acceptTermsRequired": "You must accept the terms and conditions",
      "createButton": "Create Account",
      "creating": "Creating account...",
      "orContinueWith": "Or continue with",
      "haveAccount": "Already have an account?",
      "signIn": "Sign in",
      "error": "An error occurred while creating the account"
    },
       "forgotPassword": {
      "title": "Forgot Password",
      "description": "Reset your password",
      "subtitle": "Enter your email address and we'll send you a password reset link",
      "successMessage": "Reset link sent successfully",
      "email": "Email Address",
      "sendButton": "Send Reset Link",
      "sending": "Sending...",
      "emailSent": "Password reset link has been sent to your email",
      "backToLogin": "Back to Login",
      "error": "An error occurred while sending the email"
    },
    "resetPassword": {
      "title": "Reset Password",
      "description": "Create a new strong password",
      "subtitle": "Enter your new password",
      "newPassword": "New Password",
      "confirmPassword": "Confirm Password",
      "passwordWeak": "Weak password",
      "passwordMedium": "Medium password",
      "passwordStrong": "Strong password",
      "passwordMismatch": "Passwords do not match",
      "passwordTooWeak": "Password is too weak, please choose a stronger password",
      "updateButton": "Update Password",
      "updating": "Updating...",
      "successMessage": "Password updated successfully",
      "invalidToken": "Invalid or expired reset link",
      "error": "An error occurred while updating the password"
    },
    "verifyEmail": {
      "title": "Verify Email",
      "description": "Verify your email address to activate your account",
      "checkEmail": "Check Your Email",
      "checkEmailMessage": "We've sent a verification link to your email. Click the link to activate your account.",
      "verifying": "Verifying...",
      "verifyingMessage": "Please wait while we verify your email address",
      "successTitle": "Verification Successful!",
      "successMessage": "Your email has been verified successfully. You can now sign in to your account.",
      "errorTitle": "Verification Failed",
      "errorMessage": "We couldn't verify your email address. The link may have expired.",
      "tokenExpired": "Verification link has expired or is invalid",
      "resendEmail": "Resend Email",
      "resending": "Sending...",
      "resendSuccess": "Verification link resent successfully",
      "continueToLogin": "Continue to Login",
      "backToLogin": "Back to Login",
      "redirectMessage": "You will be redirected to login page in 3 seconds...",
      "verificationSuccess": "Your account has been verified successfully! You can now sign in"
    }
  },
    "dashboard": {
    "title": "Dashboard - Digital Business Cards Platform",
    "description": "Manage your digital cards and track analytics",
    "welcome": {
      "title": "Welcome to Your Dashboard",
      "subtitle": "Monitor your digital cards performance and analytics from here"
    },
    "stats": {
      "totalViews": "Total Views",
      "totalShares": "Total Shares",
      "qrScans": "QR Scans",
      "newContacts": "New Contacts"
    },
    "actions": {
      "createCard": "Create Card",
      "viewAnalytics": "View Analytics"
    },
    "cards": {
      "title": "My Cards",
      "add": "Add",
      "addNew": "Add New Card",
      "active": "Active",
      "draft": "Draft",
      "updated": "Last updated:",
      "views": "views",
      "shares": "shares",
      "scans": "scans",
      "viewAll": "View All Cards"
    },
    "quickActions": {
      "title": "Quick Actions",
      "createCard": "Create New Card",
      "generateQR": "Generate QR Code",
      "shareCard": "Share Card",
      "viewAnalytics": "View Analytics",
      "settings": "Settings",
      "notifications": "Notifications"
    },
    "activity": {
      "title": "Recent Activity",
      "cardViewed": "Card Viewed",
      "cardShared": "Card Shared",
      "qrScanned": "QR Code Scanned",
      "newContact": "New Contact"
    }
  },
    "createCard": {
    "title": "Create New Card",
    "description": "Create your professional digital business card",
    "backToCards": "Back to Cards",
    "step": "Step",
    "of": "of",
    "livePreview": "Live Preview",
    "saveDraft": "Save Draft",
    "createCard": "Create Card",
    "steps": {
      "basicInfo": "Basic Information",
      "contactInfo": "Contact Information",
      "socialLinks": "Social Links",
      "design": "Design",
      "preview": "Preview"
    },
    "basicInfo": {
      "title": "Basic Information",
      "firstName": "First Name",
      "lastName": "Last Name",
      "jobTitle": "Job Title",
      "company": "Company",
      "bio": "Bio",
      "dragImage": "Drag image here or click to upload"
    },
    "socialLinks": {
      "title": "Social Links",
      "description": "Add links to your social media accounts",
      "add": "Add",
      "addLink": "Add Link",
      "addFirst": "Add First Link",
      "platform": "Platform",
      "url": "URL",
      "noLinks": "No Links Added",
      "noLinksDescription": "Start by adding your social media links",
      "quickAdd": "Quick Add Popular Platforms"
    },
    "preview": {
      "title": "Card Preview",
      "description": "Review your card before saving and make sure all information is correct",
      "settings": "Card Settings",
      "makePublic": "Make Card Public",
      "allowDownload": "Allow Card Download",
      "showQR": "Show QR Code"
    },
      "contactInfo": {
      "title": "Contact Information",
      "description": "Add your contact methods to make it easy for people to reach you",
      "email": "Email Address",
      "phone": "Phone Number",
      "website": "Website",
      "address": "Address",
      "addressPlaceholder": "City, Country",
      "required": "Required",
      "emailError": "Invalid email address",
      "phoneError": "Invalid phone number",
      "websiteError": "Invalid website URL",
      "preview": "Contact Information Preview",
      "tips": {
        "title": "Important Tips",
        "tip1": "Make sure your email is correct to receive messages",
        "tip2": "Add country code to phone number (+1 for US)",
        "tip3": "Website can be added without http:// or https://"
      }
    },
    "design": {
      "title": "Design Customization",
      "selectTemplate": "Select Template",
      "colors": "Colors",
      "colorPalettes": "Color Palettes",
      "primaryColor": "Primary Color",
      "backgroundColor": "Background Color",
      "typography": "Typography",
      "fontFamily": "Font Family",
      "fontSize": "Font Size",
      "advanced": "Advanced Settings",
      "cardShadow": "Card Shadow",
      "cardBorder": "Card Border",
      "backgroundPattern": "Background Pattern",
      "borderRadius": "Border Radius",
      "opacity": "Opacity",
      "resetToDefault": "Reset to Default",
      "templates": {
        "modern": "Modern",
        "minimal": "Minimal",
        "professional": "Professional",
        "creative": "Creative",
        "elegant": "Elegant",
        "bold": "Bold"
      }
    }
  },
  "common": {
    "back": "Back",
    "next": "Next",
    "previous": "Previous",
    "save": "Save",
    "cancel": "Cancel"
  },
  "sidebar": {
    "sections": {
      "dashboard": "Dashboard",
      "cards": "Cards Management",
      "sharing": "Sharing & Publishing",
      "networking": "Networking",
      "tools": "Tools & Features",
      "account": "Account & Settings",
      "support": "Support & Help"
    },
    "dashboard": {
      "home": "Dashboard",
      "analytics": "Analytics & Reports"
    },
    "cards": {
      "myCards": "My Cards",
      "createNew": "Create New Card",
      "templates": "Templates & Designs"
    },
    "qr": {
      "generator": "QR Code Generator"
    },
    "sharing": {
      "share": "Share Card",
      "publicView": "Public View"
    },
    "contacts": {
      "contacts": "Contacts",
      "leads": "Leads"
    },
    "tools": {
      "nfc": "NFC Technology",
      "landingPages": "Landing Pages",
      "downloads": "Downloads"
    },
    "account": {
      "profile": "Profile",
      "subscription": "Subscription & Plans",
      "notifications": "Notifications",
      "settings": "General Settings",
      "privacy": "Privacy & Security"
    },
    "support": {
      "help": "Help & Support",
      "contact": "Contact Us",
      "feedback": "Feedback",
      "feedbackSubtitle": "Share your feedback to improve our service"
    },
    "external": {
      "website": "Our Website"
    },
    "chips": {
      "new": "New",
      "create": "Create",
      "pro": "Pro",
      "upgrade": "Upgrade",
      "soon": "Soon"
    }
  },
   "cards": {
    "title": "My Cards - Digital Cards Management",
    "description": "Manage and organize all your digital cards",
    "myCards": "My Cards",
    "createNew": "Create New Card",
    "searchPlaceholder": "Search cards...",
    "status": "Status",
    "allStatus": "All Status",
    "active": "Active",
    "draft": "Draft",
    "inactive": "Inactive",
    "gridView": "Grid View",
    "listView": "List View",
    "views": "views",
    "shares": "shares",
    "scans": "scans",
    "preview": "Preview",
    "edit": "Edit",
    "share": "Share",
    "copyQR": "Copy QR",
    "download": "Download",
    "delete": "Delete",
    "noCards": "No Cards Yet",
    "noCardsDescription": "Start by creating your first digital card",
    "noCardsFound": "No Cards Found",
    "noCardsFoundDescription": "Try changing your search criteria or filters",
    "createFirstCard": "Create First Card",
    "deleteConfirmTitle": "Confirm Card Deletion",
    "deleteWarning": "This action cannot be undone",
    "deleteConfirmMessage": "Are you sure you want to delete the card '{cardName}'?",
    "deleting": "Deleting...",
    "shareCard": "Share Card",
    "cardLink": "Card Link",
    "qrCodeDescription": "Scan this code to access the card",
    "downloadQR": "Download QR Code"
  },
  "qr": {
    "title": "QR Generator - Create Custom QR Codes",
    "description": "Generate custom QR codes for various purposes",
    "generator": "QR Code Generator",
    "preview": "Preview",
    "download": "Download",
    "share": "Share",
    "copyUrl": "Copy URL",
    "copied": "Copied",
    "generating": "Generating...",
    "enterDataToGenerate": "Enter data to generate QR code",
    "tabs": {
      "content": "Content",
      "design": "Design",
      "advanced": "Advanced"
    },
    "types": {
      "url": "URL",
      "text": "Text",
      "email": "Email",
      "phone": "Phone",
      "sms": "SMS",
      "wifi": "WiFi",
      "location": "Location"
    },
    "selectType": "Select QR Code Type",
    "enterData": "Enter Data",
    "customizeDesign": "Customize Design",
    "advancedOptions": "Advanced Options",
    "advancedDescription": "Advanced options for further QR code customization",
    "fields": {
      "url": "URL",
      "text": "Text",
      "email": "Email Address",
      "subject": "Subject",
      "body": "Body",
      "phone": "Phone Number",
      "message": "Message",
      "ssid": "Network Name",
      "password": "Password",
      "security": "Security Type",
      "latitude": "Latitude",
      "longitude": "Longitude"
    },
    "placeholders": {
      "text": "Enter your text here...",
      "subject": "Email subject",
      "body": "Email body",
      "message": "SMS message",
      "ssid": "WiFi network name",
      "password": "Network password"
    },
    "security": {
      "open": "Open"
    },
    "size": "Size",
    "foregroundColor": "Foreground Color",
    "backgroundColor": "Background Color",
    "errorCorrection": "Error Correction",
    "margin": "Margin",
    "addLogo": "Add Logo",
    "logoSize": "Logo Size",
    "resetToDefault": "Reset to Default",
    "errorLevels": {
      "low": "Low (7%)",
      "medium": "Medium (15%)",
      "quartile": "Quartile (25%)",
      "high": "High (30%)"
    },
    "type": "Type",
    "shareTitle": "Custom QR Code"
  },
  "analytics": {
    "title": "Analytics & Reports",
    "description": "Analyze your digital cards performance and track statistics",
    "totalViews": "Total Views",
    "totalShares": "Total Shares",
    "qrScans": "QR Scans",
    "newContacts": "New Contacts",
    "card": "Card",
    "allCards": "All Cards",
    "period": "Period",
    "last7Days": "Last 7 Days",
    "last30Days": "Last 30 Days",
    "last90Days": "Last 90 Days",
    "lastYear": "Last Year",
    "exportReport": "Export Report",
    "performanceOverview": "Performance Overview",
    "views": "views",
    "shares": "shares",
    "scans": "scans",
    "chartPlaceholder": "Chart will be displayed here",
    "topCards": "Top Performing Cards",
    "deviceBreakdown": "Device Breakdown",
    "mobile": "Mobile",
    "desktop": "Desktop",
    "tablet": "Tablet",
    "topLocations": "Top Locations",
    "recentActivity": "Recent Activity",
    "filter": "Filter",
    "activity": {
      "cardViewed": "Card Viewed",
      "cardShared": "Card Shared",
      "qrScanned": "QR Code Scanned",
      "contactAdded": "Contact Added"
    }
  },
  "editCard": {
    "title": "Edit Card",
    "description": "Edit and customize your digital card",
    "editCard": "Edit Card",
    "loading": "Loading card...",
    "loadingDescription": "Please wait while we load your card data",
    "backToCards": "Back to Cards",
    "livePreview": "Live Preview",
    "lastSaved": "Last saved",
    "unsavedChanges": "Unsaved changes",
    "save": "Save Changes",
    "saving": "Saving...",
    "preview": "Preview",
    "copyLink": "Copy Link",
    "discardChanges": "Discard Changes",
    "deleteCard": "Delete Card",
    "tabs": {
      "basicInfo": "Basic Information",
      "contact": "Contact Information",
      "social": "Social Links",
      "design": "Design",
      "preview": "Preview"
    },
    "finalPreview": "Final Preview",
    "previewDescription": "Review your final card before publishing",
    "cardSettings": "Card Settings",
    "makePublic": "Make Card Public",
    "allowDownload": "Allow Download",
    "showQR": "Show QR Code",
    "cardStats": "Card Statistics",
    "totalViews": "Total Views",
    "totalShares": "Total Shares",
    "created": "Created",
    "lastUpdated": "Last Updated",
    "deleteConfirmTitle": "Confirm Card Deletion",
    "deleteWarning": "This action cannot be undone",
    "deleteConfirmMessage": "Are you sure you want to delete the card '{cardName}'?",
    "confirmDelete": "Confirm Delete",
    "discardTitle": "Discard Changes",
    "discardMessage": "Are you sure you want to discard all unsaved changes?",
    "confirmDiscard": "Confirm Discard",
    "success": {
      "saved": "Changes saved successfully",
      "discarded": "Changes discarded",
      "deleted": "Card deleted successfully",
      "linkCopied": "Link copied"
    },
    "errors": {
      "loadFailed": "Failed to load card",
      "saveFailed": "Failed to save changes",
      "deleteFailed": "Failed to delete card",
      "notFound": "Card not found",
      "notFoundDescription": "The card you're looking for doesn't exist or has been deleted"
    }
  },
  "cardPreview": {
    "title": "Card Preview",
    "description": "Comprehensive preview of your digital card",
    "preview": "Card Preview",
    "loading": "Loading preview...",
    "notFound": "Card not found",
    "edit": "Edit",
    "share": "Share",
    "download": "Download",
    "desktopView": "Desktop View",
    "mobileView": "Mobile View",
    "fullscreen": "Fullscreen",
    "zoomIn": "Zoom In",
    "zoomOut": "Zoom Out",
    "stats": "Statistics",
    "views": "Views",
    "shares": "Shares",
    "qrScans": "QR Scans",
    "quickActions": "Quick Actions",
    "copyLink": "Copy Link",
    "copied": "Copied",
    "showQR": "Show QR Code",
    "downloadCard": "Download Card",
    "contactInfo": "Contact Information",
    "socialLinks": "Social Links",
    "shareCard": "Share Card",
    "cardLink": "Card Link",
    "qrCode": "QR Code",
    "qrDescription": "Scan this code to access the card",
    "downloadQR": "Download QR Code"
  },
  "basicInfo": {
    "title": "Basic Information",
    "description": "Add your personal and professional basic information",
    "profilePhoto": "Profile Photo",
    "firstName": "First Name",
    "lastName": "Last Name",
    "jobTitle": "Job Title", 
    "company": "Company or Organization",
    "bio": "Bio",
    "dragImage": "Drag image here or click to upload",
    "imageFormats": "PNG, JPG, GIF up to 5MB",
    "imageRecommendation": "We recommend using a square image with 400x400 pixels resolution for best results",
    "required": "Required",
    "jobTitleHelper": "Example: App Developer, Sales Manager, Graphic Designer",
    "companyHelper": "Name of the company or organization you work for",
    "bioHelper": "Brief description about yourself and your experience",
    "preview": "Basic Information Preview",
    "errors": {
      "nameShort": "Name must be at least 2 characters",
      "jobTitleShort": "Job title must be at least 3 characters", 
      "companyShort": "Company name must be at least 2 characters",
      "bioLong": "Bio must not exceed 200 characters"
    },
    "tips": {
      "title": "Important Tips",
      "tip1": "Use a clear and professional photo to make a good impression",
      "tip2": "Write a clear and specific job title",
      "tip3": "Bio should be brief and useful",
      "tip4": "Make sure all information is correct before saving"
    }
  },
   "publicCard": {
    "loading": "Loading card...",
    "notFound": "Card not found",
    "notFoundDescription": "The card you're looking for doesn't exist or is not publicly available",
    "views": "views",
    "likes": "likes",
    "like": "Like",
    "unlike": "Unlike",
    "share": "Share",
    "showQR": "Show QR",
    "contactInfo": "Contact Information",
    "socialLinks": "Social Links",
    "saveContact": "Save Contact",
    "saveContactDescription": "Save contact information to your phone",
    "downloadContact": "Download Contact",
    "qrCode": "QR Code",
    "qrDescription": "Scan this code to save contact information",
    "downloadQR": "Download QR",
    "shareCard": "Share Card",
    "copyLink": "Copy Link",
    "copied": "Copied"
  },
  "templates": {
    "title": "Card Templates",
    "description": "Choose from a variety of professional templates",
    "createCustom": "Create Custom Template",
    "searchPlaceholder": "Search templates...",
    "category": "Category",
    "templatesFound": "templates found",
    "premium": "Premium",
    "preview": "Preview",
    "downloads": "downloads",
    "features": "Features",
    "use": "Use",
    "useTemplate": "Use Template",
    "noTemplatesFound": "No templates found",
    "noTemplatesDescription": "Try changing your search criteria or filters",
    "clearFilters": "Clear Filters",
    "categories": {
      "all": "All Categories",
      "business": "Business",
      "creative": "Creative",
      "minimal": "Minimal",
      "technology": "Technology",
      "elegant": "Elegant",
      "bold": "Bold"
    }
  },
   "comingSoon": {
    "title": "Coming Soon",
    "description": "This feature is under development",
    "message": "We're working hard to bring you this feature. It will be available soon with exciting updates!",
    "goToDashboard": "Go to Dashboard"
  }
}

===== src/utils/languages/fr.json =====
{
    "Sample Page": "Page d'exemple",
    "Menu Level": "niveau menu",
    "Sub Caption": "sous-titre",
    "Chip": "ébrécher",
    "Outlined": "décrit",
    "External Link": "lien externe"
}
===== src/views/analytics/Analytics.tsx =====
// src/views/analytics/Analytics.tsx
import React, { useState } from 'react';
import {
  Box,
  Container,
  Grid2 as Grid,
  Card,
  CardContent,
  Typography,
  Button,
  Stack,
  useTheme,
  useMediaQuery,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Chip,
  LinearProgress,
  Avatar,
  List,
  ListItem,
  ListItemAvatar,
  ListItemText,
  Divider
} from '@mui/material';
import { useTranslation } from 'react-i18next';
import {
  IconTrendingUp,
  IconEye,
  IconShare,
  IconQrcode,
  IconUsers,
  IconCalendar,
  IconMapPin,
  IconDeviceMobile,
  IconDeviceDesktop,
  IconDownload,
  IconFilter
} from '@tabler/icons-react';
import PageContainer from 'src/components/container/PageContainer';
import DashboardCard from '../dashboard/components/DashboardCard';
import StatsCard from '../dashboard/components/StatsCard';

const Analytics = () => {
  const { t } = useTranslation();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));

  const [selectedCard, setSelectedCard] = useState('all');
  const [timeRange, setTimeRange] = useState('30d');

  // بيانات وهمية للإحصائيات
  const stats: {
    title: string;
    value: string;
    change: string;
    trend: 'up' | 'down';
    icon: React.ElementType;
    color: string;
  }[] = [
    {
      title: t('analytics.totalViews'),
      value: '12,847',
      change: '+23.5%',
      trend: 'up',
      icon: IconEye,
      color: theme.palette.primary.main
    },
    {
      title: t('analytics.totalShares'),
      value: '3,456',
      change: '+18.2%',
      trend: 'up',
      icon: IconShare,
      color: theme.palette.success.main
    },
    {
      title: t('analytics.qrScans'),
      value: '8,234',
      change: '+31.7%',
      trend: 'up',
      icon: IconQrcode,
      color: theme.palette.warning.main
    },
    {
      title: t('analytics.newContacts'),
      value: '1,892',
      change: '+12.4%',
      trend: 'up',
      icon: IconUsers,
      color: theme.palette.info.main
    }
  ];

  const topCards = [
    {
      id: 1,
      name: 'بطاقة العمل الرئيسية',
      avatar: '/images/avatars/user1.jpg',
      views: 4567,
      shares: 234,
      engagement: 85
    },
    {
      id: 2,
      name: 'بطاقة المشاريع',
      avatar: '/images/avatars/user2.jpg',
      views: 3421,
      shares: 189,
      engagement: 78
    },
    {
      id: 3,
      name: 'بطاقة شخصية',
      avatar: '/images/avatars/user3.jpg',
      views: 2156,
      shares: 98,
      engagement: 65
    }
  ];

  const deviceStats = [
    { device: t('analytics.mobile'), percentage: 68, color: theme.palette.primary.main },
    { device: t('analytics.desktop'), percentage: 24, color: theme.palette.secondary.main },
    { device: t('analytics.tablet'), percentage: 8, color: theme.palette.warning.main }
  ];

  const locationStats = [
    { country: 'السعودية', views: 5234, flag: '🇸🇦' },
    { country: 'الإمارات', views: 2156, flag: '🇦🇪' },
    { country: 'مصر', views: 1789, flag: '🇪🇬' },
    { country: 'الكويت', views: 987, flag: '🇰🇼' },
    { country: 'قطر', views: 654, flag: '🇶🇦' }
  ];

  const recentActivity = [
    {
      type: 'view',
      message: t('analytics.activity.cardViewed'),
      card: 'بطاقة العمل الرئيسية',
      time: '5 دقائق',
      location: 'الرياض، السعودية'
    },
    {
      type: 'share',
      message: t('analytics.activity.cardShared'),
      card: 'بطاقة المشاريع',
      time: '12 دقيقة',
      location: 'دبي، الإمارات'
    },
    {
      type: 'qr',
      message: t('analytics.activity.qrScanned'),
      card: 'بطاقة شخصية',
      time: '25 دقيقة',
      location: 'القاهرة، مصر'
    },
    {
      type: 'contact',
      message: t('analytics.activity.contactAdded'),
      card: 'بطاقة العمل الرئيسية',
      time: '1 ساعة',
      location: 'الكويت، الكويت'
    }
  ];

  return (
    <PageContainer title={t('analytics.title')} description={t('analytics.description')}>
      <Container maxWidth="xl">
        {/* Header */}
        <Stack
          direction={{ xs: 'column', md: 'row' }}
          justifyContent="space-between"
          alignItems={{ xs: 'stretch', md: 'center' }}
          spacing={2}
          sx={{ mb: 3 }}
        >
          <Typography
            variant={isMobile ? 'h5' : 'h4'}
            sx={{
              fontWeight: 700,
              color: theme.palette.text.primary
            }}
          >
            {t('analytics.title')}
          </Typography>

          <Stack direction="row" spacing={2}>
            <FormControl size="small" sx={{ minWidth: 120 }}>
              <InputLabel>{t('analytics.card')}</InputLabel>
              <Select
                value={selectedCard}
                label={t('analytics.card')}
                onChange={(e) => setSelectedCard(e.target.value)}
                sx={{ borderRadius: 2 }}
              >
                <MenuItem value="all">{t('analytics.allCards')}</MenuItem>
                <MenuItem value="1">بطاقة العمل الرئيسية</MenuItem>
                <MenuItem value="2">بطاقة المشاريع</MenuItem>
                <MenuItem value="3">بطاقة شخصية</MenuItem>
              </Select>
            </FormControl>

            <FormControl size="small" sx={{ minWidth: 120 }}>
              <InputLabel>{t('analytics.period')}</InputLabel>
              <Select
                value={timeRange}
                label={t('analytics.period')}
                onChange={(e) => setTimeRange(e.target.value)}
                sx={{ borderRadius: 2 }}
              >
                <MenuItem value="7d">{t('analytics.last7Days')}</MenuItem>
                <MenuItem value="30d">{t('analytics.last30Days')}</MenuItem>
                <MenuItem value="90d">{t('analytics.last90Days')}</MenuItem>
                <MenuItem value="1y">{t('analytics.lastYear')}</MenuItem>
              </Select>
            </FormControl>

            {!isMobile && (
              <Button
                variant="outlined"
                startIcon={<IconDownload />}
                sx={{ borderRadius: 2 }}
              >
                {t('analytics.exportReport')}
              </Button>
            )}
          </Stack>
        </Stack>

        {/* Stats Cards */}
        <Grid container spacing={3} sx={{ mb: 3 }}>
          {stats.map((stat, index) => (
            <Grid size={{ xs: 6, sm: 6, md: 3 }} key={index}>
              <StatsCard
                title={stat.title}
                value={stat.value}
                change={stat.change}
                trend={stat.trend}
                icon={stat.icon}
                color={stat.color}
                isMobile={isMobile}
              />
            </Grid>
          ))}
        </Grid>

        <Grid container spacing={3}>
          {/* Performance Chart */}
          <Grid size={{ xs: 12, lg: 8 }}>
            <DashboardCard>
              <CardContent sx={{ p: { xs: 2, md: 3 } }}>
                <Stack spacing={3}>
                  <Stack direction="row" justifyContent="space-between" alignItems="center">
                    <Typography variant="h6" fontWeight={600}>
                      {t('analytics.performanceOverview')}
                    </Typography>
                    <Stack direction="row" spacing={1}>
                      <Chip label={t('analytics.views')} size="small" color="primary" />
                      <Chip label={t('analytics.shares')} size="small" color="secondary" />
                      <Chip label={t('analytics.scans')} size="small" color="warning" />
                    </Stack>
                  </Stack>

                  {/* Chart Placeholder */}
                  <Box
                    sx={{
                      height: 300,
                      backgroundColor: theme.palette.grey[50],
                      borderRadius: 2,
                      display: 'flex',
                      alignItems: 'center',
                      justifyContent: 'center',
                      border: `1px dashed ${theme.palette.divider}`
                    }}
                  >
                    <Stack alignItems="center" spacing={2}>
                      <IconTrendingUp size={48} color={theme.palette.text.secondary} />
                      <Typography variant="body2" color="text.secondary">
                        {t('analytics.chartPlaceholder')}
                      </Typography>
                    </Stack>
                  </Box>
                </Stack>
              </CardContent>
            </DashboardCard>
          </Grid>

          {/* Top Performing Cards */}
          <Grid size={{ xs: 12, lg: 4 }}>
            <DashboardCard>
              <CardContent sx={{ p: { xs: 2, md: 3 } }}>
                <Stack spacing={3}>
                  <Typography variant="h6" fontWeight={600}>
                    {t('analytics.topCards')}
                  </Typography>

                  <Stack spacing={2}>
                    {topCards.map((card, _index) => (
                      <Card
                        key={card.id}
                        sx={{
                          border: `1px solid ${theme.palette.divider}`,
                          borderRadius: 2
                        }}
                      >
                        <CardContent sx={{ p: 2 }}>
                          <Stack spacing={2}>
                            <Stack direction="row" spacing={2} alignItems="center">
                              <Avatar src={card.avatar} sx={{ width: 40, height: 40 }} />
                              <Stack spacing={0.5} sx={{ flex: 1, minWidth: 0 }}>
                                <Typography
                                  variant="subtitle2"
                                  fontWeight={600}
                                  sx={{
                                    overflow: 'hidden',
                                    textOverflow: 'ellipsis',
                                    whiteSpace: 'nowrap'
                                  }}
                                >
                                  {card.name}
                                </Typography>
                                <Typography variant="caption" color="text.secondary">
                                  {card.views} {t('analytics.views')} • {card.shares} {t('analytics.shares')}
                                </Typography>
                              </Stack>
                              <Chip
                                label={`${card.engagement}%`}
                                size="small"
                                color={card.engagement > 80 ? 'success' : card.engagement > 60 ? 'warning' : 'default'}
                              />
                            </Stack>

                            <LinearProgress
                              variant="determinate"
                              value={card.engagement}
                              sx={{
                                height: 6,
                                borderRadius: 3,
                                backgroundColor: theme.palette.grey[200],
                                '& .MuiLinearProgress-bar': {
                                  backgroundColor: card.engagement > 80 
                                    ? theme.palette.success.main 
                                    : card.engagement > 60 
                                    ? theme.palette.warning.main 
                                    : theme.palette.grey[400]
                                }
                              }}
                            />
                          </Stack>
                        </CardContent>
                      </Card>
                    ))}
                  </Stack>
                </Stack>
              </CardContent>
            </DashboardCard>
          </Grid>

          {/* Device Analytics */}
          <Grid size={{ xs: 12, md: 6 }}>
            <DashboardCard>
              <CardContent sx={{ p: { xs: 2, md: 3 } }}>
                <Stack spacing={3}>
                  <Typography variant="h6" fontWeight={600}>
                    {t('analytics.deviceBreakdown')}
                  </Typography>

                  <Stack spacing={2}>
                    {deviceStats.map((device, index) => (
                      <Stack key={index} spacing={1}>
                        <Stack direction="row" justifyContent="space-between" alignItems="center">
                          <Stack direction="row" spacing={1} alignItems="center">
                            {device.device === t('analytics.mobile') ? (
                              <IconDeviceMobile size={20} color={device.color} />
                            ) : (
                              <IconDeviceDesktop size={20} color={device.color} />
                            )}
                            <Typography variant="body2" fontWeight={500}>
                              {device.device}
                            </Typography>
                          </Stack>
                          <Typography variant="body2" fontWeight={600}>
                            {device.percentage}%
                          </Typography>
                        </Stack>
                        <LinearProgress
                          variant="determinate"
                          value={device.percentage}
                          sx={{
                            height: 8,
                            borderRadius: 4,
                            backgroundColor: theme.palette.grey[200],
                            '& .MuiLinearProgress-bar': {
                              backgroundColor: device.color
                            }
                          }}
                        />
                      </Stack>
                    ))}
                  </Stack>
                </Stack>
              </CardContent>
            </DashboardCard>
          </Grid>

          {/* Geographic Analytics */}
          <Grid size={{ xs: 12, md: 6 }}>
            <DashboardCard>
              <CardContent sx={{ p: { xs: 2, md: 3 } }}>
                <Stack spacing={3}>
                  <Typography variant="h6" fontWeight={600}>
                    {t('analytics.topLocations')}
                  </Typography>

                  <List sx={{ p: 0 }}>
                    {locationStats.map((location, index) => (
                      <React.Fragment key={index}>
                        <ListItem sx={{ px: 0 }}>
                          <ListItemAvatar>
                            <Avatar sx={{ bgcolor: 'transparent', fontSize: '1.5rem' }}>
                              {location.flag}
                            </Avatar>
                          </ListItemAvatar>
                          <ListItemText
                            primary={location.country}
                            secondary={`${location.views} ${t('analytics.views')}`}
                          />
                          <Typography variant="body2" fontWeight={600}>
                            {Math.round((location.views / 10000) * 100)}%
                          </Typography>
                        </ListItem>
                        {index < locationStats.length - 1 && <Divider />}
                      </React.Fragment>
                    ))}
                  </List>
                </Stack>
              </CardContent>
            </DashboardCard>
          </Grid>

          {/* Recent Activity */}
          <Grid size={{ xs: 12 }}>
            <DashboardCard>
              <CardContent sx={{ p: { xs: 2, md: 3 } }}>
                <Stack spacing={3}>
                  <Stack direction="row" justifyContent="space-between" alignItems="center">
                    <Typography variant="h6" fontWeight={600}>
                      {t('analytics.recentActivity')}
                    </Typography>
                    <Button
                      variant="outlined"
                      size="small"
                      startIcon={<IconFilter />}
                      sx={{ borderRadius: 2 }}
                    >
                      {t('analytics.filter')}
                    </Button>
                  </Stack>

                  <Stack spacing={2}>
                    {recentActivity.map((activity, index) => (
                      <Card
                        key={index}
                        sx={{
                          border: `1px solid ${theme.palette.divider}`,
                          borderRadius: 2,
                          transition: 'all 0.2s ease',
                          '&:hover': {
                            boxShadow: theme.shadows[2]
                          }
                        }}
                      >
                        <CardContent sx={{ p: 2 }}>
                          <Grid container spacing={2} alignItems="center">
                            <Grid size={{ xs: 1 }}>
                              <Avatar
                                sx={{
                                  width: 40,
                                  height: 40,
                                  backgroundColor: `${
                                    activity.type === 'view' ? theme.palette.primary.main :
                                    activity.type === 'share' ? theme.palette.success.main :
                                    activity.type === 'qr' ? theme.palette.warning.main :
                                    theme.palette.info.main
                                  }20`,
                                  color: 
                                    activity.type === 'view' ? theme.palette.primary.main :
                                    activity.type === 'share' ? theme.palette.success.main :
                                    activity.type === 'qr' ? theme.palette.warning.main :
                                    theme.palette.info.main
                                }}
                              >
                                {activity.type === 'view' && <IconEye size={20} />}
                                {activity.type === 'share' && <IconShare size={20} />}
                                {activity.type === 'qr' && <IconQrcode size={20} />}
                                {activity.type === 'contact' && <IconUsers size={20} />}
                              </Avatar>
                            </Grid>

                            <Grid size={{ xs: 11, sm: 6 }}>
                              <Stack spacing={0.5}>
                                <Typography variant="body2" fontWeight={600}>
                                  {activity.message}
                                </Typography>
                                <Typography variant="caption" color="text.secondary">
                                  {activity.card}
                                </Typography>
                              </Stack>
                            </Grid>

                            {!isMobile && (
                              <>
                                <Grid size={{ sm: 3 }}>
                                  <Stack direction="row" spacing={1} alignItems="center">
                                    <IconMapPin size={16} color={theme.palette.text.secondary} />
                                    <Typography variant="caption" color="text.secondary">
                                      {activity.location}
                                    </Typography>
                                  </Stack>
                                </Grid>

                                <Grid size={{ sm: 2 }}>
                                  <Stack direction="row" spacing={1} alignItems="center">
                                    <IconCalendar size={16} color={theme.palette.text.secondary} />
                                    <Typography variant="caption" color="text.secondary">
                                      منذ {activity.time}
                                    </Typography>
                                  </Stack>
                                </Grid>
                              </>
                            )}
                          </Grid>

                          {isMobile && (
                            <Stack direction="row" spacing={2} sx={{ mt: 1 }}>
                              <Stack direction="row" spacing={0.5} alignItems="center">
                                <IconMapPin size={14} color={theme.palette.text.secondary} />
                                <Typography variant="caption" color="text.secondary">
                                  {activity.location}
                                </Typography>
                              </Stack>
                              <Stack direction="row" spacing={0.5} alignItems="center">
                                <IconCalendar size={14} color={theme.palette.text.secondary} />
                                <Typography variant="caption" color="text.secondary">
                                  منذ {activity.time}
                                </Typography>
                              </Stack>
                            </Stack>
                          )}
                        </CardContent>
                      </Card>
                    ))}
                  </Stack>
                </Stack>
              </CardContent>
            </DashboardCard>
          </Grid>
        </Grid>
      </Container>
    </PageContainer>
  );
};

export default Analytics;

===== src/views/authentication/Error.tsx =====
import { FC } from 'react';
import { Box, Container, Typography, Button } from '@mui/material';
import { Link } from 'react-router';
import ErrorImg from 'src/assets/images/backgrounds/404-error-idea.gif';

const Error: FC = () => (
  <Box
    display="flex"
    flexDirection="column"
    height="100vh"
    textAlign="center"
    justifyContent="center"
  >
    <Container maxWidth="md">
      <img src={ErrorImg} alt="404" style={{ width: '100%', maxWidth: '500px' }} />
      <Typography align="center" variant="h1" mb={4}>
        Opps!!!
      </Typography>
      <Typography align="center" variant="h4" mb={4}>
        This page you are looking for could not be found.
      </Typography>
      <Button color="primary" variant="contained" component={Link} to="/" disableElevation>
        Go Back to Home
      </Button>
    </Container>
  </Box>
);

export default Error;

===== src/views/authentication/ForgotPassword.tsx =====
// src/views/authentication/ForgotPassword.tsx
import React, { useState } from 'react';
import {
  Box,
  Container,
  Card,
  CardContent,
  Typography,
  TextField,
  Button,
  Stack,
  Alert,
  useTheme
} from '@mui/material';
import { useTranslation } from 'react-i18next';
import { IconArrowRight, IconArrowLeft, IconMail } from '@tabler/icons-react';
import { Link } from 'react-router';
import Logo from 'src/layouts/full/shared/logo/Logo';
import PageContainer from 'src/components/container/PageContainer';

const ForgotPassword = () => {
  const { t } = useTranslation();
  const theme = useTheme();
  
  const [email, setEmail] = useState('');
  const [loading, setLoading] = useState(false);
  const [success, setSuccess] = useState(false);
  const [error, setError] = useState('');

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    setError('');

    try {
      console.log('Reset password for:', email);
      
      // محاكاة API call
      await new Promise(resolve => setTimeout(resolve, 1500));
      
      setSuccess(true);
    } catch (err) {
      setError(t('auth.forgotPassword.error'));
    } finally {
      setLoading(false);
    }
  };

  return (
    <PageContainer title={t('auth.forgotPassword.title')} description={t('auth.forgotPassword.description')}>
      <Box
        sx={{
          minHeight: '100vh',
          display: 'flex',
          alignItems: 'center',
          backgroundColor: theme.palette.background.default
        }}
      >
        <Container maxWidth="sm">
          <Card
            sx={{
              boxShadow: theme.shadows[10],
              borderRadius: 3
            }}
          >
            <CardContent sx={{ p: 4 }}>
              <Stack spacing={3} alignItems="center">
                {/* Logo */}
                <Logo />
                
                {/* Header */}
                <Box textAlign="center">
                  <Box
                    sx={{
                      width: 80,
                      height: 80,
                      borderRadius: '50%',
                      backgroundColor: theme.palette.primary.light,
                      display: 'flex',
                      alignItems: 'center',
                      justifyContent: 'center',
                      mx: 'auto',
                      mb: 2
                    }}
                  >
                    <IconMail size={40} color={theme.palette.primary.main} />
                  </Box>
                  
                  <Typography
                    variant="h4"
                    sx={{
                      fontWeight: 700,
                      color: theme.palette.text.primary,
                      mb: 1
                    }}
                  >
                    {t('auth.forgotPassword.title')}
                  </Typography>
                  <Typography
                    variant="body1"
                    sx={{
                      color: theme.palette.text.secondary
                    }}
                  >
                    {success ? t('auth.forgotPassword.successMessage') : t('auth.forgotPassword.subtitle')}
                  </Typography>
                </Box>

                {/* Success Alert */}
                {success && (
                  <Alert severity="success" sx={{ width: '100%' }}>
                    {t('auth.forgotPassword.emailSent')}
                  </Alert>
                )}

                {/* Error Alert */}
                {error && (
                  <Alert severity="error" sx={{ width: '100%' }}>
                    {error}
                  </Alert>
                )}

                {!success && (
                  <Box component="form" onSubmit={handleSubmit} sx={{ width: '100%' }}>
                    <Stack spacing={3}>
                      <TextField
                        fullWidth
                        name="email"
                        type="email"
                        label={t('auth.forgotPassword.email')}
                        value={email}
                        onChange={(e) => setEmail(e.target.value)}
                        required
                        variant="outlined"
                        sx={{
                          '& .MuiOutlinedInput-root': {
                            borderRadius: 2
                          }
                        }}
                      />

                      <Button
                        type="submit"
                        variant="contained"
                        size="large"
                        fullWidth
                        disabled={loading}
                        endIcon={<IconArrowRight />}
                        sx={{
                          py: 1.5,
                          borderRadius: 2,
                          fontSize: '1rem',
                          fontWeight: 600
                        }}
                      >
                        {loading ? t('auth.forgotPassword.sending') : t('auth.forgotPassword.sendButton')}
                      </Button>
                    </Stack>
                  </Box>
                )}

                {/* Back to Login */}
                <Link to="/auth/login">
                  <Button
                    variant="text"
                    startIcon={<IconArrowLeft />}
                    sx={{
                      color: theme.palette.text.secondary,
                      '&:hover': {
                        backgroundColor: theme.palette.action.hover
                      }
                    }}
                  >
                    {t('auth.forgotPassword.backToLogin')}
                  </Button>
                </Link>
              </Stack>
            </CardContent>
          </Card>
        </Container>
      </Box>
    </PageContainer>
  );
};

export default ForgotPassword;

===== src/views/authentication/Login.tsx =====
// src/views/authentication/Login.tsx
import React, { useState } from 'react';
import {
  Box,
  Container,
  Card,
  CardContent,
  Typography,
  TextField,
  Button,
  Stack,
  Divider,
  IconButton,
  InputAdornment,
  Checkbox,
  FormControlLabel,
  Alert,
  useTheme
} from '@mui/material';
import { useTranslation } from 'react-i18next';
import { 
  IconEye, 
  IconEyeOff, 
  IconBrandGoogle, 
  IconBrandFacebook,
  IconArrowRight 
} from '@tabler/icons-react';
import { Link, useNavigate } from 'react-router';
import Logo from 'src/layouts/full/shared/logo/Logo';
import PageContainer from 'src/components/container/PageContainer';

const Login = () => {
  const { t } = useTranslation();
  const theme = useTheme();
  const navigate = useNavigate();
  
  const [formData, setFormData] = useState({
    email: '',
    password: '',
    rememberMe: false
  });
  const [showPassword, setShowPassword] = useState(false);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value, checked } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: name === 'rememberMe' ? checked : value
    }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    setError('');

    try {
      // هنا هيكون API call للتسجيل
      console.log('Login data:', formData);
      
      // محاكاة API call
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      // في حالة النجاح
      navigate('/dashboard');
    } catch (err) {
      setError(t('auth.login.error'));
    } finally {
      setLoading(false);
    }
  };

  return (
    <PageContainer title={t('auth.login.title')} description={t('auth.login.description')}>
      <Box
        sx={{
          minHeight: '100vh',
          display: 'flex',
          alignItems: 'center',
          backgroundColor: theme.palette.background.default
        }}
      >
        <Container maxWidth="sm">
          <Card
            sx={{
              boxShadow: theme.shadows[10],
              borderRadius: 3
            }}
          >
            <CardContent sx={{ p: 4 }}>
              <Stack spacing={3} alignItems="center">
                {/* Logo */}
                <Logo />
                
                {/* Header */}
                <Box textAlign="center">
                  <Typography
                    variant="h4"
                    sx={{
                      fontWeight: 700,
                      color: theme.palette.text.primary,
                      mb: 1
                    }}
                  >
                    {t('auth.login.welcome')}
                  </Typography>
                  <Typography
                    variant="body1"
                    sx={{
                      color: theme.palette.text.secondary
                    }}
                  >
                    {t('auth.login.subtitle')}
                  </Typography>
                </Box>

                {/* Error Alert */}
                {error && (
                  <Alert severity="error" sx={{ width: '100%' }}>
                    {error}
                  </Alert>
                )}

                {/* Login Form */}
                <Box component="form" onSubmit={handleSubmit} sx={{ width: '100%' }}>
                  <Stack spacing={3}>
                    <TextField
                      fullWidth
                      name="email"
                      type="email"
                      label={t('auth.login.email')}
                      value={formData.email}
                      onChange={handleInputChange}
                      required
                      variant="outlined"
                      sx={{
                        '& .MuiOutlinedInput-root': {
                          borderRadius: 2
                        }
                      }}
                    />

                    <TextField
                      fullWidth
                      name="password"
                      type={showPassword ? 'text' : 'password'}
                      label={t('auth.login.password')}
                      value={formData.password}
                      onChange={handleInputChange}
                      required
                      variant="outlined"
                      sx={{
                        '& .MuiOutlinedInput-root': {
                          borderRadius: 2
                        }
                      }}
                      InputProps={{
                        endAdornment: (
                          <InputAdornment position="end">
                            <IconButton
                              onClick={() => setShowPassword(!showPassword)}
                              edge="end"
                            >
                              {showPassword ? <IconEyeOff /> : <IconEye />}
                            </IconButton>
                          </InputAdornment>
                        )
                      }}
                    />

                    <Stack direction="row" justifyContent="space-between" alignItems="center">
                      <FormControlLabel
                        control={
                          <Checkbox
                            name="rememberMe"
                            checked={formData.rememberMe}
                            onChange={handleInputChange}
                            color="primary"
                          />
                        }
                        label={t('auth.login.rememberMe')}
                      />
                      
                      <Link to="/auth/forgot-password">
                        <Typography
                          variant="body2"
                          sx={{
                            color: theme.palette.primary.main,
                            textDecoration: 'none',
                            '&:hover': {
                              textDecoration: 'underline'
                            }
                          }}
                        >
                          {t('auth.login.forgotPassword')}
                        </Typography>
                      </Link>
                    </Stack>

                    <Button
                      type="submit"
                      variant="contained"
                      size="large"
                      fullWidth
                      disabled={loading}
                      endIcon={<IconArrowRight />}
                      sx={{
                        py: 1.5,
                        borderRadius: 2,
                        fontSize: '1rem',
                        fontWeight: 600
                      }}
                    >
                      {loading ? t('auth.login.loggingIn') : t('auth.login.loginButton')}
                    </Button>
                  </Stack>
                </Box>

                {/* Divider */}
                <Divider sx={{ width: '100%', my: 2 }}>
                  <Typography variant="body2" color="text.secondary">
                    {t('auth.login.orContinueWith')}
                  </Typography>
                </Divider>

                {/* Social Login */}
                <Stack direction="row" spacing={2} sx={{ width: '100%' }}>
                  <Button
                    variant="outlined"
                    fullWidth
                    startIcon={<IconBrandGoogle />}
                    sx={{
                      py: 1.5,
                      borderRadius: 2,
                      borderColor: theme.palette.divider
                    }}
                  >
                    Google
                  </Button>
                  
                  <Button
                    variant="outlined"
                    fullWidth
                    startIcon={<IconBrandFacebook />}
                    sx={{
                      py: 1.5,
                      borderRadius: 2,
                      borderColor: theme.palette.divider
                    }}
                  >
                    Facebook
                  </Button>
                </Stack>

                {/* Register Link */}
                <Typography variant="body2" textAlign="center">
                  {t('auth.login.noAccount')}{' '}
                  <Link to="/auth/register">
                    <Typography
                      component="span"
                      sx={{
                        color: theme.palette.primary.main,
                        fontWeight: 600,
                        textDecoration: 'none',
                        '&:hover': {
                          textDecoration: 'underline'
                        }
                      }}
                    >
                      {t('auth.login.signUp')}
                    </Typography>
                  </Link>
                </Typography>
              </Stack>
            </CardContent>
          </Card>
        </Container>
      </Box>
    </PageContainer>
  );
};

export default Login;

===== src/views/authentication/Register.tsx =====
// src/views/authentication/Register.tsx
import React, { useState } from 'react';
import {
  Box,
  Container,
  Card,
  CardContent,
  Typography,
  TextField,
  Button,
  Stack,
  Divider,
  IconButton,
  InputAdornment,
  Checkbox,
  FormControlLabel,
  Alert,
  useTheme,
  LinearProgress
} from '@mui/material';
import { useTranslation } from 'react-i18next';
import { 
  IconEye, 
  IconEyeOff, 
  IconBrandGoogle, 
  IconBrandFacebook,
  IconArrowRight,
  IconCheck,
  IconX
} from '@tabler/icons-react';
import { Link, useNavigate } from 'react-router';
import Logo from 'src/layouts/full/shared/logo/Logo';
import PageContainer from 'src/components/container/PageContainer';

const Register = () => {
  const { t } = useTranslation();
  const theme = useTheme();
  const navigate = useNavigate();
  
  const [formData, setFormData] = useState({
    firstName: '',
    lastName: '',
    email: '',
    password: '',
    confirmPassword: '',
    acceptTerms: false
  });
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value, checked } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: name === 'acceptTerms' ? checked : value
    }));
  };

  // Password strength validation
  const getPasswordStrength = (password: string) => {
    let strength = 0;
    if (password.length >= 8) strength += 25;
    if (/[A-Z]/.test(password)) strength += 25;
    if (/[0-9]/.test(password)) strength += 25;
    if (/[^A-Za-z0-9]/.test(password)) strength += 25;
    return strength;
  };

  const passwordStrength = getPasswordStrength(formData.password);
  const passwordsMatch = formData.password === formData.confirmPassword && formData.confirmPassword !== '';

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    setError('');

    // Validation
    if (formData.password !== formData.confirmPassword) {
      setError(t('auth.register.passwordMismatch'));
      setLoading(false);
      return;
    }

    if (!formData.acceptTerms) {
      setError(t('auth.register.acceptTermsRequired'));
      setLoading(false);
      return;
    }

    try {
      console.log('Register data:', formData);
      
      // محاكاة API call
      await new Promise(resolve => setTimeout(resolve, 1500));
      
      // في حالة النجاح
      navigate('/auth/verify-email');
    } catch (err) {
      setError(t('auth.register.error'));
    } finally {
      setLoading(false);
    }
  };

  return (
    <PageContainer title={t('auth.register.title')} description={t('auth.register.description')}>
      <Box
        sx={{
          minHeight: '100vh',
          display: 'flex',
          alignItems: 'center',
          backgroundColor: theme.palette.background.default,
          py: 4
        }}
      >
        <Container maxWidth="sm">
          <Card
            sx={{
              boxShadow: theme.shadows[10],
              borderRadius: 3
            }}
          >
            <CardContent sx={{ p: 4 }}>
              <Stack spacing={3} alignItems="center">
                {/* Logo */}
                <Logo />
                
                {/* Header */}
                <Box textAlign="center">
                  <Typography
                    variant="h4"
                    sx={{
                      fontWeight: 700,
                      color: theme.palette.text.primary,
                      mb: 1
                    }}
                  >
                    {t('auth.register.createAccount')}
                  </Typography>
                  <Typography
                    variant="body1"
                    sx={{
                      color: theme.palette.text.secondary
                    }}
                  >
                    {t('auth.register.subtitle')}
                  </Typography>
                </Box>

                {/* Error Alert */}
                {error && (
                  <Alert severity="error" sx={{ width: '100%' }}>
                    {error}
                  </Alert>
                )}

                {/* Register Form */}
                <Box component="form" onSubmit={handleSubmit} sx={{ width: '100%' }}>
                  <Stack spacing={3}>
                    <Stack direction="row" spacing={2}>
                      <TextField
                        fullWidth
                        name="firstName"
                        label={t('auth.register.firstName')}
                        value={formData.firstName}
                        onChange={handleInputChange}
                        required
                        variant="outlined"
                        sx={{
                          '& .MuiOutlinedInput-root': {
                            borderRadius: 2
                          }
                        }}
                      />
                      
                      <TextField
                        fullWidth
                        name="lastName"
                        label={t('auth.register.lastName')}
                        value={formData.lastName}
                        onChange={handleInputChange}
                        required
                        variant="outlined"
                        sx={{
                          '& .MuiOutlinedInput-root': {
                            borderRadius: 2
                          }
                        }}
                      />
                    </Stack>

                    <TextField
                      fullWidth
                      name="email"
                      type="email"
                      label={t('auth.register.email')}
                      value={formData.email}
                      onChange={handleInputChange}
                      required
                      variant="outlined"
                      sx={{
                        '& .MuiOutlinedInput-root': {
                          borderRadius: 2
                        }
                      }}
                    />

                    <TextField
                      fullWidth
                      name="password"
                      type={showPassword ? 'text' : 'password'}
                      label={t('auth.register.password')}
                      value={formData.password}
                      onChange={handleInputChange}
                      required
                      variant="outlined"
                      sx={{
                        '& .MuiOutlinedInput-root': {
                          borderRadius: 2
                        }
                      }}
                      InputProps={{
                        endAdornment: (
                          <InputAdornment position="end">
                            <IconButton
                              onClick={() => setShowPassword(!showPassword)}
                              edge="end"
                            >
                              {showPassword ? <IconEyeOff /> : <IconEye />}
                            </IconButton>
                          </InputAdornment>
                        )
                      }}
                    />

                    {/* Password Strength Indicator */}
                    {formData.password && (
                      <Box>
                        <LinearProgress
                          variant="determinate"
                          value={passwordStrength}
                          sx={{
                            height: 8,
                            borderRadius: 4,
                            backgroundColor: theme.palette.grey[200],
                            '& .MuiLinearProgress-bar': {
                              backgroundColor: 
                                passwordStrength < 50 ? theme.palette.error.main :
                                passwordStrength < 75 ? theme.palette.warning.main :
                                theme.palette.success.main
                            }
                          }}
                        />
                        <Typography
                          variant="caption"
                          sx={{
                            color: 
                              passwordStrength < 50 ? theme.palette.error.main :
                              passwordStrength < 75 ? theme.palette.warning.main :
                              theme.palette.success.main,
                            mt: 0.5
                          }}
                        >
                          {passwordStrength < 50 ? t('auth.register.passwordWeak') :
                           passwordStrength < 75 ? t('auth.register.passwordMedium') :
                           t('auth.register.passwordStrong')}
                        </Typography>
                      </Box>
                    )}

                    <TextField
                      fullWidth
                      name="confirmPassword"
                      type={showConfirmPassword ? 'text' : 'password'}
                      label={t('auth.register.confirmPassword')}
                      value={formData.confirmPassword}
                      onChange={handleInputChange}
                      required
                      variant="outlined"
                      error={formData.confirmPassword !== '' && !passwordsMatch}
                      helperText={formData.confirmPassword !== '' && !passwordsMatch ? t('auth.register.passwordMismatch') : ''}
                      sx={{
                        '& .MuiOutlinedInput-root': {
                          borderRadius: 2
                        }
                      }}
                      InputProps={{
                        endAdornment: (
                          <InputAdornment position="end">
                            <IconButton
                              onClick={() => setShowConfirmPassword(!showConfirmPassword)}
                              edge="end"
                            >
                              {showConfirmPassword ? <IconEyeOff /> : <IconEye />}
                            </IconButton>
                            {formData.confirmPassword !== '' && (
                              passwordsMatch ? 
                                <IconCheck color={theme.palette.success.main} size={20} /> :
                                <IconX color={theme.palette.error.main} size={20} />
                            )}
                          </InputAdornment>
                        )
                      }}
                    />

                    <FormControlLabel
                      control={
                        <Checkbox
                          name="acceptTerms"
                          checked={formData.acceptTerms}
                          onChange={handleInputChange}
                          color="primary"
                        />
                      }
                      label={
                        <Typography variant="body2">
                          {t('auth.register.acceptTerms')}{' '}
                          <Link to="/terms">
                            <Typography
                              component="span"
                              sx={{
                                color: theme.palette.primary.main,
                                textDecoration: 'none',
                                '&:hover': {
                                  textDecoration: 'underline'
                                }
                              }}
                            >
                              {t('auth.register.termsOfService')}
                            </Typography>
                          </Link>
                          {' '}{t('auth.register.and')}{' '}
                          <Link to="/privacy">
                            <Typography
                              component="span"
                              sx={{
                                color: theme.palette.primary.main,
                                textDecoration: 'none',
                                '&:hover': {
                                  textDecoration: 'underline'
                                }
                              }}
                            >
                              {t('auth.register.privacyPolicy')}
                            </Typography>
                          </Link>
                        </Typography>
                      }
                    />

                    <Button
                      type="submit"
                      variant="contained"
                      size="large"
                      fullWidth
                      disabled={loading || !formData.acceptTerms}
                      endIcon={<IconArrowRight />}
                      sx={{
                        py: 1.5,
                        borderRadius: 2,
                        fontSize: '1rem',
                        fontWeight: 600
                      }}
                    >
                      {loading ? t('auth.register.creating') : t('auth.register.createButton')}
                    </Button>
                  </Stack>
                </Box>

                {/* Divider */}
                <Divider sx={{ width: '100%', my: 2 }}>
                  <Typography variant="body2" color="text.secondary">
                    {t('auth.register.orContinueWith')}
                  </Typography>
                </Divider>

                {/* Social Login */}
                <Stack direction="row" spacing={2} sx={{ width: '100%' }}>
                  <Button
                    variant="outlined"
                    fullWidth
                    startIcon={<IconBrandGoogle />}
                    sx={{
                      py: 1.5,
                      borderRadius: 2,
                      borderColor: theme.palette.divider
                    }}
                  >
                    Google
                  </Button>
                  
                  <Button
                    variant="outlined"
                    fullWidth
                    startIcon={<IconBrandFacebook />}
                    sx={{
                      py: 1.5,
                      borderRadius: 2,
                      borderColor: theme.palette.divider
                    }}
                  >
                    Facebook
                  </Button>
                </Stack>

                {/* Login Link */}
                <Typography variant="body2" textAlign="center">
                  {t('auth.register.haveAccount')}{' '}
                  <Link to="/auth/login">
                    <Typography
                      component="span"
                      sx={{
                        color: theme.palette.primary.main,
                        fontWeight: 600,
                        textDecoration: 'none',
                        '&:hover': {
                          textDecoration: 'underline'
                        }
                      }}
                    >
                      {t('auth.register.signIn')}
                    </Typography>
                  </Link>
                </Typography>
              </Stack>
            </CardContent>
          </Card>
        </Container>
      </Box>
    </PageContainer>
  );
};

export default Register;

===== src/views/authentication/ResetPassword.tsx =====
// src/views/authentication/ResetPassword.tsx
import React, { useState } from 'react';
import {
  Box,
  Container,
  Card,
  CardContent,
  Typography,
  TextField,
  Button,
  Stack,
  Alert,
  IconButton,
  InputAdornment,
  LinearProgress,
  useTheme
} from '@mui/material';
import { useTranslation } from 'react-i18next';
import { 
  IconArrowRight, 
  IconEye, 
  IconEyeOff, 
  IconShieldCheck,
  IconCheck,
  IconX
} from '@tabler/icons-react';
import { useNavigate, useSearchParams } from 'react-router';
import Logo from 'src/layouts/full/shared/logo/Logo';
import PageContainer from 'src/components/container/PageContainer';

const ResetPassword = () => {
  const { t } = useTranslation();
  const theme = useTheme();
  const navigate = useNavigate();
  const [searchParams] = useSearchParams();
  const token = searchParams.get('token');
  
  const [formData, setFormData] = useState({
    password: '',
    confirmPassword: ''
  });
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  // Password strength validation
  const getPasswordStrength = (password: string) => {
    let strength = 0;
    if (password.length >= 8) strength += 25;
    if (/[A-Z]/.test(password)) strength += 25;
    if (/[0-9]/.test(password)) strength += 25;
    if (/[^A-Za-z0-9]/.test(password)) strength += 25;
    return strength;
  };

  const passwordStrength = getPasswordStrength(formData.password);
  const passwordsMatch = formData.password === formData.confirmPassword && formData.confirmPassword !== '';

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    setError('');

    // Validation
    if (formData.password !== formData.confirmPassword) {
      setError(t('auth.resetPassword.passwordMismatch'));
      setLoading(false);
      return;
    }

    if (passwordStrength < 75) {
      setError(t('auth.resetPassword.passwordTooWeak'));
      setLoading(false);
      return;
    }

    try {
      console.log('Reset password with token:', token, formData);
      
      // محاكاة API call
      await new Promise(resolve => setTimeout(resolve, 1500));
      
      // في حالة النجاح
      navigate('/auth/login', { 
        state: { message: t('auth.resetPassword.successMessage') }
      });
    } catch (err) {
      setError(t('auth.resetPassword.error'));
    } finally {
      setLoading(false);
    }
  };

  // التحقق من وجود token
  if (!token) {
    return (
      <PageContainer title={t('auth.resetPassword.title')}>
        <Box
          sx={{
            minHeight: '100vh',
            display: 'flex',
            alignItems: 'center',
            backgroundColor: theme.palette.background.default
          }}
        >
          <Container maxWidth="sm">
            <Card sx={{ boxShadow: theme.shadows[10], borderRadius: 3 }}>
              <CardContent sx={{ p: 4, textAlign: 'center' }}>
                <Alert severity="error">
                  {t('auth.resetPassword.invalidToken')}
                </Alert>
              </CardContent>
            </Card>
          </Container>
        </Box>
      </PageContainer>
    );
  }

  return (
    <PageContainer title={t('auth.resetPassword.title')} description={t('auth.resetPassword.description')}>
      <Box
        sx={{
          minHeight: '100vh',
          display: 'flex',
          alignItems: 'center',
          backgroundColor: theme.palette.background.default
        }}
      >
        <Container maxWidth="sm">
          <Card
            sx={{
              boxShadow: theme.shadows[10],
              borderRadius: 3
            }}
          >
            <CardContent sx={{ p: 4 }}>
              <Stack spacing={3} alignItems="center">
                {/* Logo */}
                <Logo />
                
                {/* Header */}
                <Box textAlign="center">
                  <Box
                    sx={{
                      width: 80,
                      height: 80,
                      borderRadius: '50%',
                      backgroundColor: theme.palette.success.light,
                      display: 'flex',
                      alignItems: 'center',
                      justifyContent: 'center',
                      mx: 'auto',
                      mb: 2
                    }}
                  >
                    <IconShieldCheck size={40} color={theme.palette.success.main} />
                  </Box>
                  
                  <Typography
                    variant="h4"
                    sx={{
                      fontWeight: 700,
                      color: theme.palette.text.primary,
                      mb: 1
                    }}
                  >
                    {t('auth.resetPassword.title')}
                  </Typography>
                  <Typography
                    variant="body1"
                    sx={{
                      color: theme.palette.text.secondary
                    }}
                  >
                    {t('auth.resetPassword.subtitle')}
                  </Typography>
                </Box>

                {/* Error Alert */}
                {error && (
                  <Alert severity="error" sx={{ width: '100%' }}>
                    {error}
                  </Alert>
                )}

                {/* Reset Form */}
                <Box component="form" onSubmit={handleSubmit} sx={{ width: '100%' }}>
                  <Stack spacing={3}>
                    <TextField
                      fullWidth
                      name="password"
                      type={showPassword ? 'text' : 'password'}
                      label={t('auth.resetPassword.newPassword')}
                      value={formData.password}
                      onChange={handleInputChange}
                      required
                      variant="outlined"
                      sx={{
                        '& .MuiOutlinedInput-root': {
                          borderRadius: 2
                        }
                      }}
                      InputProps={{
                        endAdornment: (
                          <InputAdornment position="end">
                            <IconButton
                              onClick={() => setShowPassword(!showPassword)}
                              edge="end"
                            >
                              {showPassword ? <IconEyeOff /> : <IconEye />}
                            </IconButton>
                          </InputAdornment>
                        )
                      }}
                    />

                    {/* Password Strength Indicator */}
                    {formData.password && (
                      <Box>
                        <LinearProgress
                          variant="determinate"
                          value={passwordStrength}
                          sx={{
                            height: 8,
                            borderRadius: 4,
                            backgroundColor: theme.palette.grey[200],
                            '& .MuiLinearProgress-bar': {
                              backgroundColor: 
                                passwordStrength < 50 ? theme.palette.error.main :
                                passwordStrength < 75 ? theme.palette.warning.main :
                                theme.palette.success.main
                            }
                          }}
                        />
                        <Typography
                          variant="caption"
                          sx={{
                            color: 
                              passwordStrength < 50 ? theme.palette.error.main :
                              passwordStrength < 75 ? theme.palette.warning.main :
                              theme.palette.success.main,
                            mt: 0.5
                          }}
                        >
                          {passwordStrength < 50 ? t('auth.resetPassword.passwordWeak') :
                           passwordStrength < 75 ? t('auth.resetPassword.passwordMedium') :
                           t('auth.resetPassword.passwordStrong')}
                        </Typography>
                      </Box>
                    )}

                    <TextField
                      fullWidth
                      name="confirmPassword"
                      type={showConfirmPassword ? 'text' : 'password'}
                      label={t('auth.resetPassword.confirmPassword')}
                      value={formData.confirmPassword}
                      onChange={handleInputChange}
                      required
                      variant="outlined"
                      error={formData.confirmPassword !== '' && !passwordsMatch}
                      helperText={formData.confirmPassword !== '' && !passwordsMatch ? t('auth.resetPassword.passwordMismatch') : ''}
                      sx={{
                        '& .MuiOutlinedInput-root': {
                          borderRadius: 2
                        }
                      }}
                      InputProps={{
                        endAdornment: (
                          <InputAdornment position="end">
                            <IconButton
                              onClick={() => setShowConfirmPassword(!showConfirmPassword)}
                              edge="end"
                            >
                              {showConfirmPassword ? <IconEyeOff /> : <IconEye />}
                            </IconButton>
                            {formData.confirmPassword !== '' && (
                              passwordsMatch ? 
                                <IconCheck color={theme.palette.success.main} size={20} /> :
                                <IconX color={theme.palette.error.main} size={20} />
                            )}
                          </InputAdornment>
                        )
                      }}
                    />

                    <Button
                      type="submit"
                      variant="contained"
                      size="large"
                      fullWidth
                      disabled={loading || !passwordsMatch || passwordStrength < 75}
                      endIcon={<IconArrowRight />}
                      sx={{
                        py: 1.5,
                        borderRadius: 2,
                        fontSize: '1rem',
                        fontWeight: 600
                      }}
                    >
                      {loading ? t('auth.resetPassword.updating') : t('auth.resetPassword.updateButton')}
                    </Button>
                  </Stack>
                </Box>
              </Stack>
            </CardContent>
          </Card>
        </Container>
      </Box>
    </PageContainer>
  );
};

export default ResetPassword;

===== src/views/authentication/VerifyEmail.tsx =====
// src/views/authentication/VerifyEmail.tsx
import { useState, useEffect } from 'react';
import {
  Box,
  Container,
  Card,
  CardContent,
  Typography,
  Button,
  Stack,
  Alert,
  CircularProgress,
  useTheme
} from '@mui/material';
import { useTranslation } from 'react-i18next';
import { 
  IconMail, 
  IconCheck, 
  IconRefresh,
  IconArrowRight
} from '@tabler/icons-react';
import { Link, useSearchParams, useNavigate } from 'react-router';
import Logo from 'src/layouts/full/shared/logo/Logo';
import PageContainer from 'src/components/container/PageContainer';

const VerifyEmail = () => {
  const { t } = useTranslation();
  const theme = useTheme();
  const navigate = useNavigate();
  const [searchParams] = useSearchParams();
  const token = searchParams.get('token');
  
  const [verificationStatus, setVerificationStatus] = useState<'pending' | 'success' | 'error' | 'loading'>('pending');
  const [resendLoading, setResendLoading] = useState(false);
  const [resendSuccess, setResendSuccess] = useState(false);

  useEffect(() => {
    if (token) {
      verifyEmail(token);
    }
  }, [token]);

  const verifyEmail = async (verificationToken: string) => {
    setVerificationStatus('loading');
    
    try {
      console.log('Verifying email with token:', verificationToken);
      
      // محاكاة API call
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      setVerificationStatus('success');
      
      // إعادة توجيه تلقائي بعد 3 ثوان
      setTimeout(() => {
        navigate('/auth/login', { 
          state: { message: t('auth.verifyEmail.verificationSuccess') }
        });
      }, 3000);
      
    } catch (err) {
      setVerificationStatus('error');
    }
  };

  const handleResendEmail = async () => {
    setResendLoading(true);
    setResendSuccess(false);
    
    try {
      console.log('Resending verification email');
      
      // محاكاة API call
      await new Promise(resolve => setTimeout(resolve, 1500));
      
      setResendSuccess(true);
    } catch (err) {
      console.error('Failed to resend email');
    } finally {
      setResendLoading(false);
    }
  };

  const renderContent = () => {
    switch (verificationStatus) {
      case 'loading':
        return (
          <>
            <Box
              sx={{
                width: 80,
                height: 80,
                borderRadius: '50%',
                backgroundColor: theme.palette.primary.light,
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                mx: 'auto',
                mb: 2
              }}
            >
              <CircularProgress size={40} color="primary" />
            </Box>
            
            <Typography
              variant="h4"
              sx={{
                fontWeight: 700,
                color: theme.palette.text.primary,
                mb: 1
              }}
            >
              {t('auth.verifyEmail.verifying')}
            </Typography>
            <Typography
              variant="body1"
              sx={{
                color: theme.palette.text.secondary
              }}
            >
              {t('auth.verifyEmail.verifyingMessage')}
            </Typography>
          </>
        );

      case 'success':
        return (
          <>
            <Box
              sx={{
                width: 80,
                height: 80,
                borderRadius: '50%',
                backgroundColor: theme.palette.success.light,
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                mx: 'auto',
                mb: 2
              }}
            >
              <IconCheck size={40} color={theme.palette.success.main} />
            </Box>
            
            <Typography
              variant="h4"
              sx={{
                fontWeight: 700,
                color: theme.palette.text.primary,
                mb: 1
              }}
            >
              {t('auth.verifyEmail.successTitle')}
            </Typography>
            <Typography
              variant="body1"
              sx={{
                color: theme.palette.text.secondary,
                mb: 3
              }}
            >
              {t('auth.verifyEmail.successMessage')}
            </Typography>

            <Alert severity="success" sx={{ width: '100%', mb: 2 }}>
              {t('auth.verifyEmail.redirectMessage')}
            </Alert>

            <Link to="/auth/login">
              <Button
                variant="contained"
                endIcon={<IconArrowRight />}
                sx={{
                  px: 4,
                  py: 1.5,
                  borderRadius: 2
                }}
              >
                {t('auth.verifyEmail.continueToLogin')}
              </Button>
            </Link>
          </>
        );

      case 'error':
        return (
          <>
            <Box
              sx={{
                width: 80,
                height: 80,
                borderRadius: '50%',
                backgroundColor: theme.palette.error.light,
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                mx: 'auto',
                mb: 2
              }}
            >
              <IconMail size={40} color={theme.palette.error.main} />
            </Box>
            
            <Typography
              variant="h4"
              sx={{
                fontWeight: 700,
                color: theme.palette.text.primary,
                mb: 1
              }}
            >
              {t('auth.verifyEmail.errorTitle')}
            </Typography>
            <Typography
              variant="body1"
              sx={{
                color: theme.palette.text.secondary,
                mb: 3
              }}
            >
              {t('auth.verifyEmail.errorMessage')}
            </Typography>

            <Alert severity="error" sx={{ width: '100%', mb: 2 }}>
              {t('auth.verifyEmail.tokenExpired')}
            </Alert>

            <Stack direction="row" spacing={2}>
              <Button
                variant="outlined"
                startIcon={<IconRefresh />}
                onClick={handleResendEmail}
                disabled={resendLoading}
                sx={{
                  px: 3,
                  py: 1.5,
                  borderRadius: 2
                }}
              >
                {resendLoading ? t('auth.verifyEmail.resending') : t('auth.verifyEmail.resendEmail')}
              </Button>
              
              <Link to="/auth/login">
                <Button
                  variant="text"
                  sx={{
                    px: 3,
                    py: 1.5,
                    borderRadius: 2
                  }}
                >
                  {t('auth.verifyEmail.backToLogin')}
                </Button>
              </Link>
            </Stack>
          </>
        );

      default: // pending
        return (
          <>
            <Box
              sx={{
                width: 80,
                height: 80,
                borderRadius: '50%',
                backgroundColor: theme.palette.info.light,
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                mx: 'auto',
                mb: 2
              }}
            >
              <IconMail size={40} color={theme.palette.info.main} />
            </Box>
            
            <Typography
              variant="h4"
              sx={{
                fontWeight: 700,
                color: theme.palette.text.primary,
                mb: 1
              }}
            >
              {t('auth.verifyEmail.checkEmail')}
            </Typography>
            <Typography
              variant="body1"
              sx={{
                color: theme.palette.text.secondary,
                mb: 3
              }}
            >
              {t('auth.verifyEmail.checkEmailMessage')}
            </Typography>

            {resendSuccess && (
              <Alert severity="success" sx={{ width: '100%', mb: 2 }}>
                {t('auth.verifyEmail.resendSuccess')}
              </Alert>
            )}

            <Stack spacing={2} sx={{ width: '100%' }}>
              <Button
                variant="outlined"
                startIcon={<IconRefresh />}
                onClick={handleResendEmail}
                disabled={resendLoading}
                fullWidth
                sx={{
                  py: 1.5,
                  borderRadius: 2
                }}
              >
                {resendLoading ? t('auth.verifyEmail.resending') : t('auth.verifyEmail.resendEmail')}
              </Button>
              
              <Link to="/auth/login">
                <Button
                  variant="text"
                  fullWidth
                  sx={{
                    py: 1.5,
                    borderRadius: 2
                  }}
                >
                  {t('auth.verifyEmail.backToLogin')}
                </Button>
              </Link>
            </Stack>
          </>
        );
    }
  };

  return (
    <PageContainer title={t('auth.verifyEmail.title')} description={t('auth.verifyEmail.description')}>
      <Box
        sx={{
          minHeight: '100vh',
          display: 'flex',
          alignItems: 'center',
          backgroundColor: theme.palette.background.default
        }}
      >
        <Container maxWidth="sm">
          <Card
            sx={{
              boxShadow: theme.shadows[10],
              borderRadius: 3
            }}
          >
            <CardContent sx={{ p: 4 }}>
              <Stack spacing={3} alignItems="center" textAlign="center">
                <Logo />
                {renderContent()}
              </Stack>
            </CardContent>
          </Card>
        </Container>
      </Box>
    </PageContainer>
  );
};

export default VerifyEmail;

===== src/views/cards/CardPreview.tsx =====
// src/views/cards/CardPreview.tsx
import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router';
import {
  Box,
  Container,
  Grid2 as Grid,
  Card,
  CardContent,
  Typography,
  Button,
  Stack,
  IconButton,
  useTheme,
  useMediaQuery,
  Dialog,
  DialogContent,
  Chip,
  Divider,
  List,
  ListItem,
  ListItemIcon,
  ListItemText,
  Alert,
  CircularProgress,
  Tooltip,
  Zoom,
  TextField,
  InputAdornment
} from '@mui/material';
import { useTranslation } from 'react-i18next';
import {
  IconArrowLeft,
  IconEdit,
  IconShare,
  IconDownload,
  IconQrcode,
  IconCopy,
  IconCheck,
  IconEye,
  IconMail,
  IconPhone,
  IconWorld,
  IconMapPin,
  IconBrandLinkedin,
  IconBrandTwitter,
  IconBrandFacebook,
  IconBrandInstagram,
  IconMaximize, // استبدال IconFullscreen
  IconX,
  IconDeviceMobile,
  IconDeviceDesktop,
  IconZoomIn,
  IconZoomOut
} from '@tabler/icons-react';
import PageContainer from 'src/components/container/PageContainer';
import CardPreviewComponent from './components/CardPreviewComponent';

// تعريف نوع البيانات
interface CardData {
  id: string | undefined;
  firstName: string;
  lastName: string;
  jobTitle: string;
  company: string;
  bio: string;
  avatar: string;
  email: string;
  phone: string;
  website: string;
  address: string;
  socialLinks: Array<{
    id: string;
    platform: string;
    url: string;
  }>;
  template: string;
  primaryColor: string;
  backgroundColor: string;
  textColor: string;
  fontFamily: string;
  fontSize: number;
  borderRadius: number;
  showShadow: boolean;
  showBorder: boolean;
  showPattern: boolean;
  opacity: number;
  isPublic: boolean;
  allowDownload: boolean;
  showQR: boolean;
  status: string;
  views: number;
  shares: number;
  qrScans: number;
  qrCode: string;
}

const CardPreview = () => {
  const { id } = useParams();
  const navigate = useNavigate();
  const { t } = useTranslation();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));

  const [loading, setLoading] = useState(true);
  const [cardData, setCardData] = useState<CardData | null>(null);
  const [viewMode, setViewMode] = useState('desktop');
  const [scale, setScale] = useState(1);
  const [fullscreenDialog, setFullscreenDialog] = useState(false);
  const [shareDialog, setShareDialog] = useState(false);
  const [qrDialog, setQrDialog] = useState(false);
  const [copied, setCopied] = useState(false);

  useEffect(() => {
    loadCardData();
  }, [id]);

  const loadCardData = async () => {
    try {
      setLoading(true);
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      const mockCardData: CardData = {
        id: id,
        firstName: 'أحمد',
        lastName: 'محمد',
        jobTitle: 'مطور تطبيقات محترف',
        company: 'شركة التقنية المتقدمة',
        bio: 'مطور تطبيقات محترف مع خبرة 5 سنوات في تطوير التطبيقات المحمولة والويب. متخصص في React Native و Flutter مع شغف بالتقنيات الحديثة والحلول الإبداعية.',
        avatar: '/images/avatars/user1.jpg',
        email: 'ahmed.mohammed@techcompany.com',
        phone: '+966501234567',
        website: 'https://ahmed-dev.com',
        address: 'الرياض، المملكة العربية السعودية',
        socialLinks: [
          { id: '1', platform: 'linkedin', url: 'https://linkedin.com/in/ahmed-mohammed' },
          { id: '2', platform: 'twitter', url: 'https://twitter.com/ahmed_dev' },
          { id: '3', platform: 'github', url: 'https://github.com/ahmed-mohammed' },
          { id: '4', platform: 'instagram', url: 'https://instagram.com/ahmed_dev' }
        ],
        template: 'modern',
        primaryColor: '#1976d2',
        backgroundColor: '#ffffff',
        textColor: '#000000',
        fontFamily: 'roboto',
        fontSize: 16,
        borderRadius: 16,
        showShadow: true,
        showBorder: false,
        showPattern: true,
        opacity: 1,
        isPublic: true,
        allowDownload: true,
        showQR: true,
        status: 'active',
        views: 1234,
        shares: 89,
        qrScans: 456,
        qrCode: `https://api.qrserver.com/v1/create-qr-code/?size=300x300&data=${encodeURIComponent(`https://mazyone.com/card/${id}`)}`
      };
      
      setCardData(mockCardData);
    } catch (error) {
      console.error('Failed to load card data:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleCopyLink = async () => {
    try {
      await navigator.clipboard.writeText(`https://mazyone.com/card/${id}`);
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
    } catch (error) {
      console.error('Failed to copy link:', error);
    }
  };

  const handleDownload = async () => {
    if (!cardData) return;
    
    try {
      const canvas = document.createElement('canvas');
      const ctx = canvas.getContext('2d');
      if (!ctx) return;
      
      canvas.width = 400;
      canvas.height = 600;
      
      ctx.fillStyle = cardData.backgroundColor;
      ctx.fillRect(0, 0, canvas.width, canvas.height);
      
      canvas.toBlob((blob) => {
        if (!blob) return;
        
        const url = URL.createObjectURL(blob);
        const link = document.createElement('a');
        link.href = url;
        link.download = `${cardData.firstName}-${cardData.lastName}-card.png`;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        URL.revokeObjectURL(url);
      });
    } catch (error) {
      console.error('Failed to download card:', error);
    }
  };

  const getSocialIcon = (platform: string) => {
    switch (platform.toLowerCase()) {
      case 'linkedin': return IconBrandLinkedin;
      case 'twitter': return IconBrandTwitter;
      case 'facebook': return IconBrandFacebook;
      case 'instagram': return IconBrandInstagram;
      default: return IconWorld;
    }
  };

  if (loading) {
    return (
      <PageContainer title={t('cardPreview.title')} description={t('cardPreview.description')}>
        <Container maxWidth="xl">
          <Box
            sx={{
              display: 'flex',
              justifyContent: 'center',
              alignItems: 'center',
              minHeight: '60vh'
            }}
          >
            <Stack alignItems="center" spacing={3}>
              <CircularProgress size={64} thickness={4} />
              <Typography variant="h6" color="text.secondary">
                {t('cardPreview.loading')}
              </Typography>
            </Stack>
          </Box>
        </Container>
      </PageContainer>
    );
  }

  if (!cardData) {
    return (
      <PageContainer title={t('cardPreview.title')} description={t('cardPreview.description')}>
        <Container maxWidth="xl">
          <Alert severity="error" sx={{ mt: 3 }}>
            {t('cardPreview.notFound')}
          </Alert>
        </Container>
      </PageContainer>
    );
  }

  return (
    <PageContainer title={t('cardPreview.title')} description={t('cardPreview.description')}>
      <Container maxWidth="xl">
        {/* Header */}
        <Stack
          direction={{ xs: 'column', md: 'row' }}
          justifyContent="space-between"
          alignItems={{ xs: 'stretch', md: 'center' }}
          spacing={2}
          sx={{ mb: 3 }}
        >
          <Stack direction="row" spacing={2} alignItems="center">
            <Button
              variant="outlined"
              startIcon={<IconArrowLeft />}
              onClick={() => navigate('/dashboard/cards')}
              sx={{ borderRadius: 2 }}
            >
              {t('common.back')}
            </Button>
            <Typography
              variant={isMobile ? 'h5' : 'h4'}
              sx={{ fontWeight: 700, color: theme.palette.text.primary }}
            >
              {t('cardPreview.preview')}
            </Typography>
            <Chip
              label={t(`cards.${cardData.status}`)}
              color={cardData.status === 'active' ? 'success' : 'warning'}
              size="small"
            />
          </Stack>

          <Stack direction={{ xs: 'column', sm: 'row' }} spacing={2}>
            <Button
              variant="outlined"
              startIcon={<IconEdit />}
              onClick={() => navigate(`/dashboard/cards/edit/${id}`)}
              sx={{ borderRadius: 2 }}
            >
              {t('cardPreview.edit')}
            </Button>
            <Button
              variant="outlined"
              startIcon={<IconShare />}
              onClick={() => setShareDialog(true)}
              sx={{ borderRadius: 2 }}
            >
              {t('cardPreview.share')}
            </Button>
            <Button
              variant="contained"
              startIcon={<IconDownload />}
              onClick={handleDownload}
              sx={{ borderRadius: 2 }}
            >
              {t('cardPreview.download')}
            </Button>
          </Stack>
        </Stack>

        <Grid container spacing={3}>
          {/* Preview Section */}
          <Grid size={{ xs: 12, lg: 8 }}>
            <Card
              sx={{
                borderRadius: 3,
                border: `1px solid ${theme.palette.divider}`,
                overflow: 'hidden'
              }}
            >
              <CardContent sx={{ p: 0 }}>
                {/* Toolbar */}
                <Stack
                  direction="row"
                  justifyContent="space-between"
                  alignItems="center"
                  sx={{
                    p: 2,
                    backgroundColor: theme.palette.grey[50],
                    borderBottom: `1px solid ${theme.palette.divider}`
                  }}
                >
                  <Stack direction="row" spacing={1}>
                    <Tooltip title={t('cardPreview.desktopView')}>
                      <IconButton
                        size="small"
                        color={viewMode === 'desktop' ? 'primary' : 'default'}
                        onClick={() => setViewMode('desktop')}
                      >
                        <IconDeviceDesktop size={20} />
                      </IconButton>
                    </Tooltip>
                    <Tooltip title={t('cardPreview.mobileView')}>
                      <IconButton
                        size="small"
                        color={viewMode === 'mobile' ? 'primary' : 'default'}
                        onClick={() => setViewMode('mobile')}
                      >
                        <IconDeviceMobile size={20} />
                      </IconButton>
                    </Tooltip>
                    <Tooltip title={t('cardPreview.fullscreen')}>
                      <IconButton
                        size="small"
                        onClick={() => setFullscreenDialog(true)}
                      >
                        <IconMaximize size={20} />
                      </IconButton>
                    </Tooltip>
                  </Stack>

                  <Stack direction="row" spacing={1} alignItems="center">
                    <Tooltip title={t('cardPreview.zoomOut')}>
                      <IconButton
                        size="small"
                        onClick={() => setScale(Math.max(0.5, scale - 0.1))}
                        disabled={scale <= 0.5}
                      >
                        <IconZoomOut size={20} />
                      </IconButton>
                    </Tooltip>
                    <Typography variant="body2" sx={{ minWidth: 50, textAlign: 'center' }}>
                      {Math.round(scale * 100)}%
                    </Typography>
                    <Tooltip title={t('cardPreview.zoomIn')}>
                      <IconButton
                        size="small"
                        onClick={() => setScale(Math.min(2, scale + 0.1))}
                        disabled={scale >= 2}
                      >
                        <IconZoomIn size={20} />
                      </IconButton>
                    </Tooltip>
                  </Stack>
                </Stack>

                {/* Preview Area */}
                <Box
                  sx={{
                    p: 4,
                    backgroundColor: theme.palette.grey[100],
                    minHeight: 600,
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'center',
                    position: 'relative',
                    overflow: 'auto'
                  }}
                >
                  <Box
                    sx={{
                      transform: `scale(${scale})`,
                      transformOrigin: 'center',
                      transition: 'transform 0.3s ease',
                      maxWidth: viewMode === 'mobile' ? 350 : 400,
                      width: '100%'
                    }}
                  >
                    <CardPreviewComponent
                      cardData={cardData}
                      isPreview={false}
                      scale={1}
                    />
                  </Box>
                </Box>
              </CardContent>
            </Card>
          </Grid>

          {/* Info Panel */}
          <Grid size={{ xs: 12, lg: 4 }}>
            <Stack spacing={3}>
              {/* Card Stats */}
              <Card
                sx={{
                  borderRadius: 3,
                  border: `1px solid ${theme.palette.divider}`
                }}
              >
                <CardContent sx={{ p: 3 }}>
                  <Typography variant="h6" fontWeight={600} sx={{ mb: 2 }}>
                    {t('cardPreview.stats')}
                  </Typography>
                  
                  <Grid container spacing={2}>
                    <Grid size={6}>
                      <Stack alignItems="center" spacing={1}>
                        <IconEye size={24} color={theme.palette.primary.main} />
                        <Typography variant="h6" fontWeight={600}>
                          {cardData.views?.toLocaleString()}
                        </Typography>
                        <Typography variant="caption" color="text.secondary">
                          {t('cardPreview.views')}
                        </Typography>
                      </Stack>
                    </Grid>
                    <Grid size={6}>
                      <Stack alignItems="center" spacing={1}>
                        <IconShare size={24} color={theme.palette.success.main} />
                        <Typography variant="h6" fontWeight={600}>
                          {cardData.shares?.toLocaleString()}
                        </Typography>
                        <Typography variant="caption" color="text.secondary">
                          {t('cardPreview.shares')}
                        </Typography>
                      </Stack>
                    </Grid>
                    <Grid size={12}>
                      <Stack alignItems="center" spacing={1}>
                        <IconQrcode size={24} color={theme.palette.warning.main} />
                        <Typography variant="h6" fontWeight={600}>
                          {cardData.qrScans?.toLocaleString()}
                        </Typography>
                        <Typography variant="caption" color="text.secondary">
                          {t('cardPreview.qrScans')}
                        </Typography>
                      </Stack>
                    </Grid>
                  </Grid>
                </CardContent>
              </Card>

              {/* Quick Actions */}
              <Card
                sx={{
                  borderRadius: 3,
                  border: `1px solid ${theme.palette.divider}`
                }}
              >
                <CardContent sx={{ p: 3 }}>
                  <Typography variant="h6" fontWeight={600} sx={{ mb: 2 }}>
                    {t('cardPreview.quickActions')}
                  </Typography>
                  
                  <Stack spacing={2}>
                    <Button
                      variant="outlined"
                      startIcon={copied ? <IconCheck /> : <IconCopy />}
                      onClick={handleCopyLink}
                      fullWidth
                      color={copied ? 'success' : 'primary'}
                      sx={{ borderRadius: 2 }}
                    >
                      {copied ? t('cardPreview.copied') : t('cardPreview.copyLink')}
                    </Button>
                    
                    <Button
                      variant="outlined"
                      startIcon={<IconQrcode />}
                      onClick={() => setQrDialog(true)}
                      fullWidth
                      sx={{ borderRadius: 2 }}
                    >
                      {t('cardPreview.showQR')}
                    </Button>
                    
                    <Button
                      variant="outlined"
                      startIcon={<IconDownload />}
                      onClick={handleDownload}
                      fullWidth
                      sx={{ borderRadius: 2 }}
                    >
                      {t('cardPreview.downloadCard')}
                    </Button>
                  </Stack>
                </CardContent>
              </Card>

              {/* Contact Info */}
              <Card
                sx={{
                  borderRadius: 3,
                  border: `1px solid ${theme.palette.divider}`
                }}
              >
                <CardContent sx={{ p: 3 }}>
                  <Typography variant="h6" fontWeight={600} sx={{ mb: 2 }}>
                    {t('cardPreview.contactInfo')}
                  </Typography>
                  
                  <List sx={{ p: 0 }}>
                    {cardData.email && (
                      <ListItem sx={{ px: 0 }}>
                        <ListItemIcon sx={{ minWidth: 40 }}>
                          <IconMail size={20} color={theme.palette.text.secondary} />
                        </ListItemIcon>
                        <ListItemText
                          primary={cardData.email}
                          primaryTypographyProps={{ variant: 'body2' }}
                        />
                      </ListItem>
                    )}
                    
                    {cardData.phone && (
                      <ListItem sx={{ px: 0 }}>
                        <ListItemIcon sx={{ minWidth: 40 }}>
                          <IconPhone size={20} color={theme.palette.text.secondary} />
                        </ListItemIcon>
                        <ListItemText
                          primary={cardData.phone}
                          primaryTypographyProps={{ variant: 'body2' }}
                        />
                      </ListItem>
                    )}
                    
                    {cardData.website && (
                      <ListItem sx={{ px: 0 }}>
                        <ListItemIcon sx={{ minWidth: 40 }}>
                          <IconWorld size={20} color={theme.palette.text.secondary} />
                        </ListItemIcon>
                        <ListItemText
                          primary={cardData.website}
                          primaryTypographyProps={{ variant: 'body2' }}
                        />
                      </ListItem>
                    )}
                    
                    {cardData.address && (
                      <ListItem sx={{ px: 0 }}>
                        <ListItemIcon sx={{ minWidth: 40 }}>
                          <IconMapPin size={20} color={theme.palette.text.secondary} />
                        </ListItemIcon>
                        <ListItemText
                          primary={cardData.address}
                          primaryTypographyProps={{ variant: 'body2' }}
                        />
                      </ListItem>
                    )}
                  </List>

                  {cardData.socialLinks && cardData.socialLinks.length > 0 && (
                    <>
                      <Divider sx={{ my: 2 }} />
                      <Typography variant="subtitle2" fontWeight={600} sx={{ mb: 1 }}>
                        {t('cardPreview.socialLinks')}
                      </Typography>
                      <Stack direction="row" spacing={1} flexWrap="wrap">
                        {cardData.socialLinks.map((link: any, index: number) => {
                          const Icon = getSocialIcon(link.platform);
                          return (
                            <IconButton
                              key={index}
                              size="small"
                              component="a"
                              href={link.url}
                              target="_blank"
                              rel="noopener noreferrer"
                              sx={{
                                backgroundColor: theme.palette.grey[100],
                                '&:hover': {
                                  backgroundColor: theme.palette.primary.light
                                }
                              }}
                            >
                              <Icon size={16} />
                            </IconButton>
                          );
                        })}
                      </Stack>
                    </>
                  )}
                </CardContent>
              </Card>
            </Stack>
          </Grid>
        </Grid>

        {/* Fullscreen Dialog */}
        <Dialog
          open={fullscreenDialog}
          onClose={() => setFullscreenDialog(false)}
          maxWidth={false}
          fullScreen
          TransitionComponent={Zoom}
        >
          <DialogContent
            sx={{
              p: 0,
              backgroundColor: theme.palette.grey[900],
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
              position: 'relative'
            }}
          >
            <IconButton
              onClick={() => setFullscreenDialog(false)}
              sx={{
                position: 'absolute',
                top: 16,
                right: 16,
                color: 'white',
                backgroundColor: 'rgba(0,0,0,0.5)',
                '&:hover': {
                  backgroundColor: 'rgba(0,0,0,0.7)'
                }
              }}
            >
              <IconX />
            </IconButton>
            
            <CardPreviewComponent
              cardData={cardData}
              isPreview={false}
              scale={isMobile ? 0.8 : 1.2}
            />
          </DialogContent>
        </Dialog>

        {/* Share Dialog */}
        <Dialog
          open={shareDialog}
          onClose={() => setShareDialog(false)}
          maxWidth="sm"
          fullWidth
        >
          <DialogContent sx={{ p: 4 }}>
            <Stack spacing={3} alignItems="center">
              <Typography variant="h6" fontWeight={600}>
                {t('cardPreview.shareCard')}
              </Typography>
              
              <TextField
                fullWidth
                label={t('cardPreview.cardLink')}
                value={`https://mazyone.com/card/${id}`}
                InputProps={{
                  readOnly: true,
                  endAdornment: (
                    <InputAdornment position="end">
                      <IconButton onClick={handleCopyLink}>
                        {copied ? <IconCheck color="success" /> : <IconCopy />}
                      </IconButton>
                    </InputAdornment>
                  )
                }}
                sx={{ '& .MuiOutlinedInput-root': { borderRadius: 2 } }}
              />
              
              <Stack direction="row" spacing={2}>
                <Button
                  variant="outlined"
                  onClick={() => setShareDialog(false)}
                  sx={{ borderRadius: 2 }}
                >
                  {t('common.close')}
                </Button>
                <Button
                  variant="contained"
                  startIcon={<IconQrcode />}
                  onClick={() => {
                    setShareDialog(false);
                    setQrDialog(true);
                  }}
                  sx={{ borderRadius: 2 }}
                >
                  {t('cardPreview.showQR')}
                </Button>
              </Stack>
            </Stack>
          </DialogContent>
        </Dialog>

        {/* QR Dialog */}
        <Dialog
          open={qrDialog}
          onClose={() => setQrDialog(false)}
          maxWidth="sm"
          fullWidth
        >
          <DialogContent sx={{ p: 4 }}>
            <Stack spacing={3} alignItems="center">
              <Typography variant="h6" fontWeight={600}>
                {t('cardPreview.qrCode')}
              </Typography>
              
              <Box
                sx={{
                  p: 3,
                  backgroundColor: 'white',
                  borderRadius: 2,
                  border: `1px solid ${theme.palette.divider}`
                }}
              >
                <img
                  src={cardData.qrCode}
                  alt="QR Code"
                  style={{ width: 250, height: 250, display: 'block' }}
                />
              </Box>
              
              <Typography variant="body2" color="text.secondary" textAlign="center">
                {t('cardPreview.qrDescription')}
              </Typography>
              
              <Stack direction="row" spacing={2}>
                <Button
                  variant="outlined"
                  onClick={() => setQrDialog(false)}
                  sx={{ borderRadius: 2 }}
                >
                  {t('common.close')}
                </Button>
                <Button
                  variant="contained"
                  startIcon={<IconDownload />}
                  onClick={() => {
                    const link = document.createElement('a');
                    link.href = cardData.qrCode;
                    link.download = `${cardData.firstName}-${cardData.lastName}-qr.png`;
                    link.click();
                  }}
                  sx={{ borderRadius: 2 }}
                >
                  {t('cardPreview.downloadQR')}
                </Button>
              </Stack>
            </Stack>
          </DialogContent>
        </Dialog>
      </Container>
    </PageContainer>
  );
};

export default CardPreview;

===== src/views/cards/components/BasicInfoStep.tsx =====
// src/views/cards/components/BasicInfoStep.tsx
import React, { useState } from 'react';
import {
  Stack,
  Typography,
  TextField,
  Grid2 as Grid,
  Box,
  Avatar,
  IconButton,
  useTheme,
  Card,
  CardContent,
  Alert,
  Chip
} from '@mui/material';
import { useTranslation } from 'react-i18next';
import {
  IconCamera,
  IconUpload,
  IconX,
  IconCheck,
  IconUser
} from '@tabler/icons-react';


interface BasicInfoStepProps {
  cardData: any;
  updateCardData: (field: string, value: any) => void; // تغيير النوع
  isMobile: boolean;
}

const BasicInfoStep = ({ cardData, updateCardData, isMobile }: BasicInfoStepProps) => {
  const { t } = useTranslation();
  const theme = useTheme();
  const [dragOver, setDragOver] = useState(false);
  const [imagePreview, setImagePreview] = useState(
    cardData.avatar ? URL.createObjectURL(cardData.avatar) : null
  );

  const handleAvatarUpload = (file: File) => {
    if (file && file.type.startsWith('image/')) {
      updateCardData('avatar', file);
      const preview = URL.createObjectURL(file);
      setImagePreview(preview);
    }
  };

  const handleDrop = (e: React.DragEvent) => {
    e.preventDefault();
    setDragOver(false);
    const files = e.dataTransfer.files;
    if (files.length > 0) {
      handleAvatarUpload(files[0]);
    }
  };

  const handleDragOver = (e: React.DragEvent) => {
    e.preventDefault();
    setDragOver(true);
  };

  const handleDragLeave = () => {
    setDragOver(false);
  };

  const removeAvatar = () => {
    updateCardData('avatar', null);
    setImagePreview(null);
    if (imagePreview) {
      URL.revokeObjectURL(imagePreview);
    }
  };

  const validateField = (field: string, value: string) => {
    switch (field) {
      case 'firstName':
      case 'lastName':
        return value.length >= 2;
      case 'jobTitle':
        return value.length >= 3;
      case 'company':
        return value.length >= 2;
      case 'bio':
        return value.length <= 200;
      default:
        return true;
    }
  };

  const getFieldError = (field: string, value: string) => {
    if (!value) return '';
    
    switch (field) {
      case 'firstName':
      case 'lastName':
        return value.length < 2 ? t('basicInfo.errors.nameShort') : '';
      case 'jobTitle':
        return value.length < 3 ? t('basicInfo.errors.jobTitleShort') : '';
      case 'company':
        return value.length < 2 ? t('basicInfo.errors.companyShort') : '';
      case 'bio':
        return value.length > 200 ? t('basicInfo.errors.bioLong') : '';
      default:
        return '';
    }
  };

  return (
    <Stack spacing={{ xs: 3, md: 4 }}>
      <Typography
        variant={isMobile ? 'h6' : 'h5'}
        sx={{ fontWeight: 600, color: theme.palette.text.primary }}
      >
        {t('basicInfo.title')}
      </Typography>

      <Typography variant="body2" color="text.secondary">
        {t('basicInfo.description')}
      </Typography>

      {/* Avatar Upload Section */}
      <Card
        sx={{
          border: `1px solid ${theme.palette.divider}`,
          borderRadius: 2,
          backgroundColor: theme.palette.grey[50]
        }}
      >
        <CardContent sx={{ p: 3 }}>
          <Stack spacing={3} alignItems="center">
            <Typography variant="h6" fontWeight={600}>
              {t('basicInfo.profilePhoto')}
            </Typography>

            {/* Avatar Display */}
            <Box sx={{ position: 'relative' }}>
              <Avatar
                src={imagePreview || undefined}
                sx={{
                  width: { xs: 120, md: 150 },
                  height: { xs: 120, md: 150 },
                  fontSize: { xs: '2rem', md: '3rem' },
                  backgroundColor: theme.palette.grey[200],
                  border: `4px solid ${theme.palette.background.paper}`,
                  boxShadow: theme.shadows[4]
                }}
              >
                {!imagePreview && (
                  <IconUser size={isMobile ? 48 : 64} color={theme.palette.text.secondary} />
                )}
              </Avatar>

              {/* Upload Button */}
              <IconButton
                component="label"
                sx={{
                  position: 'absolute',
                  bottom: -8,
                  right: -8,
                  backgroundColor: theme.palette.primary.main,
                  color: 'white',
                  width: 40,
                  height: 40,
                  '&:hover': {
                    backgroundColor: theme.palette.primary.dark
                  }
                }}
              >
                <IconCamera size={20} />
                <input
                  type="file"
                  hidden
                  accept="image/*"
                  onChange={(e) => {
                    if (e.target.files?.[0]) {
                      handleAvatarUpload(e.target.files[0]);
                    }
                  }}
                />
              </IconButton>

              {/* Remove Button */}
              {imagePreview && (
                <IconButton
                  onClick={removeAvatar}
                  sx={{
                    position: 'absolute',
                    top: -8,
                    right: -8,
                    backgroundColor: theme.palette.error.main,
                    color: 'white',
                    width: 32,
                    height: 32,
                    '&:hover': {
                      backgroundColor: theme.palette.error.dark
                    }
                  }}
                >
                  <IconX size={16} />
                </IconButton>
              )}
            </Box>

            {/* Drag & Drop Area - Desktop */}
            {!isMobile && (
              <Box
                onDrop={handleDrop}
                onDragOver={handleDragOver}
                onDragLeave={handleDragLeave}
                sx={{
                  width: '100%',
                  maxWidth: 400,
                  height: 120,
                  border: `2px dashed ${dragOver ? theme.palette.primary.main : theme.palette.divider}`,
                  borderRadius: 2,
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center',
                  cursor: 'pointer',
                  transition: 'all 0.2s ease',
                  backgroundColor: dragOver ? theme.palette.primary.light : 'transparent',
                  '&:hover': {
                    borderColor: theme.palette.primary.main,
                    backgroundColor: theme.palette.primary.light
                  }
                }}
                component="label"
              >
                <Stack alignItems="center" spacing={1}>
                  <IconUpload size={32} color={theme.palette.text.secondary} />
                  <Typography variant="body2" color="text.secondary" textAlign="center">
                    {t('basicInfo.dragImage')}
                  </Typography>
                  <Typography variant="caption" color="text.secondary">
                    {t('basicInfo.imageFormats')}
                  </Typography>
                </Stack>
                <input
                  type="file"
                  hidden
                  accept="image/*"
                  onChange={(e) => {
                    if (e.target.files?.[0]) {
                      handleAvatarUpload(e.target.files[0]);
                    }
                  }}
                />
              </Box>
            )}

            <Alert severity="info" sx={{ width: '100%' }}>
              {t('basicInfo.imageRecommendation')}
            </Alert>
          </Stack>
        </CardContent>
      </Card>

      {/* Form Fields */}
      <Grid container spacing={{ xs: 2, md: 3 }}>
        {/* First Name */}
        <Grid size={{ xs: 12, md: 6 }}>
          <TextField
            fullWidth
            label={t('basicInfo.firstName')}
            value={cardData.firstName || ''}
            onChange={(e) => updateCardData('firstName', e.target.value)}
            required
            error={!!getFieldError('firstName', cardData.firstName || '')}
            helperText={getFieldError('firstName', cardData.firstName || '') || t('basicInfo.required')}
            variant="outlined"
            InputProps={{
              endAdornment: validateField('firstName', cardData.firstName || '') && cardData.firstName ? (
                <IconCheck size={20} color={theme.palette.success.main} />
              ) : null
            }}
            sx={{
              '& .MuiOutlinedInput-root': {
                borderRadius: 2
              }
            }}
          />
        </Grid>

        {/* Last Name */}
        <Grid size={{ xs: 12, md: 6 }}>
          <TextField
            fullWidth
            label={t('basicInfo.lastName')}
            value={cardData.lastName || ''}
            onChange={(e) => updateCardData('lastName', e.target.value)}
            required
            error={!!getFieldError('lastName', cardData.lastName || '')}
            helperText={getFieldError('lastName', cardData.lastName || '') || t('basicInfo.required')}
            variant="outlined"
            InputProps={{
              endAdornment: validateField('lastName', cardData.lastName || '') && cardData.lastName ? (
                <IconCheck size={20} color={theme.palette.success.main} />
              ) : null
            }}
            sx={{
              '& .MuiOutlinedInput-root': {
                borderRadius: 2
              }
            }}
          />
        </Grid>

        {/* Job Title */}
        <Grid size={{ xs: 12 }}>
          <TextField
            fullWidth
            label={t('basicInfo.jobTitle')}
            value={cardData.jobTitle || ''}
            onChange={(e) => updateCardData('jobTitle', e.target.value)}
            required
            error={!!getFieldError('jobTitle', cardData.jobTitle || '')}
            helperText={getFieldError('jobTitle', cardData.jobTitle || '') || t('basicInfo.jobTitleHelper')}
            variant="outlined"
            InputProps={{
              endAdornment: validateField('jobTitle', cardData.jobTitle || '') && cardData.jobTitle ? (
                <IconCheck size={20} color={theme.palette.success.main} />
              ) : null
            }}
            sx={{
              '& .MuiOutlinedInput-root': {
                borderRadius: 2
              }
            }}
          />
        </Grid>

        {/* Company */}
        <Grid size={{ xs: 12 }}>
          <TextField
            fullWidth
            label={t('basicInfo.company')}
            value={cardData.company || ''}
            onChange={(e) => updateCardData('company', e.target.value)}
            required
            error={!!getFieldError('company', cardData.company || '')}
            helperText={getFieldError('company', cardData.company || '') || t('basicInfo.companyHelper')}
            variant="outlined"
            InputProps={{
              endAdornment: validateField('company', cardData.company || '') && cardData.company ? (
                <IconCheck size={20} color={theme.palette.success.main} />
              ) : null
            }}
            sx={{
              '& .MuiOutlinedInput-root': {
                borderRadius: 2
              }
            }}
          />
        </Grid>

        {/* Bio */}
        <Grid size={{ xs: 12 }}>
          <TextField
            fullWidth
            multiline
            rows={isMobile ? 4 : 5}
            label={t('basicInfo.bio')}
            value={cardData.bio || ''}
            onChange={(e) => updateCardData('bio', e.target.value)}
            variant="outlined"
            error={!!getFieldError('bio', cardData.bio || '')}
            helperText={
              getFieldError('bio', cardData.bio || '') || 
              `${(cardData.bio || '').length}/200 - ${t('basicInfo.bioHelper')}`
            }
            inputProps={{ maxLength: 200 }}
            sx={{
              '& .MuiOutlinedInput-root': {
                borderRadius: 2
              }
            }}
          />
        </Grid>
      </Grid>

      {/* Preview Card */}
      <Card
        sx={{
          border: `1px solid ${theme.palette.divider}`,
          borderRadius: 2,
          backgroundColor: theme.palette.grey[50]
        }}
      >
        <CardContent sx={{ p: 3 }}>
          <Typography variant="h6" fontWeight={600} sx={{ mb: 2 }}>
            {t('basicInfo.preview')}
          </Typography>
          
          <Stack direction="row" spacing={2} alignItems="center">
            <Avatar
              src={imagePreview || undefined}
              sx={{ width: 60, height: 60 }}
            >
              {!imagePreview && <IconUser size={24} />}
            </Avatar>
            
            <Stack spacing={0.5} sx={{ flex: 1 }}>
              <Typography variant="h6" fontWeight={600}>
                {cardData.firstName || t('basicInfo.firstName')} {cardData.lastName || t('basicInfo.lastName')}
              </Typography>
              <Typography variant="body2" color="text.secondary">
                {cardData.jobTitle || t('basicInfo.jobTitle')}
              </Typography>
              <Typography variant="caption" color="text.secondary">
                {cardData.company || t('basicInfo.company')}
              </Typography>
            </Stack>
            
            <Stack spacing={1}>
              {[
                { field: 'firstName', valid: validateField('firstName', cardData.firstName || '') },
                { field: 'lastName', valid: validateField('lastName', cardData.lastName || '') },
                { field: 'jobTitle', valid: validateField('jobTitle', cardData.jobTitle || '') },
                { field: 'company', valid: validateField('company', cardData.company || '') }
              ].map(({ field, valid }) => (
                <Chip
                  key={field}
                  label={t(`basicInfo.${field}`)}
                  size="small"
                  color={valid && cardData[field] ? 'success' : 'default'}
                  icon={valid && cardData[field] ? <IconCheck size={14} /> : undefined}
                  sx={{ fontSize: '0.7rem', height: 20 }}
                />
              ))}
            </Stack>
          </Stack>

          {cardData.bio && (
            <Typography
              variant="body2"
              sx={{
                mt: 2,
                p: 2,
                backgroundColor: theme.palette.background.paper,
                borderRadius: 1,
                border: `1px solid ${theme.palette.divider}`
              }}
            >
              {cardData.bio}
            </Typography>
          )}
        </CardContent>
      </Card>

      {/* Tips */}
      <Alert severity="info">
        <Typography variant="subtitle2" fontWeight={600} sx={{ mb: 1 }}>
          {t('basicInfo.tips.title')}
        </Typography>
        <Stack spacing={0.5}>
          <Typography variant="body2">• {t('basicInfo.tips.tip1')}</Typography>
          <Typography variant="body2">• {t('basicInfo.tips.tip2')}</Typography>
          <Typography variant="body2">• {t('basicInfo.tips.tip3')}</Typography>
          <Typography variant="body2">• {t('basicInfo.tips.tip4')}</Typography>
        </Stack>
      </Alert>
    </Stack>
  );
};

export default BasicInfoStep;

===== src/views/cards/components/CardPreviewComponent.tsx =====
// src/views/cards/components/CardPreviewComponent.tsx
import {
  Box,
  Card,
  CardContent,
  Typography,
  Avatar,
  Stack,
  IconButton,
  useTheme,
  alpha
} from '@mui/material';
import {
  IconMail,
  IconPhone,
  IconWorld,
  IconMapPin,
  IconBrandLinkedin,
  IconBrandTwitter,
  IconBrandFacebook,
  IconBrandInstagram,
  IconQrcode
} from '@tabler/icons-react';

interface CardPreviewProps {
  cardData: any;
  isPreview: boolean;
  scale?: number;
}

const CardPreviewComponent = ({ cardData, isPreview, scale = 1 }: CardPreviewProps) => {
  const theme = useTheme();

  const getSocialIcon = (platform: string) => {
    switch (platform.toLowerCase()) {
      case 'linkedin': return IconBrandLinkedin;
      case 'twitter': return IconBrandTwitter;
      case 'facebook': return IconBrandFacebook;
      case 'instagram': return IconBrandInstagram;
      default: return IconWorld;
    }
  };

  return (
    <Box
      sx={{
        transform: `scale(${scale})`,
        transformOrigin: 'center',
        width: isPreview ? '100%' : 350,
        maxWidth: '100%'
      }}
    >
      <Card
        sx={{
          borderRadius: 4,
          overflow: 'hidden',
          boxShadow: theme.shadows[8],
          background: `linear-gradient(135deg, ${cardData.primaryColor || theme.palette.primary.main} 0%, ${alpha(cardData.primaryColor || theme.palette.primary.main, 0.8)} 100%)`,
          position: 'relative'
        }}
      >
        {/* Background Pattern */}
        <Box
          sx={{
            position: 'absolute',
            top: 0,
            left: 0,
            right: 0,
            bottom: 0,
            backgroundImage: `radial-gradient(circle at 20% 80%, ${alpha('#ffffff', 0.1)} 0%, transparent 50%),
                             radial-gradient(circle at 80% 20%, ${alpha('#ffffff', 0.1)} 0%, transparent 50%)`,
            pointerEvents: 'none'
          }}
        />

        <CardContent sx={{ p: 3, position: 'relative' }}>
          <Stack spacing={3}>
            {/* Header */}
            <Stack direction="row" justifyContent="space-between" alignItems="flex-start">
              <Stack direction="row" spacing={2} alignItems="center">
                <Avatar
                  src={cardData.avatar ? URL.createObjectURL(cardData.avatar) : undefined}
                  sx={{
                    width: 60,
                    height: 60,
                    border: `3px solid ${alpha('#ffffff', 0.3)}`
                  }}
                >
                  {cardData.firstName?.[0]}{cardData.lastName?.[0]}
                </Avatar>
                
                <Stack spacing={0.5}>
                  <Typography
                    variant="h6"
                    sx={{
                      color: 'white',
                      fontWeight: 700,
                      fontSize: '1.1rem'
                    }}
                  >
                    {cardData.firstName} {cardData.lastName}
                  </Typography>
                  <Typography
                    variant="body2"
                    sx={{
                      color: alpha('#ffffff', 0.9),
                      fontSize: '0.9rem'
                    }}
                  >
                    {cardData.jobTitle}
                  </Typography>
                  <Typography
                    variant="caption"
                    sx={{
                      color: alpha('#ffffff', 0.8),
                      fontSize: '0.8rem'
                    }}
                  >
                    {cardData.company}
                  </Typography>
                </Stack>
              </Stack>

              {cardData.showQR && (
                <IconButton
                  sx={{
                    backgroundColor: alpha('#ffffff', 0.2),
                    color: 'white',
                    '&:hover': {
                      backgroundColor: alpha('#ffffff', 0.3)
                    }
                  }}
                >
                  <IconQrcode size={20} />
                </IconButton>
              )}
            </Stack>

            {/* Bio */}
            {cardData.bio && (
              <Typography
                variant="body2"
                sx={{
                  color: alpha('#ffffff', 0.9),
                  fontSize: '0.85rem',
                  lineHeight: 1.5
                }}
              >
                {cardData.bio}
              </Typography>
            )}

            {/* Contact Info */}
            <Stack spacing={1.5}>
              {cardData.email && (
                <Stack direction="row" spacing={1} alignItems="center">
                  <IconMail size={16} color={alpha('#ffffff', 0.8)} />
                  <Typography
                    variant="body2"
                    sx={{
                      color: alpha('#ffffff', 0.9),
                      fontSize: '0.8rem'
                    }}
                  >
                    {cardData.email}
                  </Typography>
                </Stack>
              )}

              {cardData.phone && (
                <Stack direction="row" spacing={1} alignItems="center">
                  <IconPhone size={16} color={alpha('#ffffff', 0.8)} />
                  <Typography
                    variant="body2"
                    sx={{
                      color: alpha('#ffffff', 0.9),
                      fontSize: '0.8rem'
                    }}
                  >
                    {cardData.phone}
                  </Typography>
                </Stack>
              )}

              {cardData.website && (
                <Stack direction="row" spacing={1} alignItems="center">
                  <IconWorld size={16} color={alpha('#ffffff', 0.8)} />
                  <Typography
                    variant="body2"
                    sx={{
                      color: alpha('#ffffff', 0.9),
                      fontSize: '0.8rem'
                    }}
                  >
                    {cardData.website}
                  </Typography>
                </Stack>
              )}

              {cardData.address && (
                <Stack direction="row" spacing={1} alignItems="center">
                  <IconMapPin size={16} color={alpha('#ffffff', 0.8)} />
                  <Typography
                    variant="body2"
                    sx={{
                      color: alpha('#ffffff', 0.9),
                      fontSize: '0.8rem'
                    }}
                  >
                    {cardData.address}
                  </Typography>
                </Stack>
              )}
            </Stack>

            {/* Social Links */}
            {cardData.socialLinks && cardData.socialLinks.length > 0 && (
              <Stack direction="row" spacing={1} flexWrap="wrap">
                {cardData.socialLinks.map((link: any, index: number) => {
                  const Icon = getSocialIcon(link.platform);
                  return (
                    <IconButton
                      key={index}
                      size="small"
                      sx={{
                        backgroundColor: alpha('#ffffff', 0.2),
                        color: 'white',
                        '&:hover': {
                          backgroundColor: alpha('#ffffff', 0.3)
                        }
                      }}
                    >
                      <Icon size={16} />
                    </IconButton>
                  );
                })}
              </Stack>
            )}
          </Stack>
        </CardContent>
      </Card>
    </Box>
  );
};

export default CardPreviewComponent;

===== src/views/cards/components/ContactInfoForm.tsx =====
// src/views/cards/components/ContactInfoForm.tsx
import React from 'react';
import {
  Stack,
  Typography,
  TextField,
  Grid2 as Grid,
  useTheme,
  InputAdornment,
  IconButton,
  Box,
  Card,
  CardContent,
  Chip
} from '@mui/material';
import { useTranslation } from 'react-i18next';
import {
  IconMail,
  IconPhone,
  IconWorld,
  IconMapPin,
  IconCopy,
  IconCheck
} from '@tabler/icons-react';

interface ContactInfoFormProps {
  cardData: any;
  updateCardData: (field: string, value: any) => void;
  isMobile: boolean;
}

const ContactInfoForm = ({ cardData, updateCardData, isMobile }: ContactInfoFormProps) => {
  const { t } = useTranslation();
  const theme = useTheme();
  const [copiedField, setCopiedField] = React.useState<string | null>(null);

  const handleCopy = (text: string, field: string) => {
    navigator.clipboard.writeText(text);
    setCopiedField(field);
    setTimeout(() => setCopiedField(null), 2000);
  };

  const validateEmail = (email: string) => {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
  };

  const validatePhone = (phone: string) => {
    const phoneRegex = /^[\+]?[1-9][\d]{0,15}$/;
    return phoneRegex.test(phone.replace(/[\s\-\(\)]/g, ''));
  };

  const validateWebsite = (website: string) => {
    try {
      new URL(website.startsWith('http') ? website : `https://${website}`);
      return true;
    } catch {
      return false;
    }
  };

  const contactFields = [
    {
      key: 'email',
      label: t('createCard.contactInfo.email'),
      icon: IconMail,
      type: 'email',
      placeholder: 'example@domain.com',
      validator: validateEmail,
      required: true
    },
    {
      key: 'phone',
      label: t('createCard.contactInfo.phone'),
      icon: IconPhone,
      type: 'tel',
      placeholder: '+966 50 123 4567',
      validator: validatePhone,
      required: false
    },
    {
      key: 'website',
      label: t('createCard.contactInfo.website'),
      icon: IconWorld,
      type: 'url',
      placeholder: 'www.example.com',
      validator: validateWebsite,
      required: false
    },
    {
      key: 'address',
      label: t('createCard.contactInfo.address'),
      icon: IconMapPin,
      type: 'text',
      placeholder: t('createCard.contactInfo.addressPlaceholder'),
      validator: null,
      required: false,
      multiline: true
    }
  ];

  return (
    <Stack spacing={{ xs: 3, md: 4 }}>
      <Typography
        variant={isMobile ? 'h6' : 'h5'}
        sx={{ fontWeight: 600, color: theme.palette.text.primary }}
      >
        {t('createCard.contactInfo.title')}
      </Typography>

      <Typography variant="body2" color="text.secondary">
        {t('createCard.contactInfo.description')}
      </Typography>

      {/* Contact Fields */}
      <Grid container spacing={{ xs: 2, md: 3 }}>
        {contactFields.map((field) => {
          const Icon = field.icon;
          const value = cardData[field.key] || '';
          const isValid = field.validator ? field.validator(value) : true;
          const hasError = value && !isValid;

          return (
            <Grid size={{ xs: 12, md: field.multiline ? 12 : 6 }} key={field.key}>
              <TextField
                fullWidth
                label={field.label}
                type={field.type}
                value={value}
                onChange={(e) => updateCardData(field.key, e.target.value)}
                placeholder={field.placeholder}
                required={field.required}
                multiline={field.multiline}
                rows={field.multiline ? (isMobile ? 3 : 4) : 1}
                error={hasError}
                helperText={
                  hasError
                    ? t(`createCard.contactInfo.${field.key}Error`)
                    : field.required
                    ? t('createCard.contactInfo.required')
                    : ''
                }
                variant="outlined"
                sx={{
                  '& .MuiOutlinedInput-root': {
                    borderRadius: 2
                  }
                }}
                InputProps={{
                  startAdornment: (
                    <InputAdornment position="start">
                      <Icon
                        size={20}
                        color={
                          hasError
                            ? theme.palette.error.main
                            : value && isValid
                            ? theme.palette.success.main
                            : theme.palette.text.secondary
                        }
                      />
                    </InputAdornment>
                  ),
                  endAdornment: value && !field.multiline && (
                    <InputAdornment position="end">
                      <IconButton
                        size="small"
                        onClick={() => handleCopy(value, field.key)}
                        sx={{
                          color: copiedField === field.key
                            ? theme.palette.success.main
                            : theme.palette.text.secondary
                        }}
                      >
                        {copiedField === field.key ? (
                          <IconCheck size={16} />
                        ) : (
                          <IconCopy size={16} />
                        )}
                      </IconButton>
                    </InputAdornment>
                  )
                }}
              />
            </Grid>
          );
        })}
      </Grid>

      {/* Contact Preview Card */}
      <Card
        sx={{
          borderRadius: 2,
          backgroundColor: theme.palette.grey[50],
          border: `1px solid ${theme.palette.divider}`
        }}
      >
        <CardContent sx={{ p: { xs: 2, md: 3 } }}>
          <Stack spacing={2}>
            <Typography variant="subtitle2" fontWeight={600}>
              {t('createCard.contactInfo.preview')}
            </Typography>
            
            <Grid container spacing={2}>
              {contactFields.map((field) => {
                const Icon = field.icon;
                const value = cardData[field.key];
                
                if (!value) return null;

                return (
                  <Grid size={{ xs: 12, sm: 6 }} key={field.key}>
                    <Stack
                      direction="row"
                      spacing={1.5}
                      alignItems="flex-start"
                      sx={{
                        p: 1.5,
                        borderRadius: 2,
                        backgroundColor: 'white',
                        border: `1px solid ${theme.palette.divider}`,
                        transition: 'all 0.2s ease',
                        '&:hover': {
                          boxShadow: theme.shadows[2]
                        }
                      }}
                    >
                      <Icon size={18} color={theme.palette.primary.main} />
                      <Stack spacing={0.5} sx={{ flex: 1, minWidth: 0 }}>
                        <Typography
                          variant="caption"
                          sx={{
                            color: theme.palette.text.secondary,
                            fontSize: '0.7rem',
                            textTransform: 'uppercase',
                            fontWeight: 600
                          }}
                        >
                          {field.label}
                        </Typography>
                        <Typography
                          variant="body2"
                          sx={{
                            color: theme.palette.text.primary,
                            fontSize: '0.85rem',
                            wordBreak: 'break-word',
                            lineHeight: 1.4
                          }}
                        >
                          {value}
                        </Typography>
                      </Stack>
                    </Stack>
                  </Grid>
                );
              })}
            </Grid>

            {/* Validation Status */}
            <Box>
              <Stack direction="row" spacing={1} flexWrap="wrap">
                {contactFields.map((field) => {
                  const value = cardData[field.key];
                  if (!value) return null;

                  const isValid = field.validator ? field.validator(value) : true;
                  
                  return (
                    <Chip
                      key={field.key}
                      label={field.label}
                      size="small"
                      color={isValid ? 'success' : 'error'}
                      variant={isValid ? 'filled' : 'outlined'}
                      icon={isValid ? <IconCheck size={14} /> : undefined}
                      sx={{
                        fontSize: '0.7rem',
                        height: 24
                      }}
                    />
                  );
                })}
              </Stack>
            </Box>
          </Stack>
        </CardContent>
      </Card>

      {/* Tips Card */}
      <Card
        sx={{
          borderRadius: 2,
          backgroundColor: theme.palette.info.light,
          border: `1px solid ${theme.palette.info.main}`
        }}
      >
        <CardContent sx={{ p: { xs: 2, md: 3 } }}>
          <Typography variant="subtitle2" fontWeight={600} sx={{ mb: 1 }}>
            {t('createCard.contactInfo.tips.title')}
          </Typography>
          <Stack spacing={1}>
            <Typography variant="body2" sx={{ fontSize: '0.85rem' }}>
              • {t('createCard.contactInfo.tips.tip1')}
            </Typography>
            <Typography variant="body2" sx={{ fontSize: '0.85rem' }}>
              • {t('createCard.contactInfo.tips.tip2')}
            </Typography>
            <Typography variant="body2" sx={{ fontSize: '0.85rem' }}>
              • {t('createCard.contactInfo.tips.tip3')}
            </Typography>
          </Stack>
        </CardContent>
      </Card>
    </Stack>
  );
};

export default ContactInfoForm;

===== src/views/cards/components/DesignCustomizer.tsx =====
// src/views/cards/components/DesignCustomizer.tsx
import {
  Stack,
  Typography,
  Grid2 as Grid,
  Card,
  Box,
  Button,
  useTheme,
  Slider,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Switch,
  FormControlLabel,
  Divider
} from '@mui/material';
import { useTranslation } from 'react-i18next';
import {
  IconCheck,
  IconRefresh
} from '@tabler/icons-react';

interface DesignCustomizerProps {
  cardData: any;
  updateCardData: (field: string, value: any) => void;
  isMobile: boolean;
}

const DesignCustomizer = ({ cardData, updateCardData, isMobile }: DesignCustomizerProps) => {
  const { t } = useTranslation();
  const theme = useTheme();

  const templates = [
    {
      id: 'modern',
      name: t('createCard.design.templates.modern'),
      preview: '/images/templates/modern.jpg',
      gradient: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)'
    },
    {
      id: 'minimal',
      name: t('createCard.design.templates.minimal'),
      preview: '/images/templates/minimal.jpg',
      gradient: 'linear-gradient(135deg, #f093fb 0%, #f5576c 100%)'
    },
    {
      id: 'professional',
      name: t('createCard.design.templates.professional'),
      preview: '/images/templates/professional.jpg',
      gradient: 'linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)'
    },
    {
      id: 'creative',
      name: t('createCard.design.templates.creative'),
      preview: '/images/templates/creative.jpg',
      gradient: 'linear-gradient(135deg, #43e97b 0%, #38f9d7 100%)'
    },
    {
      id: 'elegant',
      name: t('createCard.design.templates.elegant'),
      preview: '/images/templates/elegant.jpg',
      gradient: 'linear-gradient(135deg, #fa709a 0%, #fee140 100%)'
    },
    {
      id: 'bold',
      name: t('createCard.design.templates.bold'),
      preview: '/images/templates/bold.jpg',
      gradient: 'linear-gradient(135deg, #a8edea 0%, #fed6e3 100%)'
    }
  ];

  const colorPalettes = [
    { name: 'Blue', primary: '#2196F3', secondary: '#1976D2' },
    { name: 'Purple', primary: '#9C27B0', secondary: '#7B1FA2' },
    { name: 'Green', primary: '#4CAF50', secondary: '#388E3C' },
    { name: 'Orange', primary: '#FF9800', secondary: '#F57C00' },
    { name: 'Red', primary: '#F44336', secondary: '#D32F2F' },
    { name: 'Teal', primary: '#009688', secondary: '#00695C' },
    { name: 'Pink', primary: '#E91E63', secondary: '#C2185B' },
    { name: 'Indigo', primary: '#3F51B5', secondary: '#303F9F' }
  ];

  const fonts = [
    { value: 'roboto', label: 'Roboto', preview: 'font-family: Roboto' },
    { value: 'cairo', label: 'Cairo', preview: 'font-family: Cairo' },
    { value: 'opensans', label: 'Open Sans', preview: 'font-family: Open Sans' },
    { value: 'lato', label: 'Lato', preview: 'font-family: Lato' },
    { value: 'montserrat', label: 'Montserrat', preview: 'font-family: Montserrat' },
    { value: 'poppins', label: 'Poppins', preview: 'font-family: Poppins' }
  ];

  return (
    <Stack spacing={{ xs: 3, md: 4 }}>
      <Typography
        variant={isMobile ? 'h6' : 'h5'}
        sx={{ fontWeight: 600, color: theme.palette.text.primary }}
      >
        {t('createCard.design.title')}
      </Typography>

      {/* Template Selection */}
      <Stack spacing={2}>
        <Typography variant="h6" fontWeight={600}>
          {t('createCard.design.selectTemplate')}
        </Typography>
        
        <Grid container spacing={2}>
          {templates.map((template) => (
            <Grid size={{ xs: 6, sm: 4, md: 3 }} key={template.id}>
              <Card
                sx={{
                  cursor: 'pointer',
                  borderRadius: 2,
                  border: cardData.template === template.id
                    ? `2px solid ${theme.palette.primary.main}`
                    : `1px solid ${theme.palette.divider}`,
                  transition: 'all 0.2s ease',
                  '&:hover': {
                    transform: 'translateY(-4px)',
                    boxShadow: theme.shadows[6]
                  }
                }}
                onClick={() => updateCardData('template', template.id)}
              >
                <Box
                  sx={{
                    height: { xs: 80, md: 100 },
                    background: template.gradient,
                    position: 'relative',
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'center'
                  }}
                >
                  {cardData.template === template.id && (
                    <Box
                      sx={{
                        position: 'absolute',
                        top: 8,
                        right: 8,
                        width: 24,
                        height: 24,
                        borderRadius: '50%',
                        backgroundColor: 'white',
                        display: 'flex',
                        alignItems: 'center',
                        justifyContent: 'center'
                      }}
                    >
                      <IconCheck size={16} color={theme.palette.primary.main} />
                    </Box>
                  )}
                  <Typography
                    variant="caption"
                    sx={{
                      color: 'white',
                      fontWeight: 600,
                      textAlign: 'center',
                      fontSize: { xs: '0.7rem', md: '0.75rem' }
                    }}
                  >
                    {template.name}
                  </Typography>
                </Box>
              </Card>
            </Grid>
          ))}
        </Grid>
      </Stack>

      <Divider />

      {/* Color Customization */}
      <Stack spacing={3}>
        <Typography variant="h6" fontWeight={600}>
          {t('createCard.design.colors')}
        </Typography>

        {/* Color Palettes */}
        <Stack spacing={2}>
          <Typography variant="subtitle2" fontWeight={600}>
            {t('createCard.design.colorPalettes')}
          </Typography>
          
          <Grid container spacing={1}>
            {colorPalettes.map((palette, index) => (
              <Grid size={{ xs: 3, sm: 2, md: 1.5 }} key={index}>
                <Box
                  sx={{
                    cursor: 'pointer',
                    borderRadius: 2,
                    overflow: 'hidden',
                    border: cardData.primaryColor === palette.primary
                      ? `3px solid ${theme.palette.text.primary}`
                      : `1px solid ${theme.palette.divider}`,
                    transition: 'all 0.2s ease',
                    '&:hover': {
                      transform: 'scale(1.05)'
                    }
                  }}
                  onClick={() => {
                    updateCardData('primaryColor', palette.primary);
                    updateCardData('secondaryColor', palette.secondary);
                  }}
                >
                  <Box
                    sx={{
                      height: { xs: 40, md: 50 },
                      background: `linear-gradient(135deg, ${palette.primary} 0%, ${palette.secondary} 100%)`
                    }}
                  />
                  <Box sx={{ p: 1, textAlign: 'center' }}>
                    <Typography variant="caption" sx={{ fontSize: '0.7rem' }}>
                      {palette.name}
                    </Typography>
                  </Box>
                </Box>
              </Grid>
            ))}
          </Grid>
        </Stack>

        {/* Custom Colors */}
        <Grid container spacing={3}>
          <Grid size={{ xs: 12, md: 6 }}>
            <Stack spacing={1}>
              <Typography variant="subtitle2" fontWeight={600}>
                {t('createCard.design.primaryColor')}
              </Typography>
              <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
                <input
                  type="color"
                  value={cardData.primaryColor}
                  onChange={(e) => updateCardData('primaryColor', e.target.value)}
                  style={{
                    width: 50,
                    height: 40,
                    border: 'none',
                    borderRadius: 8,
                    cursor: 'pointer'
                  }}
                />
                <Typography variant="body2" sx={{ fontFamily: 'monospace' }}>
                  {cardData.primaryColor}
                </Typography>
              </Box>
            </Stack>
          </Grid>

          <Grid size={{ xs: 12, md: 6 }}>
            <Stack spacing={1}>
              <Typography variant="subtitle2" fontWeight={600}>
                {t('createCard.design.backgroundColor')}
              </Typography>
              <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
                <input
                  type="color"
                  value={cardData.backgroundColor}
                  onChange={(e) => updateCardData('backgroundColor', e.target.value)}
                  style={{
                    width: 50,
                    height: 40,
                    border: 'none',
                    borderRadius: 8,
                    cursor: 'pointer'
                  }}
                />
                <Typography variant="body2" sx={{ fontFamily: 'monospace' }}>
                  {cardData.backgroundColor}
                </Typography>
              </Box>
            </Stack>
          </Grid>
        </Grid>
      </Stack>

      <Divider />

      {/* Typography */}
      <Stack spacing={3}>
        <Typography variant="h6" fontWeight={600}>
          {t('createCard.design.typography')}
        </Typography>

        <Grid container spacing={3}>
          <Grid size={{ xs: 12, md: 6 }}>
            <FormControl fullWidth>
              <InputLabel>{t('createCard.design.fontFamily')}</InputLabel>
              <Select
                value={cardData.fontFamily || 'roboto'}
                label={t('createCard.design.fontFamily')}
                onChange={(e) => updateCardData('fontFamily', e.target.value)}
                sx={{ borderRadius: 2 }}
              >
                {fonts.map((font) => (
                  <MenuItem key={font.value} value={font.value}>
                    <Typography sx={{ fontFamily: font.label }}>
                      {font.label}
                    </Typography>
                  </MenuItem>
                ))}
              </Select>
            </FormControl>
          </Grid>

          <Grid size={{ xs: 12, md: 6 }}>
            <Stack spacing={1}>
              <Typography variant="subtitle2" fontWeight={600}>
                {t('createCard.design.fontSize')} ({cardData.fontSize || 16}px)
              </Typography>
              <Slider
                value={cardData.fontSize || 16}
                onChange={(_, value) => updateCardData('fontSize', value)}
                min={12}
                max={24}
                step={1}
                marks={[
                  { value: 12, label: '12px' },
                  { value: 16, label: '16px' },
                  { value: 20, label: '20px' },
                  { value: 24, label: '24px' }
                ]}
                sx={{
                  '& .MuiSlider-thumb': {
                    backgroundColor: cardData.primaryColor
                  },
                  '& .MuiSlider-track': {
                    backgroundColor: cardData.primaryColor
                  }
                }}
              />
            </Stack>
          </Grid>
        </Grid>
      </Stack>

      <Divider />

      {/* Advanced Settings */}
      <Stack spacing={3}>
        <Typography variant="h6" fontWeight={600}>
          {t('createCard.design.advanced')}
        </Typography>

        <Grid container spacing={3}>
          <Grid size={{ xs: 12, md: 6 }}>
            <Stack spacing={2}>
              <FormControlLabel
                control={
                  <Switch
                    checked={cardData.showShadow || false}
                    onChange={(e) => updateCardData('showShadow', e.target.checked)}
                  />
                }
                label={t('createCard.design.cardShadow')}
              />
              
              <FormControlLabel
                control={
                  <Switch
                    checked={cardData.showBorder || false}
                    onChange={(e) => updateCardData('showBorder', e.target.checked)}
                  />
                }
                label={t('createCard.design.cardBorder')}
              />
              
              <FormControlLabel
                control={
                  <Switch
                    checked={cardData.showPattern || false}
                    onChange={(e) => updateCardData('showPattern', e.target.checked)}
                  />
                }
                label={t('createCard.design.backgroundPattern')}
              />
            </Stack>
          </Grid>

          <Grid size={{ xs: 12, md: 6 }}>
            <Stack spacing={2}>
              <Stack spacing={1}>
                <Typography variant="subtitle2" fontWeight={600}>
                  {t('createCard.design.borderRadius')} ({cardData.borderRadius || 16}px)
                </Typography>
                <Slider
                  value={cardData.borderRadius || 16}
                  onChange={(_, value) => updateCardData('borderRadius', value)}
                  min={0}
                  max={32}
                  step={2}
                  marks={[
                    { value: 0, label: '0' },
                    { value: 16, label: '16' },
                    { value: 32, label: '32' }
                  ]}
                />
              </Stack>

              <Stack spacing={1}>
                <Typography variant="subtitle2" fontWeight={600}>
                  {t('createCard.design.opacity')} ({Math.round((cardData.opacity || 1) * 100)}%)
                </Typography>
                <Slider
                  value={cardData.opacity || 1}
                  onChange={(_, value) => updateCardData('opacity', value)}
                  min={0.5}
                  max={1}
                  step={0.1}
                  marks={[
                    { value: 0.5, label: '50%' },
                    { value: 0.75, label: '75%' },
                    { value: 1, label: '100%' }
                  ]}
                />
              </Stack>
            </Stack>
          </Grid>
        </Grid>
      </Stack>

      {/* Reset Button */}
      <Box sx={{ pt: 2 }}>
        <Button
          variant="outlined"
          startIcon={<IconRefresh />}
          onClick={() => {
            updateCardData('template', 'modern');
            updateCardData('primaryColor', theme.palette.primary.main);
            updateCardData('backgroundColor', '#ffffff');
            updateCardData('fontFamily', 'roboto');
            updateCardData('fontSize', 16);
            updateCardData('borderRadius', 16);
            updateCardData('opacity', 1);
            updateCardData('showShadow', false);
            updateCardData('showBorder', false);
            updateCardData('showPattern', false);
          }}
          sx={{
            borderRadius: 2,
            px: 3
          }}
        >
          {t('createCard.design.resetToDefault')}
        </Button>
      </Box>
    </Stack>
  );
};

export default DesignCustomizer;

===== src/views/cards/components/SocialLinksManager.tsx =====
// src/views/cards/components/SocialLinksManager.tsx
import {
  Stack,
  Typography,
  Button,
  TextField,
  Select,
  MenuItem,
  FormControl,
  InputLabel,
  IconButton,
  Card,
  CardContent,
  Grid2 as Grid,
  useTheme,
  Box,
  Avatar
} from '@mui/material';
import { useTranslation } from 'react-i18next';
import {
  IconPlus,
  IconTrash,
  IconBrandLinkedin,
  IconBrandTwitter,
  IconBrandFacebook,
  IconBrandInstagram,
  IconBrandYoutube,
  IconBrandTiktok,
  IconWorld
} from '@tabler/icons-react';

interface SocialLinksManagerProps {
  socialLinks: Array<{id: string, platform: string, url: string}>;
  updateSocialLinks: (links: Array<{id: string, platform: string, url: string}>) => void;
  isMobile: boolean;
}

const SocialLinksManager = ({ socialLinks, updateSocialLinks, isMobile }: SocialLinksManagerProps) => {
  const { t } = useTranslation();
  const theme = useTheme();

  const platforms = [
    { value: 'linkedin', label: 'LinkedIn', icon: IconBrandLinkedin, color: '#0077B5' },
    { value: 'twitter', label: 'Twitter', icon: IconBrandTwitter, color: '#1DA1F2' },
    { value: 'facebook', label: 'Facebook', icon: IconBrandFacebook, color: '#1877F2' },
    { value: 'instagram', label: 'Instagram', icon: IconBrandInstagram, color: '#E4405F' },
    { value: 'youtube', label: 'YouTube', icon: IconBrandYoutube, color: '#FF0000' },
    { value: 'tiktok', label: 'TikTok', icon: IconBrandTiktok, color: '#000000' },
    { value: 'website', label: 'Website', icon: IconWorld, color: '#666666' }
  ];

  const addSocialLink = () => {
    const newLink = {
      id: Date.now().toString(),
      platform: 'linkedin',
      url: ''
    };
    updateSocialLinks([...socialLinks, newLink]);
  };

  const removeSocialLink = (id: string) => {
    updateSocialLinks(socialLinks.filter(link => link.id !== id));
  };

  const updateSocialLink = (id: string, field: string, value: string) => {
    updateSocialLinks(
      socialLinks.map(link =>
        link.id === id ? { ...link, [field]: value } : link
      )
    );
  };

  const getPlatformIcon = (platform: string) => {
    const platformData = platforms.find(p => p.value === platform);
    return platformData ? platformData.icon : IconWorld;
  };

  const getPlatformColor = (platform: string) => {
    const platformData = platforms.find(p => p.value === platform);
    return platformData ? platformData.color : '#666666';
  };

  return (
    <Stack spacing={{ xs: 3, md: 4 }}>
      <Stack
        direction="row"
        justifyContent="space-between"
        alignItems="center"
        spacing={2}
      >
        <Typography
          variant={isMobile ? 'h6' : 'h5'}
          sx={{ fontWeight: 600, color: theme.palette.text.primary }}
        >
          {t('createCard.socialLinks.title')}
        </Typography>
        
        <Button
          variant="contained"
          startIcon={<IconPlus />}
          onClick={addSocialLink}
          size={isMobile ? 'small' : 'medium'}
          sx={{ borderRadius: 2 }}
        >
          {isMobile ? t('createCard.socialLinks.add') : t('createCard.socialLinks.addLink')}
        </Button>
      </Stack>

      <Typography variant="body2" color="text.secondary">
        {t('createCard.socialLinks.description')}
      </Typography>

      {socialLinks.length === 0 ? (
        <Card
          sx={{
            borderRadius: 2,
            border: `2px dashed ${theme.palette.divider}`,
            backgroundColor: theme.palette.grey[50]
          }}
        >
          <CardContent sx={{ p: { xs: 3, md: 4 }, textAlign: 'center' }}>
            <Stack spacing={2} alignItems="center">
              <Box
                sx={{
                  width: 60,
                  height: 60,
                  borderRadius: '50%',
                  backgroundColor: theme.palette.grey[200],
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center'
                }}
              >
                <IconPlus size={24} color={theme.palette.text.secondary} />
              </Box>
              <Typography variant="h6" color="text.secondary">
                {t('createCard.socialLinks.noLinks')}
              </Typography>
              <Typography variant="body2" color="text.secondary">
                {t('createCard.socialLinks.noLinksDescription')}
              </Typography>
              <Button
                variant="contained"
                startIcon={<IconPlus />}
                onClick={addSocialLink}
                sx={{ borderRadius: 2 }}
              >
                {t('createCard.socialLinks.addFirst')}
              </Button>
            </Stack>
          </CardContent>
        </Card>
      ) : (
        <Stack spacing={2}>
          {socialLinks.map((link, _index) => {
            const Icon = getPlatformIcon(link.platform);
            const color = getPlatformColor(link.platform);
            
            return (
              <Card
                key={link.id}
                sx={{
                  borderRadius: 2,
                  border: `1px solid ${theme.palette.divider}`,
                  transition: 'all 0.2s ease',
                  '&:hover': {
                    boxShadow: theme.shadows[3]
                  }
                }}
              >
                <CardContent sx={{ p: { xs: 2, md: 3 } }}>
                  <Grid container spacing={2} alignItems="center">
                    {/* Platform Icon */}
                    <Grid size={{ xs: 2, sm: 1 }}>
                      <Avatar
                        sx={{
                          backgroundColor: `${color}20`,
                          color: color,
                          width: { xs: 40, md: 48 },
                          height: { xs: 40, md: 48 }
                        }}
                      >
                        <Icon size={isMobile ? 20 : 24} />
                      </Avatar>
                    </Grid>

                    {/* Platform Selection */}
                    <Grid size={{ xs: 10, sm: isMobile ? 4 : 3 }}>
                      <FormControl fullWidth size={isMobile ? 'small' : 'medium'}>
                        <InputLabel>{t('createCard.socialLinks.platform')}</InputLabel>
                        <Select
                          value={link.platform}
                          label={t('createCard.socialLinks.platform')}
                          onChange={(e) => updateSocialLink(link.id, 'platform', e.target.value)}
                          sx={{
                            borderRadius: 2,
                            '& .MuiSelect-select': {
                              display: 'flex',
                              alignItems: 'center',
                              gap: 1
                            }
                          }}
                        >
                          {platforms.map((platform) => {
                            const PlatformIcon = platform.icon;
                            return (
                              <MenuItem key={platform.value} value={platform.value}>
                                <Stack direction="row" alignItems="center" spacing={1}>
                                  <PlatformIcon size={16} color={platform.color} />
                                  <Typography>{platform.label}</Typography>
                                </Stack>
                              </MenuItem>
                            );
                          })}
                        </Select>
                      </FormControl>
                    </Grid>

                    {/* URL Input */}
                    <Grid size={{ xs: 12, sm: isMobile ? 6 : 7 }}>
                      <TextField
                        fullWidth
                        label={t('createCard.socialLinks.url')}
                        value={link.url}
                        onChange={(e) => updateSocialLink(link.id, 'url', e.target.value)}
                        placeholder={`https://...`}
                        size={isMobile ? 'small' : 'medium'}
                        sx={{
                          '& .MuiOutlinedInput-root': {
                            borderRadius: 2
                          }
                        }}
                      />
                    </Grid>

                    {/* Delete Button */}
                    <Grid size={{ xs: 12, sm: 1 }}>
                      <IconButton
                        onClick={() => removeSocialLink(link.id)}
                        color="error"
                        size={isMobile ? 'small' : 'medium'}
                        sx={{
                          width: '100%',
                          borderRadius: 2,
                          border: `1px solid ${theme.palette.error.light}`,
                          '&:hover': {
                            backgroundColor: theme.palette.error.light
                          }
                        }}
                      >
                        <IconTrash size={isMobile ? 16 : 20} />
                      </IconButton>
                    </Grid>
                  </Grid>
                </CardContent>
              </Card>
            );
          })}
        </Stack>
      )}

      {/* Popular Platforms Quick Add */}
      {socialLinks.length > 0 && (
        <Card
          sx={{
            borderRadius: 2,
            backgroundColor: theme.palette.grey[50],
            border: `1px solid ${theme.palette.divider}`
          }}
        >
          <CardContent sx={{ p: { xs: 2, md: 3 } }}>
            <Typography variant="subtitle2" sx={{ mb: 2, fontWeight: 600 }}>
              {t('createCard.socialLinks.quickAdd')}
            </Typography>
            <Stack direction="row" spacing={1} flexWrap="wrap">
              {platforms.slice(0, 4).map((platform) => {
                const Icon = platform.icon;
                const isAdded = socialLinks.some(link => link.platform === platform.value);
                
                return (
                  <Button
                    key={platform.value}
                    variant={isAdded ? 'contained' : 'outlined'}
                    startIcon={<Icon size={16} />}
                    onClick={() => {
                      if (!isAdded) {
                        const newLink = {
                          id: Date.now().toString(),
                          platform: platform.value,
                          url: ''
                        };
                        updateSocialLinks([...socialLinks, newLink]);
                      }
                    }}
                    disabled={isAdded}
                    size="small"
                    sx={{
                      borderRadius: 2,
                      mb: 1,
                      backgroundColor: isAdded ? platform.color : 'transparent',
                      borderColor: platform.color,
                      color: isAdded ? 'white' : platform.color,
                      '&:hover': {
                        backgroundColor: isAdded ? platform.color : `${platform.color}20`
                      }
                    }}
                  >
                    {platform.label}
                  </Button>
                );
              })}
            </Stack>
          </CardContent>
        </Card>
      )}
    </Stack>
  );
};

export default SocialLinksManager;

===== src/views/cards/CreateCard.tsx =====
// src/views/cards/CreateCard.tsx
import React, { useState } from 'react';
import {
  Box,
  Grid2 as Grid,
  Card,
  CardContent,
  Typography,
  TextField,
  Button,
  Stack,
  Avatar,
  IconButton,
  Switch,
  FormControlLabel,
  useTheme,
  useMediaQuery,
  Stepper,
  Step,
  StepLabel,
  Paper,
  Alert
} from '@mui/material';
import { useTranslation } from 'react-i18next';
import {
  IconCamera,
  IconArrowLeft,
  IconArrowRight,
  IconCheck,
  IconUpload} from '@tabler/icons-react';
import PageContainer from 'src/components/container/PageContainer';
import CardPreviewComponent from './components/CardPreviewComponent';
import SocialLinksManager from './components/SocialLinksManager';
import ContactInfoForm from './components/ContactInfoForm';
import DesignCustomizer from './components/DesignCustomizer';

const CreateCard = () => {
  const { t } = useTranslation();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));

  const [activeStep, setActiveStep] = useState(0);
  const [cardData, setCardData] = useState({
    // Basic Info
    firstName: '',
    lastName: '',
    jobTitle: '',
    company: '',
    bio: '',
    avatar: null as File | null,
    
    // Contact Info
    email: '',
    phone: '',
    website: '',
    address: '',
    
    // Social Links
    socialLinks: [] as Array<{id: string, platform: string, url: string}>,
    
    // Design
    template: 'modern',
    primaryColor: theme.palette.primary.main,
    backgroundColor: '#ffffff',
    textColor: '#000000',
    
    // Settings
    isPublic: true,
    allowDownload: true,
    showQR: true
  });

  const steps = [
    t('createCard.steps.basicInfo'),
    t('createCard.steps.contactInfo'),
    t('createCard.steps.socialLinks'),
    t('createCard.steps.design'),
    t('createCard.steps.preview')
  ];

  const handleNext = () => {
    setActiveStep((prevStep) => prevStep + 1);
  };

  const handleBack = () => {
    setActiveStep((prevStep) => prevStep - 1);
  };

  const handleSave = async () => {
    try {
      console.log('Saving card:', cardData);
      // API call here
      // navigate('/dashboard/cards');
    } catch (error) {
      console.error('Error saving card:', error);
    }
  };

  const updateCardData = (field: string, value: any) => {
    setCardData(prev => ({
      ...prev,
      [field]: value
    }));
  };

const renderStepContent = () => {
  switch (activeStep) {
    case 0:
      return (
        <BasicInfoStep
          cardData={cardData}
          updateCardData={updateCardData}
          isMobile={isMobile}
        />
      );
    case 1:
      return (
        <ContactInfoForm
          cardData={cardData}
          updateCardData={updateCardData}
          isMobile={isMobile}
        />
      );
    case 2:
      return (
        <SocialLinksManager
          socialLinks={cardData.socialLinks}
          updateSocialLinks={(links) => updateCardData('socialLinks', links)}
          isMobile={isMobile}
        />
      );
    case 3:
      return (
        <DesignCustomizer
          cardData={cardData}
          updateCardData={updateCardData}
          isMobile={isMobile}
        />
      );
    case 4:
      return (
        <PreviewStep
          cardData={cardData}
          updateCardData={updateCardData} // إضافة هذا السطر
          isMobile={isMobile}
        />
      );
    default:
      return null;
  }
};

  return (
    <PageContainer title={t('createCard.title')} description={t('createCard.description')}>
      <Box sx={{ pb: { xs: 2, md: 4 } }}>
        {/* Header */}
        <Stack
          direction="row"
          justifyContent="space-between"
          alignItems="center"
          sx={{ mb: { xs: 2, md: 3 } }}
        >
          <Typography
            variant={isMobile ? 'h5' : 'h4'}
            sx={{
              fontWeight: 700,
              color: theme.palette.text.primary
            }}
          >
            {t('createCard.title')}
          </Typography>
          
          <Button
            variant="outlined"
            startIcon={<IconArrowLeft />}
            href="/dashboard/cards"
            sx={{
              borderRadius: 2,
              px: { xs: 2, md: 3 }
            }}
          >
            {isMobile ? t('common.back') : t('createCard.backToCards')}
          </Button>
        </Stack>

        {/* Stepper - Desktop */}
        {!isMobile && (
          <Paper
            sx={{
              p: 3,
              mb: 3,
              borderRadius: 3,
              border: `1px solid ${theme.palette.divider}`
            }}
          >
            <Stepper activeStep={activeStep} alternativeLabel>
              {steps.map((label) => (
                <Step key={label}>
                  <StepLabel>{label}</StepLabel>
                </Step>
              ))}
            </Stepper>
          </Paper>
        )}

        {/* Mobile Progress */}
        {isMobile && (
          <Card sx={{ mb: 2, borderRadius: 2 }}>
            <CardContent sx={{ p: 2 }}>
              <Stack spacing={1}>
                <Stack direction="row" justifyContent="space-between" alignItems="center">
                  <Typography variant="body2" color="text.secondary">
                    {t('createCard.step')} {activeStep + 1} {t('createCard.of')} {steps.length}
                  </Typography>
                  <Typography variant="body2" color="primary">
                    {Math.round(((activeStep + 1) / steps.length) * 100)}%
                  </Typography>
                </Stack>
                <Box
                  sx={{
                    width: '100%',
                    height: 4,
                    backgroundColor: theme.palette.grey[200],
                    borderRadius: 2,
                    overflow: 'hidden'
                  }}
                >
                  <Box
                    sx={{
                      width: `${((activeStep + 1) / steps.length) * 100}%`,
                      height: '100%',
                      backgroundColor: theme.palette.primary.main,
                      transition: 'width 0.3s ease'
                    }}
                  />
                </Box>
                <Typography variant="body2" fontWeight={600}>
                  {steps[activeStep]}
                </Typography>
              </Stack>
            </CardContent>
          </Card>
        )}

        {/* Main Content */}
        <Grid container spacing={{ xs: 2, md: 3 }}>
          {/* Form Section */}
          <Grid size={{ xs: 12, lg: 8 }}>
            <Card
              sx={{
                borderRadius: { xs: 2, md: 3 },
                border: `1px solid ${theme.palette.divider}`,
                minHeight: { xs: 'auto', md: '600px' }
              }}
            >
              <CardContent sx={{ p: { xs: 2, md: 4 } }}>
                {renderStepContent()}
              </CardContent>
            </Card>
          </Grid>

          {/* Preview Section - Desktop */}
          {!isMobile && (
            <Grid size={{ xs: 12, lg: 4 }}>
              <Card
                sx={{
                  borderRadius: 3,
                  border: `1px solid ${theme.palette.divider}`,
                  position: 'sticky',
                  top: 20
                }}
              >
                <CardContent sx={{ p: 3 }}>
                  <Stack spacing={2}>
                    <Typography variant="h6" fontWeight={600}>
                      {t('createCard.livePreview')}
                    </Typography>
                    <CardPreviewComponent
                      cardData={cardData}
                      isPreview={true}
                    />
                  </Stack>
                </CardContent>
              </Card>
            </Grid>
          )}
        </Grid>

        {/* Navigation Buttons */}
        <Paper
          sx={{
            p: { xs: 2, md: 3 },
            mt: { xs: 2, md: 3 },
            borderRadius: { xs: 2, md: 3 },
            border: `1px solid ${theme.palette.divider}`
          }}
        >
          <Stack
            direction="row"
            justifyContent="space-between"
            alignItems="center"
            spacing={2}
          >
            <Button
              variant="outlined"
              startIcon={<IconArrowLeft />}
              onClick={handleBack}
              disabled={activeStep === 0}
              sx={{
                borderRadius: 2,
                px: { xs: 2, md: 4 }
              }}
            >
              {t('common.previous')}
            </Button>

            <Stack direction="row" spacing={2}>
              {/* Save Draft - Mobile */}
              {isMobile && (
                <Button
                  variant="outlined"
                  size="small"
                  sx={{ borderRadius: 2 }}
                >
                  {t('createCard.saveDraft')}
                </Button>
              )}

              {activeStep === steps.length - 1 ? (
                <Button
                  variant="contained"
                  startIcon={<IconCheck />}
                  onClick={handleSave}
                  sx={{
                    borderRadius: 2,
                    px: { xs: 3, md: 4 }
                  }}
                >
                  {t('createCard.createCard')}
                </Button>
              ) : (
                <Button
                  variant="contained"
                  endIcon={<IconArrowRight />}
                  onClick={handleNext}
                  sx={{
                    borderRadius: 2,
                    px: { xs: 3, md: 4 }
                  }}
                >
                  {t('common.next')}
                </Button>
              )}
            </Stack>
          </Stack>
        </Paper>
      </Box>
    </PageContainer>
  );
};

// Basic Info Step Component
const BasicInfoStep = ({ cardData, updateCardData, isMobile }: any) => {
  const { t } = useTranslation();
  const theme = useTheme();
  const [dragOver, setDragOver] = useState(false);

  const handleAvatarUpload = (file: File) => {
    updateCardData('avatar', file);
  };

  const handleDrop = (e: React.DragEvent) => {
    e.preventDefault();
    setDragOver(false);
    const files = e.dataTransfer.files;
    if (files.length > 0) {
      handleAvatarUpload(files[0]);
    }
  };

  return (
    <Stack spacing={{ xs: 3, md: 4 }}>
      <Typography
        variant={isMobile ? 'h6' : 'h5'}
        sx={{ fontWeight: 600, color: theme.palette.text.primary }}
      >
        {t('createCard.basicInfo.title')}
      </Typography>

      {/* Avatar Upload */}
      <Stack spacing={2} alignItems="center">
        <Box
          sx={{
            position: 'relative',
            width: { xs: 100, md: 120 },
            height: { xs: 100, md: 120 }
          }}
        >
          <Avatar
            src={cardData.avatar ? URL.createObjectURL(cardData.avatar) : undefined}
            sx={{
              width: '100%',
              height: '100%',
              fontSize: { xs: '2rem', md: '2.5rem' },
              backgroundColor: theme.palette.grey[200]
            }}
          >
            {!cardData.avatar && (
              <IconCamera size={isMobile ? 24 : 32} color={theme.palette.text.secondary} />
            )}
          </Avatar>
          
          <IconButton
            component="label"
            sx={{
              position: 'absolute',
              bottom: -8,
              right: -8,
              backgroundColor: theme.palette.primary.main,
              color: 'white',
              '&:hover': {
                backgroundColor: theme.palette.primary.dark
              }
            }}
          >
            <IconUpload size={16} />
            <input
              type="file"
              hidden
              accept="image/*"
              onChange={(e) => {
                if (e.target.files?.[0]) {
                  handleAvatarUpload(e.target.files[0]);
                }
              }}
            />
          </IconButton>
        </Box>

        {/* Drag & Drop Area - Desktop */}
        {!isMobile && (
          <Box
            onDrop={handleDrop}
            onDragOver={(e) => {
              e.preventDefault();
              setDragOver(true);
            }}
            onDragLeave={() => setDragOver(false)}
            sx={{
              width: '100%',
              maxWidth: 300,
              height: 100,
              border: `2px dashed ${dragOver ? theme.palette.primary.main : theme.palette.divider}`,
              borderRadius: 2,
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
              cursor: 'pointer',
              transition: 'all 0.2s ease',
              backgroundColor: dragOver ? theme.palette.primary.light : 'transparent'
            }}
          >
            <Stack alignItems="center" spacing={1}>
              <IconUpload size={24} color={theme.palette.text.secondary} />
              <Typography variant="body2" color="text.secondary" textAlign="center">
                {t('createCard.basicInfo.dragImage')}
              </Typography>
            </Stack>
          </Box>
        )}
      </Stack>

      {/* Form Fields */}
      <Grid container spacing={{ xs: 2, md: 3 }}>
        <Grid size={{ xs: 12, md: 6 }}>
          <TextField
            fullWidth
            label={t('createCard.basicInfo.firstName')}
            value={cardData.firstName}
            onChange={(e) => updateCardData('firstName', e.target.value)}
            variant="outlined"
            sx={{
              '& .MuiOutlinedInput-root': {
                borderRadius: 2
              }
            }}
          />
        </Grid>
        
        <Grid size={{ xs: 12, md: 6 }}>
          <TextField
            fullWidth
            label={t('createCard.basicInfo.lastName')}
            value={cardData.lastName}
            onChange={(e) => updateCardData('lastName', e.target.value)}
            variant="outlined"
            sx={{
              '& .MuiOutlinedInput-root': {
                borderRadius: 2
              }
            }}
          />
        </Grid>

        <Grid size={{ xs: 12 }}>
          <TextField
            fullWidth
            label={t('createCard.basicInfo.jobTitle')}
            value={cardData.jobTitle}
            onChange={(e) => updateCardData('jobTitle', e.target.value)}
            variant="outlined"
            sx={{
              '& .MuiOutlinedInput-root': {
                borderRadius: 2
              }
            }}
          />
        </Grid>

        <Grid size={{ xs: 12 }}>
          <TextField
            fullWidth
            label={t('createCard.basicInfo.company')}
            value={cardData.company}
            onChange={(e) => updateCardData('company', e.target.value)}
            variant="outlined"
            sx={{
              '& .MuiOutlinedInput-root': {
                borderRadius: 2
              }
            }}
          />
        </Grid>

        <Grid size={{ xs: 12 }}>
          <TextField
            fullWidth
            multiline
            rows={isMobile ? 3 : 4}
            label={t('createCard.basicInfo.bio')}
            value={cardData.bio}
            onChange={(e) => updateCardData('bio', e.target.value)}
            variant="outlined"
            helperText={`${cardData.bio.length}/200`}
            inputProps={{ maxLength: 200 }}
            sx={{
              '& .MuiOutlinedInput-root': {
                borderRadius: 2
              }
            }}
          />
        </Grid>
      </Grid>
    </Stack>
  );
};

interface PreviewStepProps {
  cardData: any;
  updateCardData: (field: string, value: any) => void; // إضافة هذا السطر
  isMobile: boolean;
}

// Preview Step Component
const PreviewStep = ({ cardData, updateCardData, isMobile }: PreviewStepProps) => {
  const { t } = useTranslation();
  const theme = useTheme();

  return (
    <Stack spacing={{ xs: 3, md: 4 }}>
      <Typography
        variant={isMobile ? 'h6' : 'h5'}
        sx={{ fontWeight: 600, color: theme.palette.text.primary }}
      >
        {t('createCard.preview.title')}
      </Typography>

      <Alert severity="info" sx={{ borderRadius: 2 }}>
        {t('createCard.preview.description')}
      </Alert>

      {/* Card Preview */}
      <Box
        sx={{
          display: 'flex',
          justifyContent: 'center',
          p: { xs: 2, md: 4 },
          backgroundColor: theme.palette.grey[50],
          borderRadius: 3,
          border: `1px solid ${theme.palette.divider}`
        }}
      >
        <CardPreviewComponent
          cardData={cardData}
          isPreview={false}
          scale={isMobile ? 0.8 : 1}
        />
      </Box>

      {/* Settings */}
      <Stack spacing={2}>
        <Typography variant="h6" fontWeight={600}>
          {t('createCard.preview.settings')}
        </Typography>
        
        <Stack spacing={2}>
          <FormControlLabel
            control={
              <Switch
                checked={cardData.isPublic}
                onChange={(e) => updateCardData('isPublic', e.target.checked)}
              />
            }
            label={t('createCard.preview.makePublic')}
          />
          
          <FormControlLabel
            control={
              <Switch
                checked={cardData.allowDownload}
                onChange={(e) => updateCardData('allowDownload', e.target.checked)}
              />
            }
            label={t('createCard.preview.allowDownload')}
          />
          
          <FormControlLabel
            control={
              <Switch
                checked={cardData.showQR}
                onChange={(e) => updateCardData('showQR', e.target.checked)}
              />
            }
            label={t('createCard.preview.showQR')}
          />
        </Stack>
      </Stack>
    </Stack>
  );
};

export default CreateCard;

===== src/views/cards/EditCard.tsx =====
// src/views/cards/EditCard.tsx
import { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router';
import {
  Box,
  Container,
  Grid2 as Grid,
  Card,
  CardContent,
  Typography,
  Button,
  Stack,
  Alert,
  CircularProgress,
  useTheme,
  useMediaQuery,
  Stepper,
  Step,
  StepLabel,
  Paper,
  Chip,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Fab,
  Snackbar,
  Breadcrumbs,
  Link,
  Switch,
  FormControlLabel
} from '@mui/material';
import { useTranslation } from 'react-i18next';
import {
  IconArrowLeft,
  IconDeviceFloppy, // استبدال IconSave
  IconTrash,
  IconEye,
  IconCopy,
  IconEdit,
  IconRefresh} from '@tabler/icons-react';
import PageContainer from 'src/components/container/PageContainer';
import BasicInfoStep from './components/BasicInfoStep';
import ContactInfoForm from './components/ContactInfoForm';
import SocialLinksManager from './components/SocialLinksManager';
import DesignCustomizer from './components/DesignCustomizer';
import CardPreviewComponent from './components/CardPreviewComponent';

// تعريف نوع البيانات
interface CardData {
  id: string | undefined;
  firstName: string;
  lastName: string;
  jobTitle: string;
  company: string;
  bio: string;
  avatar: File | null;
  email: string;
  phone: string;
  website: string;
  address: string;
  socialLinks: Array<{
    id: string;
    platform: string;
    url: string;
  }>;
  template: string;
  primaryColor: string;
  backgroundColor: string;
  textColor: string;
  fontFamily: string;
  fontSize: number;
  borderRadius: number;
  showShadow: boolean;
  showBorder: boolean;
  showPattern: boolean;
  opacity: number;
  isPublic: boolean;
  allowDownload: boolean;
  showQR: boolean;
  status: string;
  createdAt: string;
  updatedAt: string;
  views: number;
  shares: number;
}

type AlertSeverity = 'success' | 'error' | 'warning' | 'info';

const EditCard = () => {
  const { id } = useParams();
  const navigate = useNavigate();
  const { t } = useTranslation();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));

  const [loading, setLoading] = useState(true);
  const [saving, setSaving] = useState(false);
  const [cardData, setCardData] = useState<CardData | null>(null);
  const [originalData, setOriginalData] = useState<CardData | null>(null);
  const [hasChanges, setHasChanges] = useState(false);
  const [activeTab, setActiveTab] = useState(0);
  const [deleteDialog, setDeleteDialog] = useState(false);
  const [discardDialog, setDiscardDialog] = useState(false);
  const [snackbar, setSnackbar] = useState<{ 
    open: boolean; 
    message: string; 
    severity: AlertSeverity 
  }>({ 
    open: false, 
    message: '', 
    severity: 'success' 
  });
  const [lastSaved, setLastSaved] = useState<Date | null>(null);

  const tabs = [
    { label: t('editCard.tabs.basicInfo'), icon: IconEdit },
    { label: t('editCard.tabs.contact'), icon: IconEdit },
    { label: t('editCard.tabs.social'), icon: IconEdit },
    { label: t('editCard.tabs.design'), icon: IconEdit },
    { label: t('editCard.tabs.preview'), icon: IconEye }
  ];

  useEffect(() => {
    loadCardData();
  }, [id]);

  useEffect(() => {
    if (cardData && originalData) {
      const hasChanged = JSON.stringify(cardData) !== JSON.stringify(originalData);
      setHasChanges(hasChanged);
    }
  }, [cardData, originalData]);

  const loadCardData = async () => {
    try {
      setLoading(true);
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      const mockCardData: CardData = {
        id: id,
        firstName: 'أحمد',
        lastName: 'محمد',
        jobTitle: 'مطور تطبيقات محترف',
        company: 'شركة التقنية المتقدمة',
        bio: 'مطور تطبيقات محترف مع خبرة 5 سنوات في تطوير التطبيقات المحمولة والويب. متخصص في React Native و Flutter.',
        avatar: null,
        email: 'ahmed.mohammed@techcompany.com',
        phone: '+966501234567',
        website: 'https://ahmed-dev.com',
        address: 'الرياض، المملكة العربية السعودية',
        socialLinks: [
          { id: '1', platform: 'linkedin', url: 'https://linkedin.com/in/ahmed-mohammed' },
          { id: '2', platform: 'twitter', url: 'https://twitter.com/ahmed_dev' },
          { id: '3', platform: 'github', url: 'https://github.com/ahmed-mohammed' }
        ],
        template: 'modern',
        primaryColor: theme.palette.primary.main,
        backgroundColor: '#ffffff',
        textColor: '#000000',
        fontFamily: 'roboto',
        fontSize: 16,
        borderRadius: 16,
        showShadow: true,
        showBorder: false,
        showPattern: true,
        opacity: 1,
        isPublic: true,
        allowDownload: true,
        showQR: true,
        status: 'active',
        createdAt: '2024-01-15',
        updatedAt: '2024-01-20',
        views: 1234,
        shares: 89
      };
      
      setCardData(mockCardData);
      setOriginalData(JSON.parse(JSON.stringify(mockCardData)));
      setLastSaved(new Date(mockCardData.updatedAt));
    } catch (error) {
      console.error('Failed to load card data:', error);
      setSnackbar({
        open: true,
        message: t('editCard.errors.loadFailed'),
        severity: 'error'
      });
    } finally {
      setLoading(false);
    }
  };

const updateCardData = (field: string, value: any) => {
  setCardData(prev => prev ? ({
    ...prev,
    [field]: value
  }) : null);
};

  const handleSave = async () => {
    try {
      setSaving(true);
      await new Promise(resolve => setTimeout(resolve, 1500));
      
      if (cardData) {
        setOriginalData(JSON.parse(JSON.stringify(cardData)));
        setLastSaved(new Date());
        setSnackbar({
          open: true,
          message: t('editCard.success.saved'),
          severity: 'success'
        });
      }
    } catch (error) {
      console.error('Failed to save card:', error);
      setSnackbar({
        open: true,
        message: t('editCard.errors.saveFailed'),
        severity: 'error'
      });
    } finally {
      setSaving(false);
    }
  };

  const handleDiscard = () => {
    if (originalData) {
      setCardData(JSON.parse(JSON.stringify(originalData)));
      setDiscardDialog(false);
      setSnackbar({
        open: true,
        message: t('editCard.success.discarded'),
        severity: 'info'
      });
    }
  };

  const handleDelete = async () => {
    try {
      await new Promise(resolve => setTimeout(resolve, 1000));
      setDeleteDialog(false);
      navigate('/dashboard/cards');
      setSnackbar({
        open: true,
        message: t('editCard.success.deleted'),
        severity: 'success'
      });
    } catch (error) {
      console.error('Failed to delete card:', error);
      setSnackbar({
        open: true,
        message: t('editCard.errors.deleteFailed'),
        severity: 'error'
      });
    }
  };

  const handleCopyLink = async () => {
    try {
      await navigator.clipboard.writeText(`https://mazyone.com/card/${id}`);
      setSnackbar({
        open: true,
        message: t('editCard.success.linkCopied'),
        severity: 'success'
      });
    } catch (error) {
      console.error('Failed to copy link:', error);
    }
  };

  const renderTabContent = () => {
    if (!cardData) return null;

    switch (activeTab) {
      case 0:
        return (
          <BasicInfoStep
            cardData={cardData}
            updateCardData={updateCardData}
            isMobile={isMobile}
          />
        );
      case 1:
        return (
          <ContactInfoForm
            cardData={cardData}
            updateCardData={updateCardData}
            isMobile={isMobile}
          />
        );
      case 2:
        return (
          <SocialLinksManager
            socialLinks={cardData.socialLinks}
            updateSocialLinks={(links) => updateCardData('socialLinks', links)}
            isMobile={isMobile}
          />
        );
      case 3:
        return (
          <DesignCustomizer
            cardData={cardData}
            updateCardData={updateCardData}
            isMobile={isMobile}
          />
        );
      case 4:
        return (
          <PreviewTab
            cardData={cardData}
            updateCardData={updateCardData}
            isMobile={isMobile}
          />
        );
      default:
        return null;
    }
  };

  if (loading) {
    return (
      <PageContainer title={t('editCard.title')} description={t('editCard.description')}>
        <Container maxWidth="xl">
          <Box
            sx={{
              display: 'flex',
              justifyContent: 'center',
              alignItems: 'center',
              minHeight: '60vh'
            }}
          >
            <Stack alignItems="center" spacing={3}>
              <CircularProgress size={64} thickness={4} />
              <Typography variant="h6" color="text.secondary">
                {t('editCard.loading')}
              </Typography>
              <Typography variant="body2" color="text.secondary">
                {t('editCard.loadingDescription')}
              </Typography>
            </Stack>
          </Box>
        </Container>
      </PageContainer>
    );
  }

  if (!cardData) {
    return (
      <PageContainer title={t('editCard.title')} description={t('editCard.description')}>
        <Container maxWidth="xl">
          <Stack spacing={3} alignItems="center" sx={{ mt: 6 }}>
            <Alert severity="error" sx={{ maxWidth: 600 }}>
              <Typography variant="h6" sx={{ mb: 1 }}>
                {t('editCard.errors.notFound')}
              </Typography>
              <Typography variant="body2">
                {t('editCard.errors.notFoundDescription')}
              </Typography>
            </Alert>
            <Button
              variant="contained"
              onClick={() => navigate('/dashboard/cards')}
              sx={{ borderRadius: 2 }}
            >
              {t('editCard.backToCards')}
            </Button>
          </Stack>
        </Container>
      </PageContainer>
    );
  }

  return (
    <PageContainer title={t('editCard.title')} description={t('editCard.description')}>
      <Container maxWidth="xl">
        {/* Breadcrumbs */}
        <Breadcrumbs sx={{ mb: 2 }}>
          <Link
            component="button"
            variant="body2"
            onClick={() => navigate('/dashboard')}
            sx={{ textDecoration: 'none' }}
          >
            {t('common.dashboard')}
          </Link>
          <Link
            component="button"
            variant="body2"
            onClick={() => navigate('/dashboard/cards')}
            sx={{ textDecoration: 'none' }}
          >
            {t('common.cards')}
          </Link>
          <Typography variant="body2" color="text.primary">
            {cardData.firstName} {cardData.lastName}
          </Typography>
        </Breadcrumbs>

        {/* Header */}
        <Paper
          sx={{
            p: { xs: 2, md: 3 },
            mb: 3,
            borderRadius: 3,
            border: `1px solid ${theme.palette.divider}`
          }}
        >
          <Stack
            direction={{ xs: 'column', md: 'row' }}
            justifyContent="space-between"
            alignItems={{ xs: 'stretch', md: 'center' }}
            spacing={2}
          >
            <Stack spacing={2}>
              <Stack direction="row" spacing={2} alignItems="center">
                <Button
                  variant="outlined"
                  startIcon={<IconArrowLeft />}
                  onClick={() => {
                    if (hasChanges) {
                      setDiscardDialog(true);
                    } else {
                      navigate('/dashboard/cards');
                    }
                  }}
                  sx={{ borderRadius: 2 }}
                >
                  {t('common.back')}
                </Button>
                <Typography
                  variant={isMobile ? 'h5' : 'h4'}
                  sx={{ fontWeight: 700, color: theme.palette.text.primary }}
                >
                  {t('editCard.editCard')}
                </Typography>
                <Chip
                  label={t(`cards.${cardData.status}`)}
                  color={cardData.status === 'active' ? 'success' : 'warning'}
                  size="small"
                />
              </Stack>

              <Stack direction="row" spacing={3} alignItems="center">
                <Typography variant="body2" color="text.secondary">
                  {t('editCard.lastSaved')}: {lastSaved?.toLocaleString()}
                </Typography>
                <Typography variant="body2" color="text.secondary">
                  {cardData.views} {t('cards.views')} • {cardData.shares} {t('cards.shares')}
                </Typography>
              </Stack>
            </Stack>

            <Stack direction={{ xs: 'column', sm: 'row' }} spacing={2}>
              {hasChanges && (
                <Alert severity="warning" sx={{ py: 0, px: 2 }}>
                  <Typography variant="body2">
                    {t('editCard.unsavedChanges')}
                  </Typography>
                </Alert>
              )}

              <Stack direction="row" spacing={1}>
                <Button
                  variant="outlined"
                  startIcon={<IconEye />}
                  onClick={() => navigate(`/dashboard/cards/preview/${id}`)}
                  sx={{ borderRadius: 2 }}
                >
                  {isMobile ? t('common.preview') : t('editCard.preview')}
                </Button>

                <Button
                  variant="outlined"
                  startIcon={<IconCopy />}
                  onClick={handleCopyLink}
                  sx={{ borderRadius: 2 }}
                >
                  {isMobile ? t('common.copy') : t('editCard.copyLink')}
                </Button>

                <Button
                  variant="contained"
                  startIcon={saving ? <CircularProgress size={16} color="inherit" /> : <IconDeviceFloppy />}
                  onClick={handleSave}
                  disabled={saving || !hasChanges}
                  sx={{ borderRadius: 2 }}
                >
                  {saving ? t('editCard.saving') : t('editCard.save')}
                </Button>
              </Stack>
            </Stack>
          </Stack>
        </Paper>

        {/* Stepper - Desktop */}
        {!isMobile && (
          <Paper
            sx={{
              p: 3,
              mb: 3,
              borderRadius: 3,
              border: `1px solid ${theme.palette.divider}`
            }}
          >
            <Stepper activeStep={activeTab} alternativeLabel>
              {tabs.map((tab, index) => (
                <Step key={index} completed={false}>
                  <StepLabel
                    onClick={() => setActiveTab(index)}
                    sx={{
                      cursor: 'pointer',
                      '& .MuiStepLabel-label': {
                        fontWeight: activeTab === index ? 600 : 400
                      }
                    }}
                  >
                    {tab.label}
                  </StepLabel>
                </Step>
              ))}
            </Stepper>
          </Paper>
        )}

        {/* Mobile Tab Navigation */}
        {isMobile && (
          <Paper
            sx={{
              mb: 2,
              borderRadius: 2,
              border: `1px solid ${theme.palette.divider}`
            }}
          >
            <Stack direction="row" sx={{ overflowX: 'auto', p: 1 }}>
              {tabs.map((tab, index) => (
                <Button
                  key={index}
                  variant={activeTab === index ? 'contained' : 'text'}
                  onClick={() => setActiveTab(index)}
                  size="small"
                  sx={{
                    minWidth: 'auto',
                    borderRadius: 2,
                    mx: 0.5,
                    whiteSpace: 'nowrap'
                  }}
                >
                  {tab.label}
                </Button>
              ))}
            </Stack>
          </Paper>
        )}

        {/* Main Content */}
        <Grid container spacing={3}>
          {/* Form Section */}
          <Grid size={{ xs: 12, lg: 8 }}>
            <Card
              sx={{
                borderRadius: 3,
                border: `1px solid ${theme.palette.divider}`,
                minHeight: 600
              }}
            >
              <CardContent sx={{ p: { xs: 2, md: 4 } }}>
                {renderTabContent()}
              </CardContent>
            </Card>
          </Grid>

          {/* Preview Section - Desktop */}
          {!isMobile && activeTab !== 4 && (
            <Grid size={{ xs: 12, lg: 4 }}>
              <Card
                sx={{
                  borderRadius: 3,
                  border: `1px solid ${theme.palette.divider}`,
                  position: 'sticky',
                  top: 20
                }}
              >
                <CardContent sx={{ p: 3 }}>
                  <Stack spacing={2}>
                    <Typography variant="h6" fontWeight={600}>
                      {t('editCard.livePreview')}
                    </Typography>
                    <CardPreviewComponent
                      cardData={cardData}
                      isPreview={true}
                      scale={0.8}
                    />
                  </Stack>
                </CardContent>
              </Card>
            </Grid>
          )}
        </Grid>

        {/* Navigation Buttons */}
        <Paper
          sx={{
            p: { xs: 2, md: 3 },
            mt: 3,
            borderRadius: 3,
            border: `1px solid ${theme.palette.divider}`
          }}
        >
          <Stack
            direction="row"
            justifyContent="space-between"
            alignItems="center"
          >
            <Button
              variant="outlined"
              onClick={() => setActiveTab(Math.max(0, activeTab - 1))}
              disabled={activeTab === 0}
              sx={{ borderRadius: 2 }}
            >
              {t('common.previous')}
            </Button>

            <Stack direction="row" spacing={2}>
              {hasChanges && (
                <Button
                  variant="outlined"
                  startIcon={<IconRefresh />}
                  onClick={() => setDiscardDialog(true)}
                  sx={{ borderRadius: 2 }}
                >
                  {t('editCard.discardChanges')}
                </Button>
              )}

              <Button
                variant="outlined"
                color="error"
                startIcon={<IconTrash />}
                onClick={() => setDeleteDialog(true)}
                sx={{ borderRadius: 2 }}
              >
                {t('editCard.deleteCard')}
              </Button>
            </Stack>

            <Button
              variant="contained"
              onClick={() => setActiveTab(Math.min(tabs.length - 1, activeTab + 1))}
              disabled={activeTab === tabs.length - 1}
              sx={{ borderRadius: 2 }}
            >
              {t('common.next')}
            </Button>
          </Stack>
        </Paper>

        {/* Floating Save Button - Mobile */}
        {isMobile && hasChanges && (
          <Fab
            color="primary"
            onClick={handleSave}
            disabled={saving}
            sx={{
              position: 'fixed',
              bottom: 24,
              right: 24,
              zIndex: 1000
            }}
          >
            {saving ? <CircularProgress size={24} color="inherit" /> : <IconDeviceFloppy />}
          </Fab>
        )}

        {/* Delete Confirmation Dialog */}
        <Dialog
          open={deleteDialog}
          onClose={() => setDeleteDialog(false)}
          maxWidth="sm"
          fullWidth
        >
          <DialogTitle>
            {t('editCard.deleteConfirmTitle')}
          </DialogTitle>
          <DialogContent>
            <Alert severity="error" sx={{ mb: 2 }}>
              {t('editCard.deleteWarning')}
            </Alert>
            <Typography>
              {t('editCard.deleteConfirmMessage', { 
                cardName: `${cardData.firstName} ${cardData.lastName}` 
              })}
            </Typography>
          </DialogContent>
          <DialogActions>
            <Button onClick={() => setDeleteDialog(false)}>
              {t('common.cancel')}
            </Button>
            <Button
              variant="contained"
              color="error"
              onClick={handleDelete}
            >
              {t('editCard.confirmDelete')}
            </Button>
          </DialogActions>
        </Dialog>

        {/* Discard Changes Dialog */}
        <Dialog
          open={discardDialog}
          onClose={() => setDiscardDialog(false)}
          maxWidth="sm"
          fullWidth
        >
          <DialogTitle>
            {t('editCard.discardTitle')}
          </DialogTitle>
          <DialogContent>
            <Typography>
              {t('editCard.discardMessage')}
            </Typography>
          </DialogContent>
          <DialogActions>
            <Button onClick={() => setDiscardDialog(false)}>
              {t('common.cancel')}
            </Button>
            <Button
              variant="contained"
              color="warning"
              onClick={handleDiscard}
            >
              {t('editCard.confirmDiscard')}
            </Button>
          </DialogActions>
        </Dialog>

        {/* Snackbar */}
        <Snackbar
          open={snackbar.open}
          autoHideDuration={6000}
          onClose={() => setSnackbar(prev => ({ ...prev, open: false }))}
          anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}
        >
          <Alert
            onClose={() => setSnackbar(prev => ({ ...prev, open: false }))}
            severity={snackbar.severity}
            sx={{ width: '100%' }}
          >
            {snackbar.message}
          </Alert>
        </Snackbar>
      </Container>
    </PageContainer>
  );
};

// Preview Tab Component
interface PreviewTabProps {
  cardData: CardData;
  updateCardData: (field: keyof CardData, value: any) => void;
  isMobile: boolean;
}

const PreviewTab = ({ cardData, updateCardData, isMobile }: PreviewTabProps) => {
  const { t } = useTranslation();
  const theme = useTheme();

  return (
    <Stack spacing={4}>
      <Typography
        variant={isMobile ? 'h6' : 'h5'}
        sx={{ fontWeight: 600, color: theme.palette.text.primary }}
      >
        {t('editCard.finalPreview')}
      </Typography>

      <Alert severity="info">
        {t('editCard.previewDescription')}
      </Alert>

      <Box
        sx={{
          display: 'flex',
          justifyContent: 'center',
          p: { xs: 2, md: 4 },
          backgroundColor: theme.palette.grey[50],
          borderRadius: 3,
          border: `1px solid ${theme.palette.divider}`
        }}
      >
        <CardPreviewComponent
          cardData={cardData}
          isPreview={false}
          scale={isMobile ? 0.9 : 1}
        />
      </Box>

      <Grid container spacing={3}>
        <Grid size={{ xs: 12, md: 6 }}>
          <Stack spacing={2}>
            <Typography variant="h6" fontWeight={600}>
              {t('editCard.cardSettings')}
            </Typography>
            
            <Stack spacing={2}>
              <FormControlLabel
                control={
                  <Switch
                    checked={cardData.isPublic}
                    onChange={(e) => updateCardData('isPublic', e.target.checked)}
                  />
                }
                label={t('editCard.makePublic')}
              />
              
              <FormControlLabel
                control={
                  <Switch
                    checked={cardData.allowDownload}
                    onChange={(e) => updateCardData('allowDownload', e.target.checked)}
                  />
                }
                label={t('editCard.allowDownload')}
              />
              
              <FormControlLabel
                control={
                  <Switch
                    checked={cardData.showQR}
                    onChange={(e) => updateCardData('showQR', e.target.checked)}
                  />
                }
                label={t('editCard.showQR')}
              />
            </Stack>
          </Stack>
        </Grid>

        <Grid size={{ xs: 12, md: 6 }}>
          <Stack spacing={2}>
            <Typography variant="h6" fontWeight={600}>
              {t('editCard.cardStats')}
            </Typography>
            
            <Stack spacing={2}>
              <Stack direction="row" justifyContent="space-between">
                <Typography variant="body2" color="text.secondary">
                  {t('editCard.totalViews')}:
                </Typography>
                <Typography variant="body2" fontWeight={600}>
                  {cardData.views?.toLocaleString()}
                </Typography>
              </Stack>

              <Stack direction="row" justifyContent="space-between">
                <Typography variant="body2" color="text.secondary">
                  {t('editCard.totalShares')}:
                </Typography>
                <Typography variant="body2" fontWeight={600}>
                  {cardData.shares?.toLocaleString()}
                </Typography>
              </Stack>

              <Stack direction="row" justifyContent="space-between">
                <Typography variant="body2" color="text.secondary">
                  {t('editCard.created')}:
                </Typography>
                <Typography variant="body2" fontWeight={600}>
                  {new Date(cardData.createdAt).toLocaleDateString()}
                </Typography>
              </Stack>

              <Stack direction="row" justifyContent="space-between">
                <Typography variant="body2" color="text.secondary">
                  {t('editCard.lastUpdated')}:
                </Typography>
                <Typography variant="body2" fontWeight={600}>
                  {new Date(cardData.updatedAt).toLocaleDateString()}
                </Typography>
              </Stack>
            </Stack>
          </Stack>
        </Grid>
      </Grid>
    </Stack>
  );
};

export default EditCard;

===== src/views/cards/MyCards.tsx =====
// src/views/cards/MyCards.tsx
import React, { useState } from 'react';
import {
  Box,
  Container,
  Grid2 as Grid,
  Card,
  CardContent,
  Typography,
  Button,
  Stack,
  Avatar,
  Chip,
  IconButton,
  Menu,
  MenuItem,
  TextField,
  InputAdornment,
  FormControl,
  InputLabel,
  Select,
  useTheme,
  useMediaQuery,
  Fab,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Alert,
  Skeleton
} from '@mui/material';
import { useTranslation } from 'react-i18next';
import {
  IconPlus,
  IconSearch,
  IconEye,
  IconEdit,
  IconShare,
  IconTrash,
  IconQrcode,
  IconCopy,
  IconDots,
  IconDownload,
  IconCheck,
  IconX
} from '@tabler/icons-react';
import PageContainer from 'src/components/container/PageContainer';
import DashboardCard from '../dashboard/components/DashboardCard';

const MyCards = () => {
  const { t } = useTranslation();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));

  const [searchTerm, setSearchTerm] = useState('');
  const [statusFilter, setStatusFilter] = useState('all');
  const [viewMode, setViewMode] = useState<'grid' | 'list'>('grid');
  const [selectedCard, setSelectedCard] = useState<any>(null);
  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);
  const [deleteDialog, setDeleteDialog] = useState(false);
  const [shareDialog, setShareDialog] = useState(false);
  const [loading, setLoading] = useState(false);

  // بيانات وهمية للبطاقات
  const [cards, setCards] = useState([
    {
      id: 1,
      name: 'بطاقة العمل الرئيسية',
      avatar: '/images/avatars/user1.jpg',
      views: 1234,
      shares: 89,
      qrScans: 456,
      status: 'active',
      lastUpdated: '2024-01-15',
      template: 'modern',
      isPublic: true,
      qrCode: 'https://api.qrserver.com/v1/create-qr-code/?size=200x200&data=https://mazyone.com/card/1'
    },
    {
      id: 2,
      name: 'بطاقة المشاريع',
      avatar: '/images/avatars/user2.jpg',
      views: 567,
      shares: 34,
      qrScans: 123,
      status: 'active',
      lastUpdated: '2024-01-10',
      template: 'creative',
      isPublic: false,
      qrCode: 'https://api.qrserver.com/v1/create-qr-code/?size=200x200&data=https://mazyone.com/card/2'
    },
    {
      id: 3,
      name: 'بطاقة شخصية',
      avatar: '/images/avatars/user3.jpg',
      views: 234,
      shares: 12,
      qrScans: 67,
      status: 'draft',
      lastUpdated: '2024-01-08',
      template: 'minimal',
      isPublic: true,
      qrCode: 'https://api.qrserver.com/v1/create-qr-code/?size=200x200&data=https://mazyone.com/card/3'
    }
  ]);

  const filteredCards = cards.filter(card => {
    const matchesSearch = card.name.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesStatus = statusFilter === 'all' || card.status === statusFilter;
    return matchesSearch && matchesStatus;
  });

  const handleMenuClick = (event: React.MouseEvent<HTMLElement>, card: any) => {
    setAnchorEl(event.currentTarget);
    setSelectedCard(card);
  };

  const handleMenuClose = () => {
    setAnchorEl(null);
    setSelectedCard(null);
  };

  const handleCopyQR = async (qrCode: string) => {
    try {
      await navigator.clipboard.writeText(qrCode);
      // إشعار نجاح
    } catch (error) {
      console.error('Failed to copy QR code');
    }
  };

  const handleDeleteCard = async () => {
    if (selectedCard) {
      setLoading(true);
      try {
        // API call to delete card
        setCards(cards.filter(card => card.id !== selectedCard.id));
        setDeleteDialog(false);
        handleMenuClose();
      } catch (error) {
        console.error('Failed to delete card');
      } finally {
        setLoading(false);
      }
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'active': return 'success';
      case 'draft': return 'warning';
      case 'inactive': return 'default';
      default: return 'default';
    }
  };

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'active': return <IconCheck size={14} />;
      case 'draft': return <IconEdit size={14} />;
      case 'inactive': return <IconX size={14} />;
      default: return undefined;
    }
  };

  if (loading && cards.length === 0) {
    return (
      <PageContainer title={t('cards.title')} description={t('cards.description')}>
        <Container maxWidth="xl">
          <Grid container spacing={3}>
            {[...Array(6)].map((_, index) => (
              <Grid size={{ xs: 12, sm: 6, md: 4, lg: 3 }} key={index}>
                <Card sx={{ borderRadius: 3 }}>
                  <CardContent>
                    <Stack spacing={2}>
                      <Skeleton variant="circular" width={60} height={60} />
                      <Skeleton variant="text" width="80%" height={24} />
                      <Skeleton variant="text" width="60%" height={20} />
                      <Stack direction="row" spacing={1}>
                        <Skeleton variant="rectangular" width={60} height={20} />
                        <Skeleton variant="rectangular" width={60} height={20} />
                      </Stack>
                    </Stack>
                  </CardContent>
                </Card>
              </Grid>
            ))}
          </Grid>
        </Container>
      </PageContainer>
    );
  }

  return (
    <PageContainer title={t('cards.title')} description={t('cards.description')}>
      <Container maxWidth="xl">
        {/* Header */}
        <Stack
          direction={{ xs: 'column', md: 'row' }}
          justifyContent="space-between"
          alignItems={{ xs: 'stretch', md: 'center' }}
          spacing={2}
          sx={{ mb: 3 }}
        >
          <Typography
            variant={isMobile ? 'h5' : 'h4'}
            sx={{
              fontWeight: 700,
              color: theme.palette.text.primary
            }}
          >
            {t('cards.myCards')}
          </Typography>

          {!isMobile && (
            <Button
              variant="contained"
              startIcon={<IconPlus />}
              href="/dashboard/cards/create"
              sx={{
                borderRadius: 2,
                px: 3,
                py: 1.5
              }}
            >
              {t('cards.createNew')}
            </Button>
          )}
        </Stack>

        {/* Filters and Search */}
        <DashboardCard sx={{ mb: 3 }}>
          <CardContent sx={{ p: { xs: 2, md: 3 } }}>
            <Grid container spacing={2} alignItems="center">
              {/* Search */}
              <Grid size={{ xs: 12, md: 6 }}>
                <TextField
                  fullWidth
                  placeholder={t('cards.searchPlaceholder')}
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  InputProps={{
                    startAdornment: (
                      <InputAdornment position="start">
                        <IconSearch size={20} />
                      </InputAdornment>
                    )
                  }}
                  sx={{
                    '& .MuiOutlinedInput-root': {
                      borderRadius: 2
                    }
                  }}
                />
              </Grid>

              {/* Status Filter */}
              <Grid size={{ xs: 12, sm: 6, md: 3 }}>
                <FormControl fullWidth>
                  <InputLabel>{t('cards.status')}</InputLabel>
                  <Select
                    value={statusFilter}
                    label={t('cards.status')}
                    onChange={(e) => setStatusFilter(e.target.value)}
                    sx={{ borderRadius: 2 }}
                  >
                    <MenuItem value="all">{t('cards.allStatus')}</MenuItem>
                    <MenuItem value="active">{t('cards.active')}</MenuItem>
                    <MenuItem value="draft">{t('cards.draft')}</MenuItem>
                    <MenuItem value="inactive">{t('cards.inactive')}</MenuItem>
                  </Select>
                </FormControl>
              </Grid>

              {/* View Mode Toggle */}
              <Grid size={{ xs: 12, sm: 6, md: 3 }}>
                <Stack direction="row" spacing={1}>
                  <Button
                    variant={viewMode === 'grid' ? 'contained' : 'outlined'}
                    onClick={() => setViewMode('grid')}
                    size="small"
                    sx={{ borderRadius: 2 }}
                  >
                    {t('cards.gridView')}
                  </Button>
                  <Button
                    variant={viewMode === 'list' ? 'contained' : 'outlined'}
                    onClick={() => setViewMode('list')}
                    size="small"
                    sx={{ borderRadius: 2 }}
                  >
                    {t('cards.listView')}
                  </Button>
                </Stack>
              </Grid>
            </Grid>
          </CardContent>
        </DashboardCard>

        {/* Cards Display */}
        {filteredCards.length === 0 ? (
          <DashboardCard>
            <CardContent sx={{ p: { xs: 3, md: 6 }, textAlign: 'center' }}>
              <Stack spacing={3} alignItems="center">
                <Box
                  sx={{
                    width: 120,
                    height: 120,
                    borderRadius: '50%',
                    backgroundColor: theme.palette.grey[100],
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'center'
                  }}
                >
                  <IconPlus size={48} color={theme.palette.text.secondary} />
                </Box>
                
                <Typography variant="h6" color="text.secondary">
                  {searchTerm || statusFilter !== 'all' 
                    ? t('cards.noCardsFound')
                    : t('cards.noCards')
                  }
                </Typography>
                
                <Typography variant="body2" color="text.secondary" sx={{ maxWidth: 400 }}>
                  {searchTerm || statusFilter !== 'all'
                    ? t('cards.noCardsFoundDescription')
                    : t('cards.noCardsDescription')
                  }
                </Typography>
                
                <Button
                  variant="contained"
                  startIcon={<IconPlus />}
                  href="/dashboard/cards/create"
                  sx={{ borderRadius: 2, px: 4 }}
                >
                  {t('cards.createFirstCard')}
                </Button>
              </Stack>
            </CardContent>
          </DashboardCard>
        ) : (
          <Grid container spacing={3}>
            {filteredCards.map((card) => (
              <Grid 
                size={{ 
                  xs: 12, 
                  sm: viewMode === 'grid' ? 6 : 12, 
                  md: viewMode === 'grid' ? 4 : 12,
                  lg: viewMode === 'grid' ? 3 : 12
                }} 
                key={card.id}
              >
                <Card
                  sx={{
                    borderRadius: 3,
                    border: `1px solid ${theme.palette.divider}`,
                    transition: 'all 0.2s ease-in-out',
                    '&:hover': {
                      boxShadow: theme.shadows[6],
                      transform: 'translateY(-4px)'
                    }
                  }}
                >
                  <CardContent sx={{ p: { xs: 2, md: 3 } }}>
                    {viewMode === 'grid' ? (
                      <Stack spacing={2}>
                        {/* Card Header */}
                        <Stack direction="row" justifyContent="space-between" alignItems="flex-start">
                          <Avatar
                            src={card.avatar}
                            sx={{
                              width: { xs: 50, md: 60 },
                              height: { xs: 50, md: 60 }
                            }}
                          />
                          <IconButton
                            size="small"
                            onClick={(e) => handleMenuClick(e, card)}
                          >
                            <IconDots size={16} />
                          </IconButton>
                        </Stack>

                        {/* Card Info */}
                        <Stack spacing={1}>
                          <Typography
                            variant="h6"
                            sx={{
                              fontWeight: 600,
                              fontSize: { xs: '1rem', md: '1.1rem' },
                              overflow: 'hidden',
                              textOverflow: 'ellipsis',
                              whiteSpace: 'nowrap'
                            }}
                          >
                            {card.name}
                          </Typography>
                          
                          <Stack direction="row" spacing={1} alignItems="center">
                            <Chip
                              label={t(`cards.${card.status}`)}
                              color={getStatusColor(card.status)}
                              size="small"
                              sx={{ height: 24, fontSize: '0.75rem' }}
                              {...(getStatusIcon(card.status) !== null && getStatusIcon(card.status) !== undefined ? { icon: getStatusIcon(card.status) } : {})}
                            />
                            <Typography variant="caption" color="text.secondary">
                              {card.template}
                            </Typography>
                          </Stack>
                        </Stack>

                        {/* Stats */}
                        <Grid container spacing={1}>
                          <Grid size={4}>
                            <Stack alignItems="center" spacing={0.5}>
                              <IconEye size={16} color={theme.palette.text.secondary} />
                              <Typography variant="caption" fontWeight={600}>
                                {card.views}
                              </Typography>
                              <Typography variant="caption" color="text.secondary" sx={{ fontSize: '0.65rem' }}>
                                {t('cards.views')}
                              </Typography>
                            </Stack>
                          </Grid>
                          <Grid size={4}>
                            <Stack alignItems="center" spacing={0.5}>
                              <IconShare size={16} color={theme.palette.text.secondary} />
                              <Typography variant="caption" fontWeight={600}>
                                {card.shares}
                              </Typography>
                              <Typography variant="caption" color="text.secondary" sx={{ fontSize: '0.65rem' }}>
                                {t('cards.shares')}
                              </Typography>
                            </Stack>
                          </Grid>
                          <Grid size={4}>
                            <Stack alignItems="center" spacing={0.5}>
                              <IconQrcode size={16} color={theme.palette.text.secondary} />
                              <Typography variant="caption" fontWeight={600}>
                                {card.qrScans}
                              </Typography>
                              <Typography variant="caption" color="text.secondary" sx={{ fontSize: '0.65rem' }}>
                                {t('cards.scans')}
                              </Typography>
                            </Stack>
                          </Grid>
                        </Grid>

                        {/* Actions */}
                        <Stack direction="row" spacing={1}>
                          <Button
                            variant="outlined"
                            size="small"
                            startIcon={<IconEye />}
                            href={`/dashboard/cards/preview/${card.id}`}
                            sx={{ borderRadius: 2, flex: 1 }}
                          >
                            {t('cards.preview')}
                          </Button>
                          <Button
                            variant="contained"
                            size="small"
                            startIcon={<IconEdit />}
                            href={`/dashboard/cards/edit/${card.id}`}
                            sx={{ borderRadius: 2, flex: 1 }}
                          >
                            {t('cards.edit')}
                          </Button>
                        </Stack>
                      </Stack>
                    ) : (
                      // List View
                      <Grid container spacing={2} alignItems="center">
                        <Grid size={{ xs: 2, sm: 1 }}>
                          <Avatar src={card.avatar} sx={{ width: 50, height: 50 }} />
                        </Grid>
                        
                        <Grid size={{ xs: 10, sm: 4 }}>
                          <Stack spacing={0.5}>
                            <Typography variant="h6" fontWeight={600}>
                              {card.name}
                            </Typography>
                            <Stack direction="row" spacing={1} alignItems="center">
                              <Chip
                                label={t(`cards.${card.status}`)}
                                color={getStatusColor(card.status)}
                                size="small"
                                icon={getStatusIcon(card.status)}
                              />
                              <Typography variant="caption" color="text.secondary">
                                {card.lastUpdated}
                              </Typography>
                            </Stack>
                          </Stack>
                        </Grid>

                        {!isMobile && (
                          <Grid size={{ sm: 3 }}>
                            <Stack direction="row" spacing={3}>
                              <Stack alignItems="center">
                                <Typography variant="h6" fontWeight={600}>
                                  {card.views}
                                </Typography>
                                <Typography variant="caption" color="text.secondary">
                                  {t('cards.views')}
                                </Typography>
                              </Stack>
                              <Stack alignItems="center">
                                <Typography variant="h6" fontWeight={600}>
                                  {card.shares}
                                </Typography>
                                <Typography variant="caption" color="text.secondary">
                                  {t('cards.shares')}
                                </Typography>
                              </Stack>
                              <Stack alignItems="center">
                                <Typography variant="h6" fontWeight={600}>
                                  {card.qrScans}
                                </Typography>
                                <Typography variant="caption" color="text.secondary">
                                  {t('cards.scans')}
                                </Typography>
                              </Stack>
                            </Stack>
                          </Grid>
                        )}

                        <Grid size={{ xs: 12, sm: 4 }}>
                          <Stack direction="row" spacing={1} justifyContent="flex-end">
                            <IconButton
                              size="small"
                              href={`/dashboard/cards/preview/${card.id}`}
                              color="primary"
                            >
                              <IconEye size={18} />
                            </IconButton>
                            <IconButton
                              size="small"
                              href={`/dashboard/cards/edit/${card.id}`}
                              color="primary"
                            >
                              <IconEdit size={18} />
                            </IconButton>
                            <IconButton
                              size="small"
                              onClick={() => handleCopyQR(card.qrCode)}
                              color="secondary"
                            >
                              <IconCopy size={18} />
                            </IconButton>
                            <IconButton
                              size="small"
                              onClick={(e) => handleMenuClick(e, card)}
                            >
                              <IconDots size={18} />
                            </IconButton>
                          </Stack>
                        </Grid>
                      </Grid>
                    )}
                  </CardContent>
                </Card>
              </Grid>
            ))}
          </Grid>
        )}

        {/* Floating Action Button - Mobile */}
        {isMobile && (
          <Fab
            color="primary"
            href="/dashboard/cards/create"
            sx={{
              position: 'fixed',
              bottom: 24,
              right: 24,
              zIndex: 1000
            }}
          >
            <IconPlus />
          </Fab>
        )}

        {/* Context Menu */}
        <Menu
          anchorEl={anchorEl}
          open={Boolean(anchorEl)}
          onClose={handleMenuClose}
          PaperProps={{
            sx: { minWidth: 200 }
          }}
        >
          <MenuItem onClick={() => {
            // Preview action
            handleMenuClose();
          }}>
            <IconEye size={16} style={{ marginRight: 8 }} />
            {t('cards.preview')}
          </MenuItem>
          <MenuItem onClick={() => {
            // Edit action
            handleMenuClose();
          }}>
            <IconEdit size={16} style={{ marginRight: 8 }} />
            {t('cards.edit')}
          </MenuItem>
          <MenuItem onClick={() => {
            setShareDialog(true);
            handleMenuClose();
          }}>
            <IconShare size={16} style={{ marginRight: 8 }} />
            {t('cards.share')}
          </MenuItem>
          <MenuItem onClick={() => {
            handleCopyQR(selectedCard?.qrCode);
            handleMenuClose();
          }}>
            <IconCopy size={16} style={{ marginRight: 8 }} />
            {t('cards.copyQR')}
          </MenuItem>
          <MenuItem onClick={() => {
            // Download action
            handleMenuClose();
          }}>
            <IconDownload size={16} style={{ marginRight: 8 }} />
            {t('cards.download')}
          </MenuItem>
          <MenuItem 
            onClick={() => {
              setDeleteDialog(true);
              handleMenuClose();
            }}
            sx={{ color: 'error.main' }}
          >
            <IconTrash size={16} style={{ marginRight: 8 }} />
            {t('cards.delete')}
          </MenuItem>
        </Menu>

        {/* Delete Confirmation Dialog */}
        <Dialog
          open={deleteDialog}
          onClose={() => setDeleteDialog(false)}
          maxWidth="sm"
          fullWidth
        >
          <DialogTitle>
            {t('cards.deleteConfirmTitle')}
          </DialogTitle>
          <DialogContent>
            <Alert severity="warning" sx={{ mb: 2 }}>
              {t('cards.deleteWarning')}
            </Alert>
            <Typography>
              {t('cards.deleteConfirmMessage', { cardName: selectedCard?.name })}
            </Typography>
          </DialogContent>
          <DialogActions>
            <Button onClick={() => setDeleteDialog(false)}>
              {t('common.cancel')}
            </Button>
            <Button
              variant="contained"
              color="error"
              onClick={handleDeleteCard}
              disabled={loading}
            >
              {loading ? t('cards.deleting') : t('cards.delete')}
            </Button>
          </DialogActions>
        </Dialog>

        {/* Share Dialog */}
        <Dialog
          open={shareDialog}
          onClose={() => setShareDialog(false)}
          maxWidth="sm"
          fullWidth
        >
          <DialogTitle>
            {t('cards.shareCard')}
          </DialogTitle>
          <DialogContent>
            <Stack spacing={3} sx={{ pt: 1 }}>
              <TextField
                fullWidth
                label={t('cards.cardLink')}
                value={`https://mazyone.com/card/${selectedCard?.id}`}
                InputProps={{
                  readOnly: true,
                  endAdornment: (
                    <InputAdornment position="end">
                      <IconButton
                        onClick={() => navigator.clipboard.writeText(`https://mazyone.com/card/${selectedCard?.id}`)}
                      >
                        <IconCopy size={16} />
                      </IconButton>
                    </InputAdornment>
                  )
                }}
              />
              
              <Box sx={{ textAlign: 'center' }}>
                <img
                  src={selectedCard?.qrCode}
                  alt="QR Code"
                  style={{ width: 200, height: 200 }}
                />
                <Typography variant="caption" display="block" sx={{ mt: 1 }}>
                  {t('cards.qrCodeDescription')}
                </Typography>
              </Box>
            </Stack>
          </DialogContent>
          <DialogActions>
            <Button onClick={() => setShareDialog(false)}>
              {t('common.close')}
            </Button>
            <Button
              variant="contained"
              startIcon={<IconDownload />}
              onClick={() => {
                // Download QR code
              }}
            >
              {t('cards.downloadQR')}
            </Button>
          </DialogActions>
        </Dialog>
      </Container>
    </PageContainer>
  );
};

export default MyCards;

===== src/views/cards/Templates.tsx =====
// src/views/cards/Templates.tsx
import { useState } from 'react';
import {
  Box,
  Container,
  Grid2 as Grid,
  Card,
  CardContent,
  Typography,
  Button,
  Stack,
  useTheme,
  useMediaQuery,
  Chip,
  IconButton,
  Dialog,
  DialogContent,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  TextField,
  InputAdornment
} from '@mui/material';
import { useTranslation } from 'react-i18next';
import {
  IconEye,
  IconPlus,
  IconSearch,
  IconHeart,
  IconHeartFilled,
  IconStarFilled,
  IconX,
  IconCheck
} from '@tabler/icons-react';
import PageContainer from 'src/components/container/PageContainer';
import DashboardCard from '../dashboard/components/DashboardCard';

// تعريف نوع البيانات للقالب
interface Template {
  id: number;
  name: string;
  category: string;
  preview: string;
  gradient: string;
  description: string;
  features: string[];
  rating: number;
  downloads: number;
  isPremium: boolean;
}

// تعريف نوع البيانات للفئة
interface Category {
  value: string;
  label: string;
}

const Templates = () => {
  const { t } = useTranslation();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));

  const [searchTerm, setSearchTerm] = useState('');
  const [categoryFilter, setCategoryFilter] = useState('all');
  const [previewDialog, setPreviewDialog] = useState(false);
  const [selectedTemplate, setSelectedTemplate] = useState<Template | null>(null);
  const [favorites, setFavorites] = useState(new Set<number>());

  // بيانات وهمية للقوالب
  const templates: Template[] = [
    {
      id: 1,
      name: 'Modern Professional',
      category: 'business',
      preview: '/images/templates/modern.jpg',
      gradient: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
      description: 'قالب عصري ومهني مناسب لرجال الأعمال',
      features: ['تصميم عصري', 'ألوان احترافية', 'سهل القراءة'],
      rating: 4.8,
      downloads: 1234,
      isPremium: false
    },
    {
      id: 2,
      name: 'Creative Designer',
      category: 'creative',
      preview: '/images/templates/creative.jpg',
      gradient: 'linear-gradient(135deg, #f093fb 0%, #f5576c 100%)',
      description: 'قالب إبداعي مناسب للمصممين والفنانين',
      features: ['تصميم إبداعي', 'ألوان جذابة', 'مساحة للأعمال'],
      rating: 4.9,
      downloads: 987,
      isPremium: true
    },
    {
      id: 3,
      name: 'Minimal Clean',
      category: 'minimal',
      preview: '/images/templates/minimal.jpg',
      gradient: 'linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)',
      description: 'قالب بسيط ونظيف مناسب لجميع المهن',
      features: ['تصميم بسيط', 'سهل الاستخدام', 'متعدد الاستخدامات'],
      rating: 4.7,
      downloads: 2156,
      isPremium: false
    },
    {
      id: 4,
      name: 'Tech Innovator',
      category: 'technology',
      preview: '/images/templates/tech.jpg',
      gradient: 'linear-gradient(135deg, #43e97b 0%, #38f9d7 100%)',
      description: 'قالب تقني مناسب للمطورين والمهندسين',
      features: ['تصميم تقني', 'ألوان حديثة', 'مناسب للتقنيين'],
      rating: 4.6,
      downloads: 876,
      isPremium: true
    },
    {
      id: 5,
      name: 'Elegant Classic',
      category: 'elegant',
      preview: '/images/templates/elegant.jpg',
      gradient: 'linear-gradient(135deg, #fa709a 0%, #fee140 100%)',
      description: 'قالب أنيق وكلاسيكي مناسب للمهن الراقية',
      features: ['تصميم أنيق', 'ألوان كلاسيكية', 'مظهر راقي'],
      rating: 4.8,
      downloads: 1543,
      isPremium: false
    },
    {
      id: 6,
      name: 'Bold Statement',
      category: 'bold',
      preview: '/images/templates/bold.jpg',
      gradient: 'linear-gradient(135deg, #a8edea 0%, #fed6e3 100%)',
      description: 'قالب جريء ومميز لمن يريد التميز',
      features: ['تصميم جريء', 'ألوان مميزة', 'يلفت الانتباه'],
      rating: 4.5,
      downloads: 654,
      isPremium: true
    }
  ];

  const categories: Category[] = [
    { value: 'all', label: t('templates.categories.all') },
    { value: 'business', label: t('templates.categories.business') },
    { value: 'creative', label: t('templates.categories.creative') },
    { value: 'minimal', label: t('templates.categories.minimal') },
    { value: 'technology', label: t('templates.categories.technology') },
    { value: 'elegant', label: t('templates.categories.elegant') },
    { value: 'bold', label: t('templates.categories.bold') }
  ];

  const filteredTemplates = templates.filter(template => {
    const matchesSearch = template.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         template.description.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesCategory = categoryFilter === 'all' || template.category === categoryFilter;
    return matchesSearch && matchesCategory;
  });

  const handleFavorite = (templateId: number) => {
    const newFavorites = new Set(favorites);
    if (newFavorites.has(templateId)) {
      newFavorites.delete(templateId);
    } else {
      newFavorites.add(templateId);
    }
    setFavorites(newFavorites);
  };

  const handlePreview = (template: Template) => {
    setSelectedTemplate(template);
    setPreviewDialog(true);
  };

  const handleUseTemplate = (template: Template) => {
    // Navigate to create card with template
    console.log('Using template:', template);
  };

  return (
    <PageContainer title={t('templates.title')} description={t('templates.description')}>
      <Container maxWidth="xl">
        {/* Header */}
        <Stack
          direction={{ xs: 'column', md: 'row' }}
          justifyContent="space-between"
          alignItems={{ xs: 'stretch', md: 'center' }}
          spacing={2}
          sx={{ mb: 3 }}
        >
          <Typography
            variant={isMobile ? 'h5' : 'h4'}
            sx={{
              fontWeight: 700,
              color: theme.palette.text.primary
            }}
          >
            {t('templates.title')}
          </Typography>

          <Button
            variant="contained"
            startIcon={<IconPlus />}
            href="/dashboard/cards/create"
            sx={{ borderRadius: 2 }}
          >
            {t('templates.createCustom')}
          </Button>
        </Stack>

        {/* Filters */}
        <DashboardCard sx={{ mb: 3 }}>
          <CardContent sx={{ p: { xs: 2, md: 3 } }}>
            <Grid container spacing={2} alignItems="center">
              <Grid size={{ xs: 12, md: 6 }}>
                <TextField
                  fullWidth
                  placeholder={t('templates.searchPlaceholder')}
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  InputProps={{
                    startAdornment: (
                      <InputAdornment position="start">
                        <IconSearch size={20} />
                      </InputAdornment>
                    )
                  }}
                  sx={{
                    '& .MuiOutlinedInput-root': {
                      borderRadius: 2
                    }
                  }}
                />
              </Grid>

              <Grid size={{ xs: 12, md: 4 }}>
                <FormControl fullWidth>
                  <InputLabel>{t('templates.category')}</InputLabel>
                  <Select
                    value={categoryFilter}
                    label={t('templates.category')}
                    onChange={(e) => setCategoryFilter(e.target.value)}
                    sx={{ borderRadius: 2 }}
                  >
                    {categories.map((category) => (
                      <MenuItem key={category.value} value={category.value}>
                        {category.label}
                      </MenuItem>
                    ))}
                  </Select>
                </FormControl>
              </Grid>

              <Grid size={{ xs: 12, md: 2 }}>
                <Typography variant="body2" color="text.secondary">
                  {filteredTemplates.length} {t('templates.templatesFound')}
                </Typography>
              </Grid>
            </Grid>
          </CardContent>
        </DashboardCard>

        {/* Templates Grid */}
        <Grid container spacing={3}>
          {filteredTemplates.map((template) => (
            <Grid size={{ xs: 12, sm: 6, md: 4, lg: 3 }} key={template.id}>
              <Card
                sx={{
                  borderRadius: 3,
                  border: `1px solid ${theme.palette.divider}`,
                  transition: 'all 0.2s ease-in-out',
                  '&:hover': {
                    boxShadow: theme.shadows[8],
                    transform: 'translateY(-4px)'
                  }
                }}
              >
                {/* Template Preview */}
                <Box
                  sx={{
                    height: 200,
                    background: template.gradient,
                    position: 'relative',
                    cursor: 'pointer'
                  }}
                  onClick={() => handlePreview(template)}
                >
                  {template.isPremium && (
                    <Chip
                      label={t('templates.premium')}
                      size="small"
                      color="warning"
                      sx={{
                        position: 'absolute',
                        top: 8,
                        left: 8,
                        fontWeight: 600
                      }}
                    />
                  )}
                  
                  <IconButton
                    onClick={(e) => {
                      e.stopPropagation();
                      handleFavorite(template.id);
                    }}
                    sx={{
                      position: 'absolute',
                      top: 8,
                      right: 8,
                      backgroundColor: 'rgba(255,255,255,0.9)',
                      '&:hover': {
                        backgroundColor: 'white'
                      }
                    }}
                  >
                    {favorites.has(template.id) ? (
                      <IconHeartFilled color={theme.palette.error.main} />
                    ) : (
                      <IconHeart />
                    )}
                  </IconButton>

                  <Box
                    sx={{
                      position: 'absolute',
                      bottom: 8,
                      right: 8,
                      backgroundColor: 'rgba(0,0,0,0.7)',
                      borderRadius: 1,
                      px: 1,
                      py: 0.5
                    }}
                  >
                    <Typography variant="caption" sx={{ color: 'white' }}>
                      <IconEye size={14} style={{ marginRight: 4 }} />
                      {t('templates.preview')}
                    </Typography>
                  </Box>
                </Box>

                <CardContent sx={{ p: 2 }}>
                  <Stack spacing={2}>
                    {/* Template Info */}
                    <Stack spacing={1}>
                      <Typography variant="h6" fontWeight={600}>
                        {template.name}
                      </Typography>
                      
                      <Typography
                        variant="body2"
                        color="text.secondary"
                        sx={{
                          overflow: 'hidden',
                          textOverflow: 'ellipsis',
                          display: '-webkit-box',
                          WebkitLineClamp: 2,
                          WebkitBoxOrient: 'vertical'
                        }}
                      >
                        {template.description}
                      </Typography>
                    </Stack>

                    {/* Rating and Downloads */}
                    <Stack direction="row" justifyContent="space-between" alignItems="center">
                      <Stack direction="row" spacing={0.5} alignItems="center">
                        <IconStarFilled size={16} color={theme.palette.warning.main} />
                        <Typography variant="body2" fontWeight={600}>
                          {template.rating}
                        </Typography>
                      </Stack>
                      
                      <Typography variant="caption" color="text.secondary">
                        {template.downloads.toLocaleString()} {t('templates.downloads')}
                      </Typography>
                    </Stack>

                    {/* Features */}
                    <Stack direction="row" spacing={1} flexWrap="wrap">
                      {template.features.slice(0, 2).map((feature: string, index: number) => (
                        <Chip
                          key={index}
                          label={feature}
                          size="small"
                          variant="outlined"
                          sx={{ fontSize: '0.7rem', height: 20 }}
                        />
                      ))}
                      {template.features.length > 2 && (
                        <Chip
                          label={`+${template.features.length - 2}`}
                          size="small"
                          variant="outlined"
                          sx={{ fontSize: '0.7rem', height: 20 }}
                        />
                      )}
                    </Stack>

                    {/* Actions */}
                    <Stack direction="row" spacing={1}>
                      <Button
                        variant="outlined"
                        size="small"
                        startIcon={<IconEye />}
                        onClick={() => handlePreview(template)}
                        sx={{ borderRadius: 2, flex: 1 }}
                      >
                        {t('templates.preview')}
                      </Button>
                      
                      <Button
                        variant="contained"
                        size="small"
                        startIcon={<IconPlus />}
                        onClick={() => handleUseTemplate(template)}
                        sx={{ borderRadius: 2, flex: 1 }}
                      >
                        {t('templates.use')}
                      </Button>
                    </Stack>
                  </Stack>
                </CardContent>
              </Card>
            </Grid>
          ))}
        </Grid>

        {/* Empty State */}
        {filteredTemplates.length === 0 && (
          <DashboardCard>
            <CardContent sx={{ p: 6, textAlign: 'center' }}>
              <Stack spacing={3} alignItems="center">
                <Box
                  sx={{
                    width: 120,
                    height: 120,
                    borderRadius: '50%',
                    backgroundColor: theme.palette.grey[100],
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'center'
                  }}
                >
                  <IconSearch size={48} color={theme.palette.text.secondary} />
                </Box>
                
                <Typography variant="h6" color="text.secondary">
                  {t('templates.noTemplatesFound')}
                </Typography>
                
                <Typography variant="body2" color="text.secondary">
                  {t('templates.noTemplatesDescription')}
                </Typography>
                
                <Button
                  variant="contained"
                  onClick={() => {
                    setSearchTerm('');
                    setCategoryFilter('all');
                  }}
                  sx={{ borderRadius: 2 }}
                >
                  {t('templates.clearFilters')}
                </Button>
              </Stack>
            </CardContent>
          </DashboardCard>
        )}

        {/* Preview Dialog */}
        <Dialog
          open={previewDialog}
          onClose={() => setPreviewDialog(false)}
          maxWidth="md"
          fullWidth
        >
          <DialogContent sx={{ p: 0 }}>
            {selectedTemplate && (
              <Stack>
                {/* Header */}
                <Stack
                  direction="row"
                  justifyContent="space-between"
                  alignItems="center"
                  sx={{
                    p: 3,
                    borderBottom: `1px solid ${theme.palette.divider}`
                  }}
                >
                  <Stack spacing={1}>
                    <Typography variant="h6" fontWeight={600}>
                      {selectedTemplate.name}
                    </Typography>
                    <Stack direction="row" spacing={2} alignItems="center">
                      <Stack direction="row" spacing={0.5} alignItems="center">
                        <IconStarFilled size={16} color={theme.palette.warning.main} />
                        <Typography variant="body2">
                          {selectedTemplate.rating}
                        </Typography>
                      </Stack>
                      <Typography variant="body2" color="text.secondary">
                        {selectedTemplate.downloads.toLocaleString()} {t('templates.downloads')}
                      </Typography>
                      {selectedTemplate.isPremium && (
                        <Chip label={t('templates.premium')} size="small" color="warning" />
                      )}
                    </Stack>
                  </Stack>
                  
                  <IconButton onClick={() => setPreviewDialog(false)}>
                    <IconX />
                  </IconButton>
                </Stack>

                {/* Preview */}
                <Box
                  sx={{
                    height: 400,
                    background: selectedTemplate.gradient,
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'center'
                  }}
                >
                  <Typography variant="h4" sx={{ color: 'white', fontWeight: 600 }}>
                    {selectedTemplate.name}
                  </Typography>
                </Box>

                {/* Details */}
                <Stack spacing={3} sx={{ p: 3 }}>
                  <Typography variant="body1">
                    {selectedTemplate.description}
                  </Typography>
                  
                  <Stack spacing={2}>
                    <Typography variant="subtitle2" fontWeight={600}>
                      {t('templates.features')}:
                    </Typography>
                    <Stack direction="row" spacing={1} flexWrap="wrap">
                      {selectedTemplate.features.map((feature: string, index: number) => (
                        <Chip
                          key={index}
                          label={feature}
                          size="small"
                          icon={<IconCheck size={14} />}
                          color="success"
                          variant="outlined"
                        />
                      ))}
                    </Stack>
                  </Stack>

                  <Stack direction="row" spacing={2}>
                    <Button
                      variant="outlined"
                      onClick={() => setPreviewDialog(false)}
                      sx={{ borderRadius: 2 }}
                    >
                      {t('common.close')}
                    </Button>
                    
                    <Button
                      variant="contained"
                      startIcon={<IconPlus />}
                      onClick={() => {
                        handleUseTemplate(selectedTemplate);
                        setPreviewDialog(false);
                      }}
                      sx={{ borderRadius: 2, flex: 1 }}
                    >
                      {t('templates.useTemplate')}
                    </Button>
                  </Stack>
                </Stack>
              </Stack>
            )}
          </DialogContent>
        </Dialog>
      </Container>
    </PageContainer>
  );
};

export default Templates;

===== src/views/common/ComingSoon.tsx =====
// src/views/common/ComingSoon.tsx
import React from 'react';
import {
  Box,
  Container,
  Typography,
  Button,
  Stack,
  useTheme,
  Card,
  CardContent
} from '@mui/material';
import { useTranslation } from 'react-i18next';
import { IconArrowLeft, IconTools } from '@tabler/icons-react';
import { useNavigate } from 'react-router';
import PageContainer from 'src/components/container/PageContainer';

const ComingSoon = () => {
  const { t } = useTranslation();
  const theme = useTheme();
  const navigate = useNavigate();

  return (
    <PageContainer title={t('comingSoon.title')} description={t('comingSoon.description')}>
      <Container maxWidth="md">
        <Box
          sx={{
            minHeight: '60vh',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center'
          }}
        >
          <Card
            sx={{
              borderRadius: 4,
              boxShadow: theme.shadows[8],
              width: '100%',
              maxWidth: 600
            }}
          >
            <CardContent sx={{ p: { xs: 4, md: 6 }, textAlign: 'center' }}>
              <Stack spacing={4} alignItems="center">
                <Box
                  sx={{
                    width: 120,
                    height: 120,
                    borderRadius: '50%',
                    backgroundColor: theme.palette.primary.light,
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'center'
                  }}
                >
                  <IconTools size={60} color={theme.palette.primary.main} />
                </Box>
                
                <Stack spacing={2} alignItems="center">
                  <Typography
                    variant="h4"
                    sx={{
                      fontWeight: 700,
                      color: theme.palette.text.primary
                    }}
                  >
                    {t('comingSoon.title')}
                  </Typography>
                  
                  <Typography
                    variant="body1"
                    sx={{
                      color: theme.palette.text.secondary,
                      maxWidth: 400,
                      lineHeight: 1.6
                    }}
                  >
                    {t('comingSoon.message')}
                  </Typography>
                </Stack>

                <Stack direction={{ xs: 'column', sm: 'row' }} spacing={2}>
                  <Button
                    variant="outlined"
                    startIcon={<IconArrowLeft />}
                    onClick={() => navigate(-1)}
                    sx={{ borderRadius: 2 }}
                  >
                    {t('common.back')}
                  </Button>
                  
                  <Button
                    variant="contained"
                    onClick={() => navigate('/dashboard/home')}
                    sx={{ borderRadius: 2 }}
                  >
                    {t('comingSoon.goToDashboard')}
                  </Button>
                </Stack>
              </Stack>
            </CardContent>
          </Card>
        </Box>
      </Container>
    </PageContainer>
  );
};

export default ComingSoon;

===== src/views/dashboard/components/CardsOverview.tsx =====
// src/views/dashboard/components/CardsOverview.tsx
import {
  Card,
  CardContent,
  Typography,
  Stack,
  Button,
  Avatar,
  Chip,
  IconButton,
  useTheme,
  Grid2 as Grid
} from '@mui/material';
import { useTranslation } from 'react-i18next';
import {
  IconPlus,
  IconEye,
  IconShare,
  IconQrcode,
  IconDots,
  IconEdit,
  IconCopy,
  IconArrowRight
} from '@tabler/icons-react';
import DashboardCard from './DashboardCard';

interface CardsOverviewProps {
  isMobile: boolean;
}

const CardsOverview = ({ isMobile }: CardsOverviewProps) => {
  const { t } = useTranslation();
  const theme = useTheme();

  // بيانات وهمية للبطاقات
  const cards = [
    {
      id: 1,
      name: 'بطاقة العمل الرئيسية',
      avatar: '/images/avatars/user1.jpg',
      views: 1234,
      shares: 89,
      qrScans: 456,
      status: 'active',
      lastUpdated: '2024-01-15'
    },
    {
      id: 2,
      name: 'بطاقة المشاريع',
      avatar: '/images/avatars/user2.jpg',
      views: 567,
      shares: 34,
      qrScans: 123,
      status: 'active',
      lastUpdated: '2024-01-10'
    },
    {
      id: 3,
      name: 'بطاقة شخصية',
      avatar: '/images/avatars/user3.jpg',
      views: 234,
      shares: 12,
      qrScans: 67,
      status: 'draft',
      lastUpdated: '2024-01-08'
    }
  ];

  return (
    <DashboardCard>
      <CardContent sx={{ p: { xs: 2, md: 3 } }}>
        <Stack spacing={{ xs: 2, md: 3 }}>
          {/* Header */}
          <Stack
            direction="row"
            justifyContent="space-between"
            alignItems="center"
            spacing={2}
          >
            <Typography
              variant={isMobile ? 'h6' : 'h5'}
              sx={{
                fontWeight: 600,
                color: theme.palette.text.primary
              }}
            >
              {t('dashboard.cards.title')}
            </Typography>
            
            <Button
              variant="contained"
              startIcon={<IconPlus />}
              size={isMobile ? 'small' : 'medium'}
              sx={{
                borderRadius: 2,
                px: { xs: 2, md: 3 }
              }}
            >
              {isMobile ? t('dashboard.cards.add') : t('dashboard.cards.addNew')}
            </Button>
          </Stack>

          {/* Cards List */}
          <Stack spacing={2}>
            {cards.map((card) => (
              <Card
                key={card.id}
                sx={{
                  border: `1px solid ${theme.palette.divider}`,
                  borderRadius: 2,
                  transition: 'all 0.2s ease-in-out',
                  '&:hover': {
                    boxShadow: theme.shadows[3],
                    transform: 'translateY(-1px)'
                  }
                }}
              >
                <CardContent sx={{ p: { xs: 2, md: 2.5 } }}>
                  <Grid container spacing={2} alignItems="center">
                    {/* Avatar and Info */}
                    <Grid size={{ xs: 12, sm: 6, md: 7 }}>
                      <Stack direction="row" spacing={2} alignItems="center">
                        <Avatar
                          src={card.avatar}
                          sx={{
                            width: { xs: 40, md: 48 },
                            height: { xs: 40, md: 48 }
                          }}
                        />
                        <Stack spacing={0.5} sx={{ minWidth: 0, flex: 1 }}>
                          <Typography
                            variant="subtitle1"
                            sx={{
                              fontWeight: 600,
                              color: theme.palette.text.primary,
                              fontSize: { xs: '0.9rem', md: '1rem' },
                              overflow: 'hidden',
                              textOverflow: 'ellipsis',
                              whiteSpace: 'nowrap'
                            }}
                          >
                            {card.name}
                          </Typography>
                          <Stack direction="row" spacing={1} alignItems="center">
                            <Chip
                              label={card.status === 'active' ? t('dashboard.cards.active') : t('dashboard.cards.draft')}
                              size="small"
                              color={card.status === 'active' ? 'success' : 'default'}
                              sx={{
                                height: 20,
                                fontSize: '0.7rem'
                              }}
                            />
                            <Typography
                              variant="caption"
                              sx={{
                                color: theme.palette.text.secondary,
                                fontSize: { xs: '0.7rem', md: '0.75rem' }
                              }}
                            >
                              {t('dashboard.cards.updated')} {card.lastUpdated}
                            </Typography>
                          </Stack>
                        </Stack>
                      </Stack>
                    </Grid>

                    {/* Stats - Hidden on mobile */}
                    {!isMobile && (
                      <Grid size={{ xs: 12, sm: 4, md: 3 }}>
                        <Stack direction="row" spacing={2}>
                          <Stack alignItems="center" spacing={0.5}>
                            <IconEye size={16} color={theme.palette.text.secondary} />
                            <Typography variant="caption" color="text.secondary">
                              {card.views}
                            </Typography>
                          </Stack>
                          <Stack alignItems="center" spacing={0.5}>
                            <IconShare size={16} color={theme.palette.text.secondary} />
                            <Typography variant="caption" color="text.secondary">
                              {card.shares}
                            </Typography>
                          </Stack>
                          <Stack alignItems="center" spacing={0.5}>
                            <IconQrcode size={16} color={theme.palette.text.secondary} />
                            <Typography variant="caption" color="text.secondary">
                              {card.qrScans}
                            </Typography>
                          </Stack>
                        </Stack>
                      </Grid>
                    )}

                    {/* Actions */}
                    <Grid size={{ xs: 12, sm: 2, md: 2 }}>
                      <Stack
                        direction="row"
                        spacing={1}
                        justifyContent="flex-end"
                        alignItems="center"
                      >
                        {isMobile ? (
                          <IconButton size="small">
                            <IconDots size={16} />
                          </IconButton>
                        ) : (
                          <>
                            <IconButton size="small" color="primary">
                              <IconEdit size={16} />
                            </IconButton>
                            <IconButton size="small" color="secondary">
                              <IconCopy size={16} />
                            </IconButton>
                            <IconButton size="small">
                              <IconDots size={16} />
                            </IconButton>
                          </>
                        )}
                      </Stack>
                    </Grid>
                  </Grid>

                  {/* Mobile Stats */}
                  {isMobile && (
                    <Stack
                      direction="row"
                      spacing={3}
                      sx={{
                        mt: 2,
                        pt: 2,
                        borderTop: `1px solid ${theme.palette.divider}`
                      }}
                    >
                      <Stack direction="row" alignItems="center" spacing={1}>
                        <IconEye size={14} color={theme.palette.text.secondary} />
                        <Typography variant="caption" color="text.secondary">
                          {card.views} {t('dashboard.cards.views')}
                        </Typography>
                      </Stack>
                      <Stack direction="row" alignItems="center" spacing={1}>
                        <IconShare size={14} color={theme.palette.text.secondary} />
                        <Typography variant="caption" color="text.secondary">
                          {card.shares} {t('dashboard.cards.shares')}
                        </Typography>
                      </Stack>
                      <Stack direction="row" alignItems="center" spacing={1}>
                        <IconQrcode size={14} color={theme.palette.text.secondary} />
                        <Typography variant="caption" color="text.secondary">
                          {card.qrScans} {t('dashboard.cards.scans')}
                        </Typography>
                      </Stack>
                    </Stack>
                  )}
                </CardContent>
              </Card>
            ))}
          </Stack>

          {/* View All Button */}
          <Button
            variant="outlined"
            fullWidth
            endIcon={<IconArrowRight />}
            sx={{
              borderRadius: 2,
              py: 1.5,
              mt: 2
            }}
          >
            {t('dashboard.cards.viewAll')}
          </Button>
        </Stack>
      </CardContent>
    </DashboardCard>
  );
};

export default CardsOverview;

===== src/views/dashboard/components/DashboardCard.tsx =====
// src/views/dashboard/components/DashboardCard.tsx
import React from 'react';
import { Card, CardProps, useTheme } from '@mui/material';

interface DashboardCardProps extends CardProps {
  children: React.ReactNode;
}

const DashboardCard = ({ children, sx, ...props }: DashboardCardProps) => {
  const theme = useTheme();
  
  return (
    <Card
      {...props}
      sx={{
        borderRadius: { xs: 2, md: 3 },
        boxShadow: theme.shadows[2],
        border: `1px solid ${theme.palette.divider}`,
        transition: 'all 0.2s ease-in-out',
        '&:hover': {
          boxShadow: theme.shadows[4]
        },
        ...sx
      }}
    >
      {children}
    </Card>
  );
};

export default DashboardCard;

===== src/views/dashboard/components/QuickActions.tsx =====
// src/views/dashboard/components/QuickActions.tsx
import {
  CardContent,
  Typography,
  Stack,
  Button,
  Grid2 as Grid,
  useTheme
} from '@mui/material';
import { useTranslation } from 'react-i18next';
import {
  IconPlus,
  IconQrcode,
  IconShare,
  IconAnalyze,
  IconSettings,
  IconBell
} from '@tabler/icons-react';
import DashboardCard from './DashboardCard';

interface QuickActionsProps {
  isMobile: boolean;
}

const QuickActions = ({ isMobile }: QuickActionsProps) => {
  const { t } = useTranslation();
  const theme = useTheme();

  const actions = [
    {
      title: t('dashboard.quickActions.createCard'),
      icon: IconPlus,
      color: theme.palette.primary.main,
      variant: 'contained' as const
    },
    {
      title: t('dashboard.quickActions.generateQR'),
      icon: IconQrcode,
      color: theme.palette.secondary.main,
      variant: 'outlined' as const
    },
    {
      title: t('dashboard.quickActions.shareCard'),
      icon: IconShare,
      color: theme.palette.success.main,
      variant: 'outlined' as const
    },
    {
      title: t('dashboard.quickActions.viewAnalytics'),
      icon: IconAnalyze,
      color: theme.palette.info.main,
      variant: 'outlined' as const
    },
    {
      title: t('dashboard.quickActions.settings'),
      icon: IconSettings,
      color: theme.palette.warning.main,
      variant: 'outlined' as const
    },
    {
      title: t('dashboard.quickActions.notifications'),
      icon: IconBell,
      color: theme.palette.error.main,
      variant: 'outlined' as const
    }
  ];

  return (
    <DashboardCard>
      <CardContent sx={{ p: { xs: 2, md: 3 } }}>
        <Stack spacing={{ xs: 2, md: 3 }}>
          <Typography
            variant={isMobile ? 'h6' : 'h6'}
            sx={{
              fontWeight: 600,
              color: theme.palette.text.primary
            }}
          >
            {t('dashboard.quickActions.title')}
          </Typography>

          <Grid container spacing={2}>
            {actions.map((action, index) => (
              <Grid size={{ xs: 6, sm: 6, md: 12 }} key={index}>
                <Button
                  variant={action.variant}
                  fullWidth
                  startIcon={<action.icon size={18} />}
                  sx={{
                    borderRadius: 2,
                    py: { xs: 1.5, md: 2 },
                    px: { xs: 1, md: 2 },
                    justifyContent: 'flex-start',
                    textAlign: 'left',
                    fontSize: { xs: '0.8rem', md: '0.875rem' },
                    fontWeight: 500,
                    '&:hover': {
                      transform: 'translateY(-1px)',
                      boxShadow: theme.shadows[3]
                    }
                  }}
                >
                  {action.title}
                </Button>
              </Grid>
            ))}
          </Grid>
        </Stack>
      </CardContent>
    </DashboardCard>
  );
};

export default QuickActions;

===== src/views/dashboard/components/RecentActivity.tsx =====
// src/views/dashboard/components/RecentActivity.tsx
import {
  CardContent,
  Typography,
  Stack,
  Avatar,
  useTheme
} from '@mui/material';
import { useTranslation } from 'react-i18next';
import {
  IconEye,
  IconShare,
  IconQrcode,
  IconUserPlus
} from '@tabler/icons-react';
import DashboardCard from './DashboardCard';

interface RecentActivityProps {
  isMobile: boolean;
}

const RecentActivity = ({ isMobile }: RecentActivityProps) => {
  const { t } = useTranslation();
  const theme = useTheme();

  const activities = [
    {
      type: 'view',
      title: t('dashboard.activity.cardViewed'),
      description: 'بطاقة العمل الرئيسية',
      time: '5 دقائق',
      icon: IconEye,
      color: theme.palette.primary.main
    },
    {
      type: 'share',
      title: t('dashboard.activity.cardShared'),
      description: 'بطاقة المشاريع',
      time: '15 دقيقة',
      icon: IconShare,
      color: theme.palette.success.main
    },
    {
      type: 'qr',
      title: t('dashboard.activity.qrScanned'),
      description: 'بطاقة شخصية',
      time: '30 دقيقة',
      icon: IconQrcode,
      color: theme.palette.warning.main
    },
    {
      type: 'contact',
      title: t('dashboard.activity.newContact'),
      description: 'أحمد محمد',
      time: '1 ساعة',
      icon: IconUserPlus,
      color: theme.palette.info.main
    }
  ];

  return (
    <DashboardCard>
      <CardContent sx={{ p: { xs: 2, md: 3 } }}>
        <Stack spacing={{ xs: 2, md: 3 }}>
          <Typography
            variant={isMobile ? 'h6' : 'h6'}
            sx={{
              fontWeight: 600,
              color: theme.palette.text.primary
            }}
          >
            {t('dashboard.activity.title')}
          </Typography>

          <Stack spacing={2}>
            {activities.map((activity, index) => (
              <Stack
                key={index}
                direction="row"
                spacing={2}
                sx={{
                  p: { xs: 1.5, md: 2 },
                  borderRadius: 2,
                  border: `1px solid ${theme.palette.divider}`,
                  transition: 'all 0.2s ease-in-out',
                  '&:hover': {
                    backgroundColor: theme.palette.action.hover,
                    transform: 'translateX(4px)'
                  }
                }}
              >
                <Avatar
                  sx={{
                    width: { xs: 32, md: 40 },
                    height: { xs: 32, md: 40 },
                    backgroundColor: `${activity.color}20`,
                    color: activity.color
                  }}
                >
                  <activity.icon size={isMobile ? 16 : 20} />
                </Avatar>
                
                <Stack spacing={0.5} sx={{ flex: 1, minWidth: 0 }}>
                  <Typography
                    variant="body2"
                    sx={{
                      fontWeight: 600,
                      color: theme.palette.text.primary,
                      fontSize: { xs: '0.8rem', md: '0.875rem' }
                    }}
                  >
                    {activity.title}
                  </Typography>
                  <Typography
                    variant="caption"
                    sx={{
                      color: theme.palette.text.secondary,
                      fontSize: { xs: '0.7rem', md: '0.75rem' },
                      overflow: 'hidden',
                      textOverflow: 'ellipsis',
                      whiteSpace: 'nowrap'
                    }}
                  >
                    {activity.description}
                  </Typography>
                  <Typography
                    variant="caption"
                    sx={{
                      color: theme.palette.text.disabled,
                      fontSize: { xs: '0.65rem', md: '0.7rem' }
                    }}
                  >
                    منذ {activity.time}
                  </Typography>
                </Stack>
              </Stack>
            ))}
          </Stack>
        </Stack>
      </CardContent>
    </DashboardCard>
  );
};

export default RecentActivity;

===== src/views/dashboard/components/StatsCard.tsx =====
// src/views/dashboard/components/StatsCard.tsx
import React from 'react';
import {
  Card,
  CardContent,
  Typography,
  Stack,
  Box,
  useTheme,
  alpha
} from '@mui/material';
import { IconTrendingUp, IconTrendingDown } from '@tabler/icons-react';

interface StatsCardProps {
  title: string;
  value: string;
  change: string;
  trend: 'up' | 'down';
  icon: React.ElementType;
  color: string;
  isMobile: boolean;
}

const StatsCard = ({ title, value, change, trend, icon: Icon, color, isMobile }: StatsCardProps) => {
  const theme = useTheme();
  
  return (
    <Card
      sx={{
        borderRadius: { xs: 2, md: 3 },
        boxShadow: theme.shadows[2],
        border: `1px solid ${theme.palette.divider}`,
        transition: 'all 0.2s ease-in-out',
        '&:hover': {
          boxShadow: theme.shadows[4],
          transform: 'translateY(-2px)'
        }
      }}
    >
      <CardContent sx={{ p: { xs: 2, md: 3 } }}>
        <Stack spacing={2}>
          {/* Icon and Trend */}
          <Stack direction="row" justifyContent="space-between" alignItems="flex-start">
            <Box
              sx={{
                width: { xs: 40, md: 48 },
                height: { xs: 40, md: 48 },
                borderRadius: 2,
                backgroundColor: alpha(color, 0.1),
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center'
              }}
            >
              <Icon size={isMobile ? 20 : 24} color={color} />
            </Box>
            
            <Stack direction="row" alignItems="center" spacing={0.5}>
              {trend === 'up' ? (
                <IconTrendingUp size={16} color={theme.palette.success.main} />
              ) : (
                <IconTrendingDown size={16} color={theme.palette.error.main} />
              )}
              <Typography
                variant="caption"
                sx={{
                  color: trend === 'up' ? theme.palette.success.main : theme.palette.error.main,
                  fontWeight: 600,
                  fontSize: { xs: '0.7rem', md: '0.75rem' }
                }}
              >
                {change}
              </Typography>
            </Stack>
          </Stack>
          
          {/* Value and Title */}
          <Stack spacing={0.5}>
            <Typography
              variant={isMobile ? 'h5' : 'h4'}
              sx={{
                fontWeight: 700,
                color: theme.palette.text.primary,
                lineHeight: 1.2
              }}
            >
              {value}
            </Typography>
            <Typography
              variant="body2"
              sx={{
                color: theme.palette.text.secondary,
                fontSize: { xs: '0.75rem', md: '0.875rem' },
                lineHeight: 1.3
              }}
            >
              {title}
            </Typography>
          </Stack>
        </Stack>
      </CardContent>
    </Card>
  );
};

export default StatsCard;

===== src/views/dashboard/Dashboard.tsx =====
// src/views/dashboard/Dashboard.tsx
import React from 'react';
import {
  Box,
  Grid2 as Grid,
  Typography,
  Stack,
  Button,
  useTheme,
  useMediaQuery} from '@mui/material';
import { useTranslation } from 'react-i18next';
import {
  IconPlus,
  IconEye,
  IconShare,
  IconQrcode,
  IconAnalyze,
  IconUsers} from '@tabler/icons-react';
import PageContainer from 'src/components/container/PageContainer';
import DashboardCard from './components/DashboardCard';
import StatsCard from './components/StatsCard';
import RecentActivity from './components/RecentActivity';
import QuickActions from './components/QuickActions';
import CardsOverview from './components/CardsOverview';

const Dashboard = () => {
  const { t } = useTranslation();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));

  // بيانات وهمية للعرض
  const stats: {
    title: string;
    value: string;
    change: string;
    trend: 'up' | 'down';
    icon: React.ElementType;
    color: string;
  }[] = [
    {
      title: t('dashboard.stats.totalViews'),
      value: '2,847',
      change: '+12.5%',
      trend: 'up',
      icon: IconEye,
      color: theme.palette.primary.main
    },
    {
      title: t('dashboard.stats.totalShares'),
      value: '456',
      change: '+8.2%',
      trend: 'up',
      icon: IconShare,
      color: theme.palette.success.main
    },
    {
      title: t('dashboard.stats.qrScans'),
      value: '1,234',
      change: '+15.3%',
      trend: 'up',
      icon: IconQrcode,
      color: theme.palette.warning.main
    },
    {
      title: t('dashboard.stats.newContacts'),
      value: '89',
      change: '+5.7%',
      trend: 'up',
      icon: IconUsers,
      color: theme.palette.info.main
    }
  ];

  return (
    <PageContainer title={t('dashboard.title')} description={t('dashboard.description')}>
      <Box sx={{ pb: { xs: 2, md: 4 } }}>
        {/* Welcome Section */}
        <DashboardCard sx={{ mb: { xs: 2, md: 3 } }}>
          <Grid container spacing={{ xs: 2, md: 3 }} alignItems="center">
            <Grid size={{ xs: 12, md: 8 }}>
              <Stack spacing={2}>
                <Box>
                  <Typography
                    variant={isMobile ? 'h5' : 'h4'}
                    sx={{
                      fontWeight: 700,
                      color: theme.palette.text.primary,
                      mb: 1
                    }}
                  >
                    {t('dashboard.welcome.title')}
                  </Typography>
                  <Typography
                    variant="body1"
                    sx={{
                      color: theme.palette.text.secondary,
                      fontSize: { xs: '0.9rem', md: '1rem' }
                    }}
                  >
                    {t('dashboard.welcome.subtitle')}
                  </Typography>
                </Box>
                
                {/* Quick Actions - Mobile */}
                {isMobile && (
                  <Stack direction="row" spacing={1} sx={{ mt: 2 }}>
                    <Button
                      variant="contained"
                      startIcon={<IconPlus />}
                      size="small"
                      sx={{ borderRadius: 2 }}
                    >
                      {t('dashboard.actions.createCard')}
                    </Button>
                    <Button
                      variant="outlined"
                      startIcon={<IconAnalyze />}
                      size="small"
                      sx={{ borderRadius: 2 }}
                    >
                      {t('dashboard.actions.viewAnalytics')}
                    </Button>
                  </Stack>
                )}
              </Stack>
            </Grid>
            
            {/* Desktop Actions */}
            {!isMobile && (
              <Grid size={{ xs: 12, md: 4 }}>
                <Stack direction="row" spacing={2} justifyContent="flex-end">
                  <Button
                    variant="contained"
                    startIcon={<IconPlus />}
                    sx={{ borderRadius: 2, px: 3 }}
                  >
                    {t('dashboard.actions.createCard')}
                  </Button>
                  <Button
                    variant="outlined"
                    startIcon={<IconAnalyze />}
                    sx={{ borderRadius: 2, px: 3 }}
                  >
                    {t('dashboard.actions.viewAnalytics')}
                  </Button>
                </Stack>
              </Grid>
            )}
          </Grid>
        </DashboardCard>

        {/* Stats Cards */}
        <Grid container spacing={{ xs: 2, md: 3 }} sx={{ mb: { xs: 2, md: 3 } }}>
          {stats.map((stat, index) => (
            <Grid size={{ xs: 6, sm: 6, md: 3 }} key={index}>
              <StatsCard
                title={stat.title}
                value={stat.value}
                change={stat.change}
                trend={stat.trend}
                icon={stat.icon}
                color={stat.color}
                isMobile={isMobile}
              />
            </Grid>
          ))}
        </Grid>

        {/* Main Content Grid */}
        <Grid container spacing={{ xs: 2, md: 3 }}>
          {/* Cards Overview */}
          <Grid size={{ xs: 12, lg: 8 }}>
            <CardsOverview isMobile={isMobile} />
          </Grid>
          
          {/* Quick Actions & Recent Activity */}
          <Grid size={{ xs: 12, lg: 4 }}>
            <Stack spacing={{ xs: 2, md: 3 }}>
              <QuickActions isMobile={isMobile} />
              <RecentActivity isMobile={isMobile} />
            </Stack>
          </Grid>
        </Grid>
      </Box>
    </PageContainer>
  );
};

export default Dashboard;

===== src/views/homepage/components/CTASection.tsx =====
// src/views/homepage/components/CTASection.tsx
import React from 'react';
import { 
  Box, 
  Container, 
  Typography, 
  Button,
  Stack,
  useTheme,
  Fade
} from '@mui/material';
import { useTranslation } from 'react-i18next';
import { IconArrowRight, IconStar } from '@tabler/icons-react';

const CTASection = () => {
  const { t } = useTranslation();
  const theme = useTheme();

  return (
    <Box
      sx={{
        py: { xs: 8, md: 12 },
        background: `linear-gradient(135deg, ${theme.palette.primary.main} 0%, ${theme.palette.primary.dark} 100%)`,
        color: 'white',
        textAlign: 'center'
      }}
    >
      <Container maxWidth="md">
        <Fade in timeout={1600}>
          <Stack spacing={4} alignItems="center">
            <Typography
              variant="h2"
              sx={{
                fontSize: { xs: '2rem', md: '3rem' },
                fontWeight: 700,
                lineHeight: 1.2
              }}
            >
              {t('homepage.cta.title')}
            </Typography>
            
            <Typography
              variant="h6"
              sx={{
                fontSize: { xs: '1.1rem', md: '1.25rem' },
                opacity: 0.9,
                maxWidth: '600px',
                lineHeight: 1.6
              }}
            >
              {t('homepage.cta.subtitle')}
            </Typography>
            
            <Stack 
              direction={{ xs: 'column', sm: 'row' }} 
              spacing={3} 
              sx={{ mt: 4 }}
            >
              <Button
                variant="contained"
                size="large"
                endIcon={<IconArrowRight />}
                sx={{
                  px: 4,
                  py: 1.5,
                  fontSize: '1.1rem',
                  fontWeight: 600,
                  backgroundColor: 'white',
                  color: theme.palette.primary.main,
                  borderRadius: 2,
                  textTransform: 'none',
                  '&:hover': {
                    backgroundColor: theme.palette.grey[100],
                    transform: 'translateY(-2px)',
                    boxShadow: theme.shadows[8]
                  }
                }}
              >
                {t('homepage.cta.primaryButton')}
              </Button>
              
              <Button
                variant="outlined"
                size="large"
                startIcon={<IconStar />}
                sx={{
                  px: 4,
                  py: 1.5,
                  fontSize: '1.1rem',
                  fontWeight: 600,
                  borderColor: 'white',
                  color: 'white',
                  borderRadius: 2,
                  textTransform: 'none',
                  '&:hover': {
                    backgroundColor: 'rgba(255,255,255,0.1)',
                    borderColor: 'white',
                    transform: 'translateY(-2px)'
                  }
                }}
              >
                {t('homepage.cta.secondaryButton')}
              </Button>
            </Stack>
          </Stack>
        </Fade>
      </Container>
    </Box>
  );
};

export default CTASection;

===== src/views/homepage/components/FeaturesSection.tsx =====
// src/views/homepage/components/FeaturesSection.tsx
import React from 'react';
import { 
  Box, 
  Container, 
  Typography, 
  Grid2 as Grid,
  Card,
  CardContent,
  Stack,
  useTheme,
  Fade
} from '@mui/material';
import { useTranslation } from 'react-i18next';
import { 
  IconQrcode, 
  IconDeviceMobile, 
  IconShield, 
  IconAnalyze, 
  IconBell, 
  IconUsers 
} from '@tabler/icons-react';

const FeaturesSection = () => {
  const { t } = useTranslation();
  const theme = useTheme();

  const features = [
    {
      icon: IconQrcode,
      titleKey: 'homepage.features.digitalCards.title',
      descriptionKey: 'homepage.features.digitalCards.description'
    },
    {
      icon: IconDeviceMobile,
      titleKey: 'homepage.features.qrCustom.title',
      descriptionKey: 'homepage.features.qrCustom.description'
    },
    {
      icon: IconShield,
      titleKey: 'homepage.features.landingPages.title',
      descriptionKey: 'homepage.features.landingPages.description'
    },
    {
      icon: IconAnalyze,
      titleKey: 'homepage.features.privacy.title',
      descriptionKey: 'homepage.features.privacy.description'
    },
    {
      icon: IconBell,
      titleKey: 'homepage.features.notifications.title',
      descriptionKey: 'homepage.features.notifications.description'
    },
    {
      icon: IconUsers,
      titleKey: 'homepage.features.analytics.title',
      descriptionKey: 'homepage.features.analytics.description'
    }
  ];

  return (
    <Box sx={{ py: { xs: 8, md: 12 }, backgroundColor: theme.palette.background.default }}>
      <Container maxWidth="lg">
        <Stack spacing={6}>
          <Box textAlign="center">
            <Typography
              variant="h2"
              sx={{
                fontSize: { xs: '2rem', md: '2.5rem' },
                fontWeight: 600,
                color: theme.palette.text.primary,
                mb: 2
              }}
            >
              {t('homepage.features.title')}
            </Typography>
            <Typography
              variant="h6"
              sx={{
                color: theme.palette.text.secondary,
                maxWidth: '600px',
                mx: 'auto'
              }}
            >
              {t('homepage.features.subtitle')}
            </Typography>
          </Box>

          <Grid container spacing={4}>
            {features.map((feature, index) => (
              <Grid size={{ xs: 12, md: 4 }} key={index}>
                <Fade in timeout={800 + index * 200}>
                  <Card
                    sx={{
                      height: '100%',
                      transition: 'transform 0.3s ease, box-shadow 0.3s ease',
                      '&:hover': {
                        transform: 'translateY(-8px)',
                        boxShadow: theme.shadows[8]
                      }
                    }}
                  >
                    <CardContent sx={{ p: 4 }}>
                      <Stack spacing={3} alignItems="center" textAlign="center">
                        <Box
                          sx={{
                            width: 80,
                            height: 80,
                            borderRadius: '50%',
                            backgroundColor: theme.palette.primary.light,
                            display: 'flex',
                            alignItems: 'center',
                            justifyContent: 'center'
                          }}
                        >
                          <feature.icon size={40} color={theme.palette.primary.main} />
                        </Box>
                        
                        <Typography
                          variant="h5"
                          sx={{
                            fontWeight: 600,
                            color: theme.palette.text.primary
                          }}
                        >
                          {t(feature.titleKey)}
                        </Typography>
                        
                        <Typography
                          variant="body1"
                          sx={{
                            color: theme.palette.text.secondary,
                            lineHeight: 1.6
                          }}
                        >
                          {t(feature.descriptionKey)}
                        </Typography>
                      </Stack>
                    </CardContent>
                  </Card>
                </Fade>
              </Grid>
            ))}
          </Grid>
        </Stack>
      </Container>
    </Box>
  );
};

export default FeaturesSection;

===== src/views/homepage/components/HeroSection.tsx =====
// src/views/homepage/components/HeroSection.tsx
import React from 'react';
import { 
  Box, 
  Container, 
  Typography, 
  Button, 
  Grid2 as Grid,
  Stack,
  useTheme,
  useMediaQuery,
  Fade,
  Slide
} from '@mui/material';
import { useTranslation } from 'react-i18next';
import { IconQrcode, IconDeviceMobile, IconArrowRight } from '@tabler/icons-react';

const HeroSection = () => {
  const { t } = useTranslation();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));

  return (
    <Box
      sx={{
        background: `linear-gradient(135deg, ${theme.palette.primary.light} 0%, ${theme.palette.background.paper} 100%)`,
        minHeight: '90vh',
        display: 'flex',
        alignItems: 'center',
        pt: { xs: 8, md: 12 },
        pb: { xs: 8, md: 12 }
      }}
    >
      <Container maxWidth="lg">
        <Grid container spacing={4} alignItems="center">
          <Grid size={{ xs: 12, md: 6 }}>
            <Fade in timeout={1000}>
              <Stack spacing={3}>
                <Typography
                  variant="h1"
                  sx={{
                    fontSize: { xs: '2.5rem', md: '3.5rem' },
                    fontWeight: 700,
                    color: theme.palette.text.primary,
                    lineHeight: 1.2
                  }}
                >
                  {t('homepage.hero.title')}
                  <Box component="span" sx={{ color: theme.palette.primary.main }}>
                    {t('homepage.hero.titleHighlight')}
                  </Box>
                </Typography>
                
                <Typography
                  variant="h6"
                  sx={{
                    color: theme.palette.text.secondary,
                    fontSize: { xs: '1.1rem', md: '1.25rem' },
                    lineHeight: 1.6,
                    maxWidth: '500px'
                  }}
                >
                  {t('homepage.hero.subtitle')}
                </Typography>
                
                <Stack direction={{ xs: 'column', sm: 'row' }} spacing={2} sx={{ mt: 4 }}>
                  <Button
                    variant="contained"
                    size="large"
                    endIcon={<IconArrowRight />}
                    sx={{
                      px: 4,
                      py: 1.5,
                      fontSize: '1.1rem',
                      borderRadius: 2,
                      textTransform: 'none'
                    }}
                  >
                    {t('homepage.hero.primaryButton')}
                  </Button>
                  
                  <Button
                    variant="outlined"
                    size="large"
                    startIcon={<IconDeviceMobile />}
                    sx={{
                      px: 4,
                      py: 1.5,
                      fontSize: '1.1rem',
                      borderRadius: 2,
                      textTransform: 'none'
                    }}
                  >
                    {t('homepage.hero.secondaryButton')}
                  </Button>
                </Stack>
              </Stack>
            </Fade>
          </Grid>
          
          <Grid size={{ xs: 12, md: 6 }}>
            <Slide direction="left" in timeout={1200}>
              <Box
                sx={{
                  display: 'flex',
                  justifyContent: 'center',
                  alignItems: 'center',
                  height: '100%'
                }}
              >
                <Box
                  component="img"
                  src="/images/hero-mockup.png"
                  alt={t('homepage.hero.imageAlt')}
                  sx={{
                    width: '100%',
                    maxWidth: '500px',
                    height: 'auto',
                    filter: 'drop-shadow(0 20px 40px rgba(0,0,0,0.1))'
                  }}
                />
              </Box>
            </Slide>
          </Grid>
        </Grid>
      </Container>
    </Box>
  );
};

export default HeroSection;

===== src/views/homepage/components/HomepageHeader.tsx =====
// src/views/homepage/components/HomepageHeader.tsx
import React from 'react';
import {
  AppBar,
  Toolbar,
  Button,
  Box,
  Container,
  Stack,
  useTheme,
  useMediaQuery,
  IconButton,
  Menu,
  MenuItem,
  styled
} from '@mui/material';
import { useTranslation } from 'react-i18next';
import { 
  IconMenu2, 
  IconMoon, 
  IconSun,
  IconUserPlus,
  IconLogin
} from '@tabler/icons-react';
import { useSelector, useDispatch } from 'src/store/Store';
import { setDarkMode } from 'src/store/customizer/CustomizerSlice';
import { AppState } from 'src/store/Store';
import Logo from 'src/layouts/full/shared/logo/Logo';
import Language from 'src/layouts/full/vertical/header/Language'; // استيراد مكون اللغة الأصلي

const HomepageHeader = () => {
  const { t } = useTranslation();
  const theme = useTheme();
  const lgUp = useMediaQuery(theme.breakpoints.up('lg'));
  const lgDown = useMediaQuery(theme.breakpoints.down('lg'));
  const customizer = useSelector((state: AppState) => state.customizer);
  const dispatch = useDispatch();

  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);

  const handleMenu = (event: React.MouseEvent<HTMLElement>) => {
    setAnchorEl(event.currentTarget);
  };

  const handleClose = () => {
    setAnchorEl(null);
  };

  const navItems = [
    { labelKey: 'header.home', href: '#home' },
    { labelKey: 'header.features', href: '#features' },
    { labelKey: 'header.howItWorks', href: '#how-it-works' },
    { labelKey: 'header.pricing', href: '#pricing' },
    { labelKey: 'header.support', href: '#support' }
  ];

  const AppBarStyled = styled(AppBar)(({ theme }) => ({
    boxShadow: 'none',
    background: theme.palette.background.paper,
    justifyContent: 'center',
    backdropFilter: 'blur(4px)',
    borderBottom: `1px solid ${theme.palette.divider}`,
    minHeight: customizer.TopbarHeight,
  }));

  const ToolbarStyled = styled(Toolbar)(({ theme }) => ({
    width: '100%',
    color: theme.palette.text.secondary,
    padding: '0 !important'
  }));

  return (
    <AppBarStyled position="sticky" color="default">
      <Container maxWidth="lg">
        <ToolbarStyled>
          {/* Logo */}
          <Logo />
          
          {/* Navigation Items - Desktop */}
          {lgUp && (
            <Box sx={{ ml: 4, display: 'flex', gap: 1 }}>
              {navItems.map((item) => (
                <Button
                  key={item.href}
                  color="inherit"
                  href={item.href}
                  sx={{
                    textTransform: 'none',
                    fontWeight: 500,
                    px: 2,
                    py: 1,
                    borderRadius: 2,
                    '&:hover': {
                      backgroundColor: theme.palette.primary.light,
                      color: theme.palette.primary.main
                    }
                  }}
                >
                  {t(item.labelKey)}
                </Button>
              ))}
            </Box>
          )}

          <Box flexGrow={1} />

          {/* Right Side Actions */}
          <Stack spacing={1} direction="row" alignItems="center">
            {/* Language Selector - استخدام المكون الأصلي */}
            <Language />

            {/* Dark Mode Toggle */}
            <IconButton 
              size="large" 
              color="inherit"
              onClick={() => dispatch(setDarkMode(customizer.activeMode === 'light' ? 'dark' : 'light'))}
              sx={{
                '&:hover': {
                  backgroundColor: theme.palette.primary.light
                }
              }}
            >
              {customizer.activeMode === 'light' ? (
                <IconMoon size="20" />
              ) : (
                <IconSun size="20" />
              )}
            </IconButton>

            {/* Desktop Auth Buttons */}
            {lgUp && (
              <>
                <Button
                  variant="outlined"
                  startIcon={<IconLogin size="18" />}
                  href="/auth/login"
                  sx={{
                    textTransform: 'none',
                    borderRadius: 2,
                    px: 3,
                    py: 1,
                    borderColor: theme.palette.divider,
                    '&:hover': {
                      borderColor: theme.palette.primary.main,
                      backgroundColor: theme.palette.primary.light
                    }
                  }}
                >
                  {t('header.login')}
                </Button>
                
                <Button
                  variant="contained"
                  startIcon={<IconUserPlus size="18" />}
                  href="/auth/register"
                  sx={{
                    textTransform: 'none',
                    borderRadius: 2,
                    px: 3,
                    py: 1,
                    backgroundColor: theme.palette.primary.main,
                    '&:hover': {
                      backgroundColor: theme.palette.primary.dark
                    }
                  }}
                >
                  {t('header.signup')}
                </Button>
              </>
            )}

            {/* Mobile Menu Button */}
            {lgDown && (
              <IconButton
                onClick={handleMenu}
                color="inherit"
                size="large"
                sx={{
                  '&:hover': {
                    backgroundColor: theme.palette.primary.light
                  }
                }}
              >
                <IconMenu2 size="20" />
              </IconButton>
            )}
          </Stack>

          {/* Mobile Menu */}
          <Menu
            anchorEl={anchorEl}
            open={Boolean(anchorEl)}
            onClose={handleClose}
            PaperProps={{
              sx: {
                width: '250px',
                mt: 1
              }
            }}
          >
            {navItems.map((item) => (
              <MenuItem 
                key={item.href} 
                onClick={handleClose}
                component="a"
                href={item.href}
              >
                {t(item.labelKey)}
              </MenuItem>
            ))}
            <Box sx={{ borderTop: 1, borderColor: 'divider', mt: 1, pt: 1 }}>
              <MenuItem 
                onClick={handleClose}
                component="a"
                href="/auth/login"
                sx={{ 
                  display: 'flex', 
                  alignItems: 'center', 
                  gap: 1 
                }}
              >
                <IconLogin size="18" />
                {t('header.login')}
              </MenuItem>
              <MenuItem 
                onClick={handleClose}
                component="a"
                href="/auth/register"
                sx={{ 
                  display: 'flex', 
                  alignItems: 'center', 
                  gap: 1,
                  color: theme.palette.primary.main
                }}
              >
                <IconUserPlus size="18" />
                {t('header.signup')}
              </MenuItem>
            </Box>
          </Menu>
        </ToolbarStyled>
      </Container>
    </AppBarStyled>
  );
};

export default HomepageHeader;

===== src/views/homepage/components/HowItWorksSection.tsx =====
// src/views/homepage/components/HowItWorksSection.tsx
import React from 'react';
import { 
  Box, 
  Container, 
  Typography, 
  Grid2 as Grid,
  Card,
  CardContent,
  Stack,
  useTheme,
  Fade,
  Avatar
} from '@mui/material';
import { useTranslation } from 'react-i18next';
import { 
  IconUserPlus, 
  IconShare, 
  IconEye 
} from '@tabler/icons-react';

const HowItWorksSection = () => {
  const { t } = useTranslation();
  const theme = useTheme();

  const steps = [
    {
      icon: IconUserPlus,
      titleKey: 'homepage.howItWorks.step1.title',
      descriptionKey: 'homepage.howItWorks.step1.description',
      number: '01'
    },
    {
      icon: IconShare,
      titleKey: 'homepage.howItWorks.step2.title',
      descriptionKey: 'homepage.howItWorks.step2.description',
      number: '02'
    },
    {
      icon: IconEye,
      titleKey: 'homepage.howItWorks.step3.title',
      descriptionKey: 'homepage.howItWorks.step3.description',
      number: '03'
    }
  ];

  return (
    <Box sx={{ py: { xs: 8, md: 12 }, backgroundColor: theme.palette.background.paper }}>
      <Container maxWidth="lg">
        <Stack spacing={6}>
          <Box textAlign="center">
            <Typography
              variant="h2"
              sx={{
                fontSize: { xs: '2rem', md: '2.5rem' },
                fontWeight: 600,
                color: theme.palette.text.primary,
                mb: 2
              }}
            >
              {t('homepage.howItWorks.title')}
            </Typography>
            <Typography
              variant="h6"
              sx={{
                color: theme.palette.text.secondary,
                maxWidth: '600px',
                mx: 'auto'
              }}
            >
              {t('homepage.howItWorks.subtitle')}
            </Typography>
          </Box>

          <Grid container spacing={4}>
            {steps.map((step, index) => (
              <Grid size={{ xs: 12, md: 4 }} key={index}>
                <Fade in timeout={1000 + index * 200}>
                  <Card
                    sx={{
                      height: '100%',
                      textAlign: 'center',
                      position: 'relative',
                      overflow: 'visible',
                      transition: 'transform 0.3s ease',
                      '&:hover': {
                        transform: 'translateY(-8px)'
                      }
                    }}
                  >
                    <Box
                      sx={{
                        position: 'absolute',
                        top: -20,
                        left: '50%',
                        transform: 'translateX(-50%)',
                        width: 60,
                        height: 60,
                        borderRadius: '50%',
                        backgroundColor: theme.palette.primary.main,
                        display: 'flex',
                        alignItems: 'center',
                        justifyContent: 'center',
                        color: 'white',
                        fontSize: '1.5rem',
                        fontWeight: 'bold',
                        boxShadow: theme.shadows[4]
                      }}
                    >
                      {step.number}
                    </Box>
                    
                    <CardContent sx={{ pt: 6, pb: 4 }}>
                      <Stack spacing={3} alignItems="center">
                        <Avatar
                          sx={{
                            width: 80,
                            height: 80,
                            backgroundColor: theme.palette.primary.light,
                            color: theme.palette.primary.main
                          }}
                        >
                          <step.icon size={40} />
                        </Avatar>
                        
                        <Typography
                          variant="h5"
                          sx={{
                            fontWeight: 600,
                            color: theme.palette.text.primary
                          }}
                        >
                          {t(step.titleKey)}
                        </Typography>
                        
                        <Typography
                          variant="body1"
                          sx={{
                            color: theme.palette.text.secondary,
                            lineHeight: 1.6
                          }}
                        >
                          {t(step.descriptionKey)}
                        </Typography>
                      </Stack>
                    </CardContent>
                  </Card>
                </Fade>
              </Grid>
            ))}
          </Grid>
        </Stack>
      </Container>
    </Box>
  );
};

export default HowItWorksSection;

===== src/views/homepage/components/PricingSection.tsx =====
// src/views/homepage/components/PricingSection.tsx
import React from 'react';
import { 
  Box, 
  Container, 
  Typography, 
  Grid2 as Grid,
  Card,
  CardContent,
  Stack,
  Button,
  List,
  ListItem,
  ListItemIcon,
  ListItemText,
  Chip,
  useTheme,
  Fade
} from '@mui/material';
import { useTranslation } from 'react-i18next';
import { IconCheck, IconStar } from '@tabler/icons-react';

const PricingSection = () => {
  const { t } = useTranslation();
  const theme = useTheme();

  const plans = [
    {
      nameKey: 'homepage.pricing.free.name',
      priceKey: 'homepage.pricing.free.price',
      descriptionKey: 'homepage.pricing.free.description',
      featuresKey: 'homepage.pricing.free.features',
      buttonKey: 'homepage.pricing.free.button',
      popular: false,
      color: theme.palette.grey[100]
    },
    {
      nameKey: 'homepage.pricing.pro.name',
      priceKey: 'homepage.pricing.pro.price',
      descriptionKey: 'homepage.pricing.pro.description',
      featuresKey: 'homepage.pricing.pro.features',
      buttonKey: 'homepage.pricing.pro.button',
      popular: true,
      color: theme.palette.primary.light
    },
    {
      nameKey: 'homepage.pricing.business.name',
      priceKey: 'homepage.pricing.business.price',
      descriptionKey: 'homepage.pricing.business.description',
      featuresKey: 'homepage.pricing.business.features',
      buttonKey: 'homepage.pricing.business.button',
      popular: false,
      color: theme.palette.secondary.light
    }
  ];

  return (
    <Box sx={{ py: { xs: 8, md: 12 }, backgroundColor: theme.palette.background.paper }}>
      <Container maxWidth="lg">
        <Stack spacing={6}>
          <Box textAlign="center">
            <Typography
              variant="h2"
              sx={{
                fontSize: { xs: '2rem', md: '2.5rem' },
                fontWeight: 600,
                color: theme.palette.text.primary,
                mb: 2
              }}
            >
              {t('homepage.pricing.title')}
            </Typography>
            <Typography
              variant="h6"
              sx={{
                color: theme.palette.text.secondary,
                maxWidth: '600px',
                mx: 'auto'
              }}
            >
              {t('homepage.pricing.subtitle')}
            </Typography>
          </Box>

          <Grid container spacing={4}>
            {plans.map((plan, index) => (
              <Grid size={{ xs: 12, md: 4 }} key={index}>
                <Fade in timeout={1400 + index * 200}>
                  <Card
                    sx={{
                      height: '100%',
                      position: 'relative',
                      border: plan.popular ? `2px solid ${theme.palette.primary.main}` : 'none',
                      transform: plan.popular ? 'scale(1.05)' : 'scale(1)',
                      transition: 'transform 0.3s ease, box-shadow 0.3s ease',
                      '&:hover': {
                        transform: plan.popular ? 'scale(1.08)' : 'scale(1.03)',
                        boxShadow: theme.shadows[12]
                      }
                    }}
                  >
                    {plan.popular && (
                      <Box
                        sx={{
                          position: 'absolute',
                          top: -12,
                          left: '50%',
                          transform: 'translateX(-50%)',
                          zIndex: 1
                        }}
                      >
                        <Chip
                          icon={<IconStar size={16} />}
                          label={t('homepage.pricing.popular')}
                          color="primary"
                          sx={{
                            fontWeight: 600,
                            fontSize: '0.875rem'
                          }}
                        />
                      </Box>
                    )}
                    
                    <CardContent sx={{ p: 4, height: '100%' }}>
                      <Stack spacing={3} height="100%">
                        <Box textAlign="center">
                          <Typography
                            variant="h4"
                            sx={{
                              fontWeight: 700,
                              color: theme.palette.text.primary,
                              mb: 1
                            }}
                          >
                            {t(plan.nameKey)}
                          </Typography>
                          
                          <Typography
                            variant="h3"
                            sx={{
                              fontWeight: 800,
                              color: theme.palette.primary.main,
                              mb: 1
                            }}
                          >
                            {t(plan.priceKey)}
                          </Typography>
                          
                          <Typography
                            variant="body2"
                            sx={{
                              color: theme.palette.text.secondary
                            }}
                          >
                            {t(plan.descriptionKey)}
                          </Typography>
                        </Box>

                        <List sx={{ flexGrow: 1 }}>
                          {Array.from({ length: 5 }, (_, i) => (
                            <ListItem key={i} sx={{ px: 0 }}>
                              <ListItemIcon sx={{ minWidth: 32 }}>
                                <IconCheck 
                                  size={20} 
                                  color={theme.palette.success.main}
                                />
                              </ListItemIcon>
                              <ListItemText
                                primary={t(`${plan.featuresKey}.${i}`)}
                                sx={{
                                  '& .MuiListItemText-primary': {
                                    fontSize: '0.875rem',
                                    color: theme.palette.text.secondary
                                  }
                                }}
                              />
                            </ListItem>
                          ))}
                        </List>

                        <Button
                          variant={plan.popular ? 'contained' : 'outlined'}
                          size="large"
                          fullWidth
                          sx={{
                            py: 1.5,
                            fontSize: '1rem',
                            fontWeight: 600,
                            textTransform: 'none',
                            borderRadius: 2
                          }}
                        >
                          {t(plan.buttonKey)}
                        </Button>
                      </Stack>
                    </CardContent>
                  </Card>
                </Fade>
              </Grid>
            ))}
          </Grid>
        </Stack>
      </Container>
    </Box>
  );
};

export default PricingSection;

===== src/views/homepage/components/TestimonialsSection.tsx =====
// src/views/homepage/components/TestimonialsSection.tsx
import React from 'react';
import { 
  Box, 
  Container, 
  Typography, 
  Grid2 as Grid,
  Card,
  CardContent,
  Stack,
  Avatar,
  Rating,
  useTheme,
  Fade
} from '@mui/material';
import { useTranslation } from 'react-i18next';
import { IconQuote } from '@tabler/icons-react';

const TestimonialsSection = () => {
  const { t } = useTranslation();
  const theme = useTheme();

  const testimonials = [
    {
      nameKey: 'homepage.testimonials.testimonial1.name',
      titleKey: 'homepage.testimonials.testimonial1.title',
      reviewKey: 'homepage.testimonials.testimonial1.review',
      avatar: '/images/testimonials/user1.jpg',
      rating: 5
    },
    {
      nameKey: 'homepage.testimonials.testimonial2.name',
      titleKey: 'homepage.testimonials.testimonial2.title',
      reviewKey: 'homepage.testimonials.testimonial2.review',
      avatar: '/images/testimonials/user2.jpg',
      rating: 5
    },
    {
      nameKey: 'homepage.testimonials.testimonial3.name',
      titleKey: 'homepage.testimonials.testimonial3.title',
      reviewKey: 'homepage.testimonials.testimonial3.review',
      avatar: '/images/testimonials/user3.jpg',
      rating: 5
    }
  ];

  return (
    <Box sx={{ py: { xs: 8, md: 12 }, backgroundColor: theme.palette.background.default }}>
      <Container maxWidth="lg">
        <Stack spacing={6}>
          <Box textAlign="center">
            <Typography
              variant="h2"
              sx={{
                fontSize: { xs: '2rem', md: '2.5rem' },
                fontWeight: 600,
                color: theme.palette.text.primary,
                mb: 2
              }}
            >
              {t('homepage.testimonials.title')}
            </Typography>
            <Typography
              variant="h6"
              sx={{
                color: theme.palette.text.secondary,
                maxWidth: '600px',
                mx: 'auto'
              }}
            >
              {t('homepage.testimonials.subtitle')}
            </Typography>
          </Box>

          <Grid container spacing={4}>
            {testimonials.map((testimonial, index) => (
              <Grid size={{ xs: 12, md: 4 }} key={index}>
                <Fade in timeout={1200 + index * 200}>
                  <Card
                    sx={{
                      height: '100%',
                      position: 'relative',
                      transition: 'transform 0.3s ease, box-shadow 0.3s ease',
                      '&:hover': {
                        transform: 'translateY(-8px)',
                        boxShadow: theme.shadows[8]
                      }
                    }}
                  >
                    <Box
                      sx={{
                        position: 'absolute',
                        top: 16,
                        right: 16,
                        color: theme.palette.primary.main,
                        opacity: 0.3
                      }}
                    >
                      <IconQuote size={40} />
                    </Box>
                    
                    <CardContent sx={{ p: 4 }}>
                      <Stack spacing={3}>
                        <Rating
                          value={testimonial.rating}
                          readOnly
                          sx={{
                            color: theme.palette.warning.main
                          }}
                        />
                        
                        <Typography
                          variant="body1"
                          sx={{
                            color: theme.palette.text.secondary,
                            lineHeight: 1.6,
                            fontStyle: 'italic'
                          }}
                        >
                          "{t(testimonial.reviewKey)}"
                        </Typography>
                        
                        <Stack direction="row" spacing={2} alignItems="center">
                          <Avatar
                            src={testimonial.avatar}
                            sx={{ width: 50, height: 50 }}
                          />
                          <Box>
                            <Typography
                              variant="subtitle1"
                              sx={{
                                fontWeight: 600,
                                color: theme.palette.text.primary
                              }}
                            >
                              {t(testimonial.nameKey)}
                            </Typography>
                            <Typography
                              variant="body2"
                              sx={{
                                color: theme.palette.text.secondary
                              }}
                            >
                              {t(testimonial.titleKey)}
                            </Typography>
                          </Box>
                        </Stack>
                      </Stack>
                    </CardContent>
                  </Card>
                </Fade>
              </Grid>
            ))}
          </Grid>
        </Stack>
      </Container>
    </Box>
  );
};

export default TestimonialsSection;

===== src/views/homepage/Homepage.tsx =====
// تحديث src/views/homepage/Homepage.tsx لاستخدام الهيدر الجديد
import { Box } from '@mui/material';
import { useTranslation } from 'react-i18next';
import PageContainer from 'src/components/container/PageContainer';
import HomepageHeader from './components/HomepageHeader';
import HeroSection from './components/HeroSection';
import FeaturesSection from './components/FeaturesSection';
import HowItWorksSection from './components/HowItWorksSection';
import TestimonialsSection from './components/TestimonialsSection';
import PricingSection from './components/PricingSection';
import CTASection from './components/CTASection';

const Homepage = () => {
  const { t } = useTranslation();

  return (
    <PageContainer title={t('homepage.title')} description={t('homepage.description')}>
      <Box sx={{ minHeight: '100vh' }}>
        {/* Homepage Header */}
        <HomepageHeader />
        
        {/* Hero Section */}
        <HeroSection />
        
        {/* Features Section */}
        <FeaturesSection />
        
        {/* How It Works Section */}
        <HowItWorksSection />
        
        {/* Testimonials Section */}
        <TestimonialsSection />
        
        {/* Pricing Section */}
        <PricingSection />
        
        {/* Final CTA Section */}
        <CTASection />
      </Box>
    </PageContainer>
  );
};

export default Homepage;

===== src/views/public/PublicCard.tsx =====
// src/views/public/PublicCard.tsx
import React, { useState, useEffect } from 'react';
import { useParams } from 'react-router';
import {
  Box,
  Container,
  Card,
  CardContent,
  Typography,
  Button,
  Stack,
  Avatar,
  IconButton,
  useTheme,
  useMediaQuery,
  Fab,
  Dialog,
  DialogContent,
  Chip,
  Divider,
  Alert,
  CircularProgress,
  Tooltip,
  Slide
} from '@mui/material';
import { useTranslation } from 'react-i18next';
import {
  IconDownload,
  IconShare,
  IconQrcode,
  IconMail,
  IconPhone,
  IconWorld,
  IconMapPin,
  IconBrandLinkedin,
  IconBrandTwitter,
  IconBrandFacebook,
  IconBrandInstagram,
  IconX,
  IconCheck,
  IconCopy,
  IconDeviceMobile,
  IconDeviceDesktop,
  IconHeart,
  IconHeartFilled
} from '@tabler/icons-react';
import { alpha } from '@mui/material/styles';

interface SocialLink {
  id: string;
  platform: string;
  url: string;
}

interface CardData {
  id: string | undefined;
  firstName: string;
  lastName: string;
  jobTitle: string;
  company: string;
  bio: string;
  avatar: string;
  email: string;
  phone: string;
  website: string;
  address: string;
  socialLinks: SocialLink[];
  template: string;
  primaryColor: string;
  backgroundColor: string;
  allowDownload: boolean;
  showQR: boolean;
  isPublic: boolean;
  views: number;
  likes: number;
  qrCode: string;
}

const PublicCard = () => {
  const { username, cardId } = useParams();
  const { t } = useTranslation();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));

  const [loading, setLoading] = useState(true);
  const [cardData, setCardData] = useState<CardData | null>(null);
  const [qrDialog, setQrDialog] = useState(false);
  const [shareDialog, setShareDialog] = useState(false);
  const [copied, setCopied] = useState(false);
  const [liked, setLiked] = useState(false);
  const [viewCount, setViewCount] = useState(0);

  useEffect(() => {
    loadPublicCard();
    trackView();
  }, [username, cardId]);

  const loadPublicCard = async () => {
    try {
      setLoading(true);
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      const mockCardData = {
        id: cardId || username,
        firstName: 'أحمد',
        lastName: 'محمد',
        jobTitle: 'مطور تطبيقات محترف',
        company: 'شركة التقنية المتقدمة',
        bio: 'مطور تطبيقات محترف مع خبرة 5 سنوات في تطوير التطبيقات المحمولة والويب. متخصص في React Native و Flutter مع شغف بالتقنيات الحديثة والحلول الإبداعية.',
        avatar: '/images/avatars/user1.jpg',
        email: 'ahmed.mohammed@techcompany.com',
        phone: '+966501234567',
        website: 'https://ahmed-dev.com',
        address: 'الرياض، المملكة العربية السعودية',
        socialLinks: [
          { id: '1', platform: 'linkedin', url: 'https://linkedin.com/in/ahmed-mohammed' },
          { id: '2', platform: 'twitter', url: 'https://twitter.com/ahmed_dev' },
          { id: '3', platform: 'github', url: 'https://github.com/ahmed-mohammed' },
          { id: '4', platform: 'instagram', url: 'https://instagram.com/ahmed_dev' }
        ],
        template: 'modern',
        primaryColor: '#1976d2',
        backgroundColor: '#ffffff',
        allowDownload: true,
        showQR: true,
        isPublic: true,
        views: 1234,
        likes: 89,
        qrCode: `https://api.qrserver.com/v1/create-qr-code/?size=300x300&data=${encodeURIComponent(window.location.href)}`
      };
      
      setCardData(mockCardData);
      setViewCount(mockCardData.views);
    } catch (error) {
      console.error('Failed to load public card:', error);
    } finally {
      setLoading(false);
    }
  };

  const trackView = async () => {
    try {
      // Track view analytics
      setViewCount(prev => prev + 1);
    } catch (error) {
      console.error('Failed to track view:', error);
    }
  };

  const handleDownload = async () => {
    if (!cardData?.allowDownload) return;
    
    try {
      // Generate vCard format
      const vCard = `BEGIN:VCARD
VERSION:3.0
FN:${cardData.firstName} ${cardData.lastName}
ORG:${cardData.company}
TITLE:${cardData.jobTitle}
EMAIL:${cardData.email}
TEL:${cardData.phone}
URL:${cardData.website}
ADR:;;${cardData.address};;;;
NOTE:${cardData.bio}
END:VCARD`;

      const blob = new Blob([vCard], { type: 'text/vcard' });
      const url = URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = url;
      link.download = `${cardData.firstName}-${cardData.lastName}.vcf`;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      URL.revokeObjectURL(url);
    } catch (error) {
      console.error('Failed to download card:', error);
    }
  };

  const handleShare = async () => {
    if (!cardData) return;
    const shareData = {
      title: `${cardData.firstName} ${cardData.lastName} - ${cardData.jobTitle}`,
      text: cardData.bio,
      url: window.location.href
    };

    if (navigator.share) {
      try {
        await navigator.share(shareData);
      } catch (error) {
        console.error('Failed to share:', error);
        setShareDialog(true);
      }
    } else {
      setShareDialog(true);
    }
  };

  const handleCopyLink = async () => {
    try {
      await navigator.clipboard.writeText(window.location.href);
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
    } catch (error) {
      console.error('Failed to copy link:', error);
    }
  };

  const handleLike = async () => {
    try {
      setLiked(!liked);
      // API call to like/unlike
    } catch (error) {
      console.error('Failed to like card:', error);
    }
  };

  const getSocialIcon = (platform: string) => {
    switch (platform.toLowerCase()) {
      case 'linkedin': return IconBrandLinkedin;
      case 'twitter': return IconBrandTwitter;
      case 'facebook': return IconBrandFacebook;
      case 'instagram': return IconBrandInstagram;
      default: return IconWorld;
    }
  };

  if (loading) {
    return (
      <Box
        sx={{
          minHeight: '100vh',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          backgroundColor: theme.palette.grey[100]
        }}
      >
        <Stack alignItems="center" spacing={3}>
          <CircularProgress size={64} thickness={4} />
          <Typography variant="h6" color="text.secondary">
            {t('publicCard.loading')}
          </Typography>
        </Stack>
      </Box>
    );
  }

  if (!cardData || !cardData.isPublic) {
    return (
      <Box
        sx={{
          minHeight: '100vh',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          backgroundColor: theme.palette.grey[100]
        }}
      >
        <Container maxWidth="sm">
          <Alert severity="error" sx={{ textAlign: 'center' }}>
            <Typography variant="h6" sx={{ mb: 1 }}>
              {t('publicCard.notFound')}
            </Typography>
            <Typography variant="body2">
              {t('publicCard.notFoundDescription')}
            </Typography>
          </Alert>
        </Container>
      </Box>
    );
  }

  return (
    <Box
      sx={{
        minHeight: '100vh',
        backgroundColor: theme.palette.grey[100],
        py: { xs: 2, md: 4 }
      }}
    >
      <Container maxWidth="md">
        {/* Main Card */}
        <Card
          sx={{
            borderRadius: { xs: 3, md: 4 },
            overflow: 'hidden',
            boxShadow: theme.shadows[12],
            background: `linear-gradient(135deg, ${cardData.primaryColor} 0%, ${alpha(cardData.primaryColor, 0.8)} 100%)`,
            position: 'relative',
            mb: 3
          }}
        >
          {/* Background Pattern */}
          <Box
            sx={{
              position: 'absolute',
              top: 0,
              left: 0,
              right: 0,
              bottom: 0,
              backgroundImage: `radial-gradient(circle at 20% 80%, ${alpha('#ffffff', 0.1)} 0%, transparent 50%),
                               radial-gradient(circle at 80% 20%, ${alpha('#ffffff', 0.1)} 0%, transparent 50%)`,
              pointerEvents: 'none'
            }}
          />

          <CardContent sx={{ p: { xs: 3, md: 4 }, position: 'relative' }}>
            <Stack spacing={4}>
              {/* Header Section */}
              <Stack direction={{ xs: 'column', sm: 'row' }} spacing={3} alignItems={{ xs: 'center', sm: 'flex-start' }}>
                <Avatar
                  src={cardData.avatar}
                  sx={{
                    width: { xs: 120, md: 150 },
                    height: { xs: 120, md: 150 },
                    border: `4px solid ${alpha('#ffffff', 0.3)}`,
                    boxShadow: theme.shadows[8]
                  }}
                >
                  {cardData.firstName?.[0]}{cardData.lastName?.[0]}
                </Avatar>
                
                <Stack spacing={2} sx={{ flex: 1, textAlign: { xs: 'center', sm: 'left' } }}>
                  <Stack spacing={1}>
                    <Typography
                      variant={isMobile ? 'h4' : 'h3'}
                      sx={{
                        color: 'white',
                        fontWeight: 800,
                        textShadow: '0 2px 4px rgba(0,0,0,0.3)'
                      }}
                    >
                      {cardData.firstName} {cardData.lastName}
                    </Typography>
                    
                    <Typography
                      variant={isMobile ? 'h6' : 'h5'}
                      sx={{
                        color: alpha('#ffffff', 0.95),
                        fontWeight: 500
                      }}
                    >
                      {cardData.jobTitle}
                    </Typography>
                    
                    <Typography
                      variant="body1"
                      sx={{
                        color: alpha('#ffffff', 0.9),
                        fontWeight: 400
                      }}
                    >
                      {cardData.company}
                    </Typography>
                  </Stack>

                  {/* Stats */}
                  <Stack direction="row" spacing={3} justifyContent={{ xs: 'center', sm: 'flex-start' }}>
                    <Stack alignItems="center">
                      <Typography variant="h6" sx={{ color: 'white', fontWeight: 700 }}>
                        {viewCount.toLocaleString()}
                      </Typography>
                      <Typography variant="caption" sx={{ color: alpha('#ffffff', 0.8) }}>
                        {t('publicCard.views')}
                      </Typography>
                    </Stack>
                    
                    <Stack alignItems="center">
                      <Typography variant="h6" sx={{ color: 'white', fontWeight: 700 }}>
                        {cardData.likes?.toLocaleString()}
                      </Typography>
                      <Typography variant="caption" sx={{ color: alpha('#ffffff', 0.8) }}>
                        {t('publicCard.likes')}
                      </Typography>
                    </Stack>
                  </Stack>
                </Stack>

                {/* Action Buttons */}
                <Stack direction={{ xs: 'row', sm: 'column' }} spacing={1}>
                  <Tooltip title={liked ? t('publicCard.unlike') : t('publicCard.like')}>
                    <IconButton
                      onClick={handleLike}
                      sx={{
                        backgroundColor: alpha('#ffffff', 0.2),
                        color: 'white',
                        '&:hover': {
                          backgroundColor: alpha('#ffffff', 0.3)
                        }
                      }}
                    >
                      {liked ? <IconHeartFilled /> : <IconHeart />}
                    </IconButton>
                  </Tooltip>

                  <Tooltip title={t('publicCard.share')}>
                    <IconButton
                      onClick={handleShare}
                      sx={{
                        backgroundColor: alpha('#ffffff', 0.2),
                        color: 'white',
                        '&:hover': {
                          backgroundColor: alpha('#ffffff', 0.3)
                        }
                      }}
                    >
                      <IconShare />
                    </IconButton>
                  </Tooltip>

                  {cardData.showQR && (
                    <Tooltip title={t('publicCard.showQR')}>
                      <IconButton
                        onClick={() => setQrDialog(true)}
                        sx={{
                          backgroundColor: alpha('#ffffff', 0.2),
                          color: 'white',
                          '&:hover': {
                            backgroundColor: alpha('#ffffff', 0.3)
                          }
                        }}
                      >
                        <IconQrcode />
                      </IconButton>
                    </Tooltip>
                  )}
                </Stack>
              </Stack>

              {/* Bio */}
              {cardData.bio && (
                <Typography
                  variant="body1"
                  sx={{
                    color: alpha('#ffffff', 0.95),
                    fontSize: { xs: '1rem', md: '1.1rem' },
                    lineHeight: 1.6,
                    textAlign: { xs: 'center', sm: 'left' }
                  }}
                >
                  {cardData.bio}
                </Typography>
              )}
            </Stack>
          </CardContent>
        </Card>

        {/* Contact Information */}
        <Card
          sx={{
            borderRadius: 3,
            boxShadow: theme.shadows[4],
            mb: 3
          }}
        >
          <CardContent sx={{ p: { xs: 3, md: 4 } }}>
            <Typography variant="h6" fontWeight={600} sx={{ mb: 3 }}>
              {t('publicCard.contactInfo')}
            </Typography>
            
            <Stack spacing={2}>
              {cardData.email && (
                <Stack
                  direction="row"
                  spacing={2}
                  alignItems="center"
                  sx={{
                    p: 2,
                    borderRadius: 2,
                    backgroundColor: theme.palette.grey[50],
                    transition: 'all 0.2s ease',
                    '&:hover': {
                      backgroundColor: theme.palette.grey[100],
                      transform: 'translateX(4px)'
                    }
                  }}
                  component="a"
                  href={`mailto:${cardData.email}`}
                >
                  <IconMail size={24} color={theme.palette.primary.main} />
                  <Typography variant="body1" sx={{ flex: 1 }}>
                    {cardData.email}
                  </Typography>
                </Stack>
              )}

              {cardData.phone && (
                <Stack
                  direction="row"
                  spacing={2}
                  alignItems="center"
                  sx={{
                    p: 2,
                    borderRadius: 2,
                    backgroundColor: theme.palette.grey[50],
                    transition: 'all 0.2s ease',
                    '&:hover': {
                      backgroundColor: theme.palette.grey[100],
                      transform: 'translateX(4px)'
                    }
                  }}
                  component="a"
                  href={`tel:${cardData.phone}`}
                >
                  <IconPhone size={24} color={theme.palette.success.main} />
                  <Typography variant="body1" sx={{ flex: 1 }}>
                    {cardData.phone}
                  </Typography>
                </Stack>
              )}

              {cardData.website && (
                <Stack
                  direction="row"
                  spacing={2}
                  alignItems="center"
                  sx={{
                    p: 2,
                    borderRadius: 2,
                    backgroundColor: theme.palette.grey[50],
                    transition: 'all 0.2s ease',
                    '&:hover': {
                      backgroundColor: theme.palette.grey[100],
                      transform: 'translateX(4px)'
                    }
                  }}
                  component="a"
                  href={cardData.website}
                  target="_blank"
                  rel="noopener noreferrer"
                >
                  <IconWorld size={24} color={theme.palette.info.main} />
                  <Typography variant="body1" sx={{ flex: 1 }}>
                    {cardData.website}
                  </Typography>
                </Stack>
              )}

              {cardData.address && (
                <Stack
                  direction="row"
                  spacing={2}
                  alignItems="center"
                  sx={{
                    p: 2,
                    borderRadius: 2,
                    backgroundColor: theme.palette.grey[50]
                  }}
                >
                  <IconMapPin size={24} color={theme.palette.warning.main} />
                  <Typography variant="body1" sx={{ flex: 1 }}>
                    {cardData.address}
                  </Typography>
                </Stack>
              )}
            </Stack>
          </CardContent>
        </Card>

        {/* Social Links */}
        {cardData.socialLinks && cardData.socialLinks.length > 0 && (
          <Card
            sx={{
              borderRadius: 3,
              boxShadow: theme.shadows[4],
              mb: 3
            }}
          >
            <CardContent sx={{ p: { xs: 3, md: 4 } }}>
              <Typography variant="h6" fontWeight={600} sx={{ mb: 3 }}>
                {t('publicCard.socialLinks')}
              </Typography>
              
              <Stack direction="row" spacing={2} flexWrap="wrap">
                {cardData.socialLinks.map((link, index) => {
                  const Icon = getSocialIcon(link.platform);
                  return (
                    <Button
                      key={index}
                      variant="outlined"
                      startIcon={<Icon size={20} />}
                      component="a"
                      href={link.url}
                      target="_blank"
                      rel="noopener noreferrer"
                      sx={{
                        borderRadius: 3,
                        px: 3,
                        py: 1.5,
                        textTransform: 'capitalize',
                        '&:hover': {
                          transform: 'translateY(-2px)',
                          boxShadow: theme.shadows[4]
                        }
                      }}
                    >
                      {link.platform}
                    </Button>
                  );
                })}
              </Stack>
            </CardContent>
          </Card>
        )}

        {/* Download Button */}
        {cardData.allowDownload && (
          <Card
            sx={{
              borderRadius: 3,
              boxShadow: theme.shadows[4]
            }}
          >
            <CardContent sx={{ p: { xs: 3, md: 4 }, textAlign: 'center' }}>
              <Typography variant="h6" fontWeight={600} sx={{ mb: 2 }}>
                {t('publicCard.saveContact')}
              </Typography>
              
              <Typography variant="body2" color="text.secondary" sx={{ mb: 3 }}>
                {t('publicCard.saveContactDescription')}
              </Typography>
              
              <Button
                variant="contained"
                size="large"
                startIcon={<IconDownload />}
                onClick={handleDownload}
                sx={{
                  borderRadius: 3,
                  px: 4,
                  py: 1.5,
                  fontSize: '1.1rem'
                }}
              >
                {t('publicCard.downloadContact')}
              </Button>
            </CardContent>
          </Card>
        )}

        {/* Floating Copy Link Button - Mobile */}
        {isMobile && (
          <Fab
            color="primary"
            onClick={handleCopyLink}
            sx={{
              position: 'fixed',
              bottom: 24,
              right: 24,
              zIndex: 1000
            }}
          >
            {copied ? <IconCheck /> : <IconCopy />}
          </Fab>
        )}

        {/* QR Dialog */}
        <Dialog
          open={qrDialog}
          onClose={() => setQrDialog(false)}
          maxWidth="sm"
          fullWidth
          TransitionComponent={(props) => <Slide direction="up" {...props} />}
        >
          <DialogContent sx={{ p: 4 }}>
            <Stack spacing={3} alignItems="center">
              <IconButton
                onClick={() => setQrDialog(false)}
                sx={{
                  position: 'absolute',
                  top: 8,
                  right: 8
                }}
              >
                <IconX />
              </IconButton>
              
              <Typography variant="h6" fontWeight={600}>
                {t('publicCard.qrCode')}
              </Typography>
              
              <Box
                sx={{
                  p: 3,
                  backgroundColor: 'white',
                  borderRadius: 2,
                  border: `1px solid ${theme.palette.divider}`
                }}
              >
                <img
                  src={cardData.qrCode}
                  alt="QR Code"
                  style={{ width: 250, height: 250, display: 'block' }}
                />
              </Box>
              
              <Typography variant="body2" color="text.secondary" textAlign="center">
                {t('publicCard.qrDescription')}
              </Typography>
              
              <Button
                variant="contained"
                startIcon={<IconDownload />}
                onClick={() => {
                  const link = document.createElement('a');
                  link.href = cardData.qrCode;
                  link.download = `${cardData.firstName}-${cardData.lastName}-qr.png`;
                  link.click();
                }}
                sx={{ borderRadius: 2 }}
              >
                {t('publicCard.downloadQR')}
              </Button>
            </Stack>
          </DialogContent>
        </Dialog>

        {/* Share Dialog */}
        <Dialog
          open={shareDialog}
          onClose={() => setShareDialog(false)}
          maxWidth="sm"
          fullWidth
        >
          <DialogContent sx={{ p: 4 }}>
            <Stack spacing={3} alignItems="center">
              <Typography variant="h6" fontWeight={600}>
                {t('publicCard.shareCard')}
              </Typography>
              
              <Stack direction="row" spacing={2} sx={{ width: '100%' }}>
                <Button
                  variant="outlined"
                  startIcon={copied ? <IconCheck /> : <IconCopy />}
                  onClick={handleCopyLink}
                  fullWidth
                  color={copied ? 'success' : 'primary'}
                  sx={{ borderRadius: 2 }}
                >
                  {copied ? t('publicCard.copied') : t('publicCard.copyLink')}
                </Button>
                
                <Button
                  variant="outlined"
                  onClick={() => setShareDialog(false)}
                  sx={{ borderRadius: 2 }}
                >
                  {t('common.close')}
                </Button>
              </Stack>
            </Stack>
          </DialogContent>
        </Dialog>
      </Container>
    </Box>
  );
};

export default PublicCard;

===== src/views/qr/QRGenerator.tsx =====
// src/views/qr/QRGenerator.tsx
import { useState, useEffect } from 'react';
import {
  Box,
  Container,
  Grid2 as Grid,
  Card,
  CardContent,
  Typography,
  Button,
  Stack,
  TextField,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Slider,
  useTheme,
  useMediaQuery,
  Alert,
  Chip,
  Tabs,
  Tab,
  Divider
} from '@mui/material';
import { useTranslation } from 'react-i18next';
import {
  IconQrcode,
  IconDownload,
  IconShare,
  IconCopy,
  IconRefresh,
  IconEye,
  IconCheck,
  IconCamera,
  IconLink,
  IconMail,
  IconPhone,
  IconMapPin,
  IconWifi,
  IconBrandWhatsapp
} from '@tabler/icons-react';
import PageContainer from 'src/components/container/PageContainer';
import DashboardCard from '../dashboard/components/DashboardCard';

const QRGenerator = () => {
  const { t } = useTranslation();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));

  const [activeTab, setActiveTab] = useState(0);
  const [, setQrData] = useState('');
  const [qrType, setQrType] = useState('url');
  const [qrOptions, setQrOptions] = useState({
    size: 300,
    errorCorrection: 'M',
    foregroundColor: '#000000',
    backgroundColor: '#FFFFFF',
    logo: null as File | null,
    logoSize: 20,
    borderRadius: 0,
    margin: 4
  });
  const [generatedQR, setGeneratedQR] = useState('');
  const [loading, setLoading] = useState(false);
  const [copied, setCopied] = useState(false);

  // QR Types Configuration
  const qrTypes = [
    {
      value: 'url',
      label: t('qr.types.url'),
      icon: IconLink,
      placeholder: 'https://example.com',
      fields: ['url']
    },
    {
      value: 'text',
      label: t('qr.types.text'),
      icon: IconQrcode,
      placeholder: t('qr.placeholders.text'),
      fields: ['text']
    },
    {
      value: 'email',
      label: t('qr.types.email'),
      icon: IconMail,
      placeholder: 'example@domain.com',
      fields: ['email', 'subject', 'body']
    },
    {
      value: 'phone',
      label: t('qr.types.phone'),
      icon: IconPhone,
      placeholder: '+966501234567',
      fields: ['phone']
    },
    {
      value: 'sms',
      label: t('qr.types.sms'),
      icon: IconBrandWhatsapp,
      placeholder: '+966501234567',
      fields: ['phone', 'message']
    },
    {
      value: 'wifi',
      label: t('qr.types.wifi'),
      icon: IconWifi,
      placeholder: 'WiFi Network',
      fields: ['ssid', 'password', 'security']
    },
    {
      value: 'location',
      label: t('qr.types.location'),
      icon: IconMapPin,
      placeholder: '24.7136, 46.6753',
      fields: ['latitude', 'longitude']
    }
  ];

  const [formData, setFormData] = useState({
    url: '',
    text: '',
    email: '',
    subject: '',
    body: '',
    phone: '',
    message: '',
    ssid: '',
    password: '',
    security: 'WPA',
    latitude: '',
    longitude: ''
  });

  const currentQrType = qrTypes.find(type => type.value === qrType);

  useEffect(() => {
    generateQRData();
  }, [qrType, formData]);

  const generateQRData = () => {
    let data = '';
    
    switch (qrType) {
      case 'url':
        data = formData.url;
        break;
      case 'text':
        data = formData.text;
        break;
      case 'email':
        data = `mailto:${formData.email}?subject=${formData.subject}&body=${formData.body}`;
        break;
      case 'phone':
        data = `tel:${formData.phone}`;
        break;
      case 'sms':
        data = `sms:${formData.phone}?body=${formData.message}`;
        break;
      case 'wifi':
        data = `WIFI:T:${formData.security};S:${formData.ssid};P:${formData.password};;`;
        break;
      case 'location':
        data = `geo:${formData.latitude},${formData.longitude}`;
        break;
      default:
        data = formData.url;
    }
    
    setQrData(data);
    if (data) {
      generateQRCode(data);
    }
  };

  const generateQRCode = async (data: string) => {
    if (!data.trim()) return;
    
    setLoading(true);
    try {
      // محاكاة API call لتوليد QR
      const qrUrl = `https://api.qrserver.com/v1/create-qr-code/?size=${qrOptions.size}x${qrOptions.size}&data=${encodeURIComponent(data)}&color=${qrOptions.foregroundColor.replace('#', '')}&bgcolor=${qrOptions.backgroundColor.replace('#', '')}&margin=${qrOptions.margin}&ecc=${qrOptions.errorCorrection}`;
      
      await new Promise(resolve => setTimeout(resolve, 500));
      setGeneratedQR(qrUrl);
    } catch (error) {
      console.error('Failed to generate QR code:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleFormChange = (field: string, value: any) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const handleOptionChange = (option: string, value: any) => {
    setQrOptions(prev => ({
      ...prev,
      [option]: value
    }));
  };

  const handleDownload = async () => {
    if (!generatedQR) return;
    
    try {
      const response = await fetch(generatedQR);
      const blob = await response.blob();
      const url = window.URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = url;
      link.download = `qr-code-${Date.now()}.png`;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      window.URL.revokeObjectURL(url);
    } catch (error) {
      console.error('Failed to download QR code:', error);
    }
  };

  const handleCopy = async () => {
    try {
      await navigator.clipboard.writeText(generatedQR);
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
    } catch (error) {
      console.error('Failed to copy QR code URL:', error);
    }
  };

  const renderFormFields = () => {
    if (!currentQrType) return null;

    return (
      <Stack spacing={3}>
        {currentQrType.fields.map((field) => {
          switch (field) {
            case 'url':
              return (
                <TextField
                  key={field}
                  fullWidth
                  label={t('qr.fields.url')}
                  placeholder={currentQrType.placeholder}
                  value={formData.url}
                  onChange={(e) => handleFormChange('url', e.target.value)}
                  type="url"
                  sx={{ '& .MuiOutlinedInput-root': { borderRadius: 2 } }}
                />
              );
            case 'text':
              return (
                <TextField
                  key={field}
                  fullWidth
                  multiline
                  rows={4}
                  label={t('qr.fields.text')}
                  placeholder={currentQrType.placeholder}
                  value={formData.text}
                  onChange={(e) => handleFormChange('text', e.target.value)}
                  sx={{ '& .MuiOutlinedInput-root': { borderRadius: 2 } }}
                />
              );
            case 'email':
              return (
                <TextField
                  key={field}
                  fullWidth
                  label={t('qr.fields.email')}
                  placeholder={currentQrType.placeholder}
                  value={formData.email}
                  onChange={(e) => handleFormChange('email', e.target.value)}
                  type="email"
                  sx={{ '& .MuiOutlinedInput-root': { borderRadius: 2 } }}
                />
              );
            case 'subject':
              return (
                <TextField
                  key={field}
                  fullWidth
                  label={t('qr.fields.subject')}
                  placeholder={t('qr.placeholders.subject')}
                  value={formData.subject}
                  onChange={(e) => handleFormChange('subject', e.target.value)}
                  sx={{ '& .MuiOutlinedInput-root': { borderRadius: 2 } }}
                />
              );
            case 'body':
              return (
                <TextField
                  key={field}
                  fullWidth
                  multiline
                  rows={3}
                  label={t('qr.fields.body')}
                  placeholder={t('qr.placeholders.body')}
                  value={formData.body}
                  onChange={(e) => handleFormChange('body', e.target.value)}
                  sx={{ '& .MuiOutlinedInput-root': { borderRadius: 2 } }}
                />
              );
            case 'phone':
              return (
                <TextField
                  key={field}
                  fullWidth
                  label={t('qr.fields.phone')}
                  placeholder={currentQrType.placeholder}
                  value={formData.phone}
                  onChange={(e) => handleFormChange('phone', e.target.value)}
                  type="tel"
                  sx={{ '& .MuiOutlinedInput-root': { borderRadius: 2 } }}
                />
              );
            case 'message':
              return (
                <TextField
                  key={field}
                  fullWidth
                  multiline
                  rows={3}
                  label={t('qr.fields.message')}
                  placeholder={t('qr.placeholders.message')}
                  value={formData.message}
                  onChange={(e) => handleFormChange('message', e.target.value)}
                  sx={{ '& .MuiOutlinedInput-root': { borderRadius: 2 } }}
                />
              );
            case 'ssid':
              return (
                <TextField
                  key={field}
                  fullWidth
                  label={t('qr.fields.ssid')}
                  placeholder={t('qr.placeholders.ssid')}
                  value={formData.ssid}
                  onChange={(e) => handleFormChange('ssid', e.target.value)}
                  sx={{ '& .MuiOutlinedInput-root': { borderRadius: 2 } }}
                />
              );
            case 'password':
              return (
                <TextField
                  key={field}
                  fullWidth
                  label={t('qr.fields.password')}
                  placeholder={t('qr.placeholders.password')}
                  value={formData.password}
                  onChange={(e) => handleFormChange('password', e.target.value)}
                  type="password"
                  sx={{ '& .MuiOutlinedInput-root': { borderRadius: 2 } }}
                />
              );
            case 'security':
              return (
                <FormControl key={field} fullWidth>
                  <InputLabel>{t('qr.fields.security')}</InputLabel>
                  <Select
                    value={formData.security}
                    label={t('qr.fields.security')}
                    onChange={(e) => handleFormChange('security', e.target.value)}
                    sx={{ borderRadius: 2 }}
                  >
                    <MenuItem value="WPA">WPA/WPA2</MenuItem>
                    <MenuItem value="WEP">WEP</MenuItem>
                    <MenuItem value="nopass">{t('qr.security.open')}</MenuItem>
                  </Select>
                </FormControl>
              );
            case 'latitude':
              return (
                <TextField
                  key={field}
                  fullWidth
                  label={t('qr.fields.latitude')}
                  placeholder="24.7136"
                  value={formData.latitude}
                  onChange={(e) => handleFormChange('latitude', e.target.value)}
                  type="number"
                  sx={{ '& .MuiOutlinedInput-root': { borderRadius: 2 } }}
                />
              );
            case 'longitude':
              return (
                <TextField
                  key={field}
                  fullWidth
                  label={t('qr.fields.longitude')}
                  placeholder="46.6753"
                  value={formData.longitude}
                  onChange={(e) => handleFormChange('longitude', e.target.value)}
                  type="number"
                  sx={{ '& .MuiOutlinedInput-root': { borderRadius: 2 } }}
                />
              );
            default:
              return null;
          }
        })}
      </Stack>
    );
  };

  return (
    <PageContainer title={t('qr.title')} description={t('qr.description')}>
      <Container maxWidth="xl">
        {/* Header */}
        <Stack
          direction={{ xs: 'column', md: 'row' }}
          justifyContent="space-between"
          alignItems={{ xs: 'stretch', md: 'center' }}
          spacing={2}
          sx={{ mb: 3 }}
        >
          <Typography
            variant={isMobile ? 'h5' : 'h4'}
            sx={{
              fontWeight: 700,
              color: theme.palette.text.primary
            }}
          >
            {t('qr.generator')}
          </Typography>

          {generatedQR && !isMobile && (
            <Stack direction="row" spacing={2}>
              <Button
                variant="outlined"
                startIcon={<IconEye />}
                onClick={() => window.open(generatedQR, '_blank')}
                sx={{ borderRadius: 2 }}
              >
                {t('qr.preview')}
              </Button>
              <Button
                variant="contained"
                startIcon={<IconDownload />}
                onClick={handleDownload}
                sx={{ borderRadius: 2 }}
              >
                {t('qr.download')}
              </Button>
            </Stack>
          )}
        </Stack>

        <Grid container spacing={3}>
          {/* QR Configuration */}
          <Grid size={{ xs: 12, lg: 8 }}>
            <DashboardCard>
              <CardContent sx={{ p: { xs: 2, md: 3 } }}>
                <Tabs
                  value={activeTab}
                  onChange={(_, newValue) => setActiveTab(newValue)}
                  sx={{ mb: 3 }}
                  variant={isMobile ? 'scrollable' : 'standard'}
                  scrollButtons="auto"
                >
                  <Tab label={t('qr.tabs.content')} />
                  <Tab label={t('qr.tabs.design')} />
                  <Tab label={t('qr.tabs.advanced')} />
                </Tabs>

                {/* Content Tab */}
                {activeTab === 0 && (
                  <Stack spacing={3}>
                    <Typography variant="h6" fontWeight={600}>
                      {t('qr.selectType')}
                    </Typography>

                    {/* QR Type Selection */}
                    <Grid container spacing={2}>
                      {qrTypes.map((type) => {
                        const Icon = type.icon;
                        return (
                          <Grid size={{ xs: 6, sm: 4, md: 3 }} key={type.value}>
                            <Card
                              sx={{
                                cursor: 'pointer',
                                borderRadius: 2,
                                border: qrType === type.value
                                  ? `2px solid ${theme.palette.primary.main}`
                                  : `1px solid ${theme.palette.divider}`,
                                transition: 'all 0.2s ease',
                                '&:hover': {
                                  transform: 'translateY(-2px)',
                                  boxShadow: theme.shadows[4]
                                }
                              }}
                              onClick={() => setQrType(type.value)}
                            >
                              <CardContent sx={{ p: 2, textAlign: 'center' }}>
                                <Stack spacing={1} alignItems="center">
                                  <Icon
                                    size={24}
                                    color={qrType === type.value
                                      ? theme.palette.primary.main
                                      : theme.palette.text.secondary
                                    }
                                  />
                                  <Typography
                                    variant="caption"
                                    sx={{
                                      fontWeight: 600,
                                      color: qrType === type.value
                                        ? theme.palette.primary.main
                                        : theme.palette.text.secondary
                                    }}
                                  >
                                    {type.label}
                                  </Typography>
                                </Stack>
                              </CardContent>
                            </Card>
                          </Grid>
                        );
                      })}
                    </Grid>

                    <Divider />

                    {/* Form Fields */}
                    <Typography variant="h6" fontWeight={600}>
                      {t('qr.enterData')}
                    </Typography>

                    {renderFormFields()}
                  </Stack>
                )}

                {/* Design Tab */}
                {activeTab === 1 && (
                  <Stack spacing={4}>
                    <Typography variant="h6" fontWeight={600}>
                      {t('qr.customizeDesign')}
                    </Typography>

                    <Grid container spacing={3}>
                      <Grid size={{ xs: 12, md: 6 }}>
                        <Stack spacing={3}>
                          <Stack spacing={2}>
                            <Typography variant="subtitle2" fontWeight={600}>
                              {t('qr.size')} ({qrOptions.size}px)
                            </Typography>
                            <Slider
                              value={qrOptions.size}
                              onChange={(_, value) => handleOptionChange('size', value)}
                              min={200}
                              max={800}
                              step={50}
                              marks={[
                                { value: 200, label: '200px' },
                                { value: 400, label: '400px' },
                                { value: 600, label: '600px' },
                                { value: 800, label: '800px' }
                              ]}
                            />
                          </Stack>

                          <Stack spacing={2}>
                            <Typography variant="subtitle2" fontWeight={600}>
                              {t('qr.foregroundColor')}
                            </Typography>
                            <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
                              <input
                                type="color"
                                value={qrOptions.foregroundColor}
                                onChange={(e) => handleOptionChange('foregroundColor', e.target.value)}
                                style={{
                                  width: 50,
                                  height: 40,
                                  border: 'none',
                                  borderRadius: 8,
                                  cursor: 'pointer'
                                }}
                              />
                              <Typography variant="body2" sx={{ fontFamily: 'monospace' }}>
                                {qrOptions.foregroundColor}
                              </Typography>
                            </Box>
                          </Stack>

                          <Stack spacing={2}>
                            <Typography variant="subtitle2" fontWeight={600}>
                              {t('qr.backgroundColor')}
                            </Typography>
                            <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
                              <input
                                type="color"
                                value={qrOptions.backgroundColor}
                                onChange={(e) => handleOptionChange('backgroundColor', e.target.value)}
                                style={{
                                  width: 50,
                                  height: 40,
                                  border: 'none',
                                  borderRadius: 8,
                                  cursor: 'pointer'
                                }}
                              />
                              <Typography variant="body2" sx={{ fontFamily: 'monospace' }}>
                                {qrOptions.backgroundColor}
                              </Typography>
                            </Box>
                          </Stack>
                        </Stack>
                      </Grid>

                      <Grid size={{ xs: 12, md: 6 }}>
                        <Stack spacing={3}>
                          <FormControl fullWidth>
                            <InputLabel>{t('qr.errorCorrection')}</InputLabel>
                            <Select
                              value={qrOptions.errorCorrection}
                              label={t('qr.errorCorrection')}
                              onChange={(e) => handleOptionChange('errorCorrection', e.target.value)}
                              sx={{ borderRadius: 2 }}
                            >
                              <MenuItem value="L">{t('qr.errorLevels.low')}</MenuItem>
                              <MenuItem value="M">{t('qr.errorLevels.medium')}</MenuItem>
                              <MenuItem value="Q">{t('qr.errorLevels.quartile')}</MenuItem>
                              <MenuItem value="H">{t('qr.errorLevels.high')}</MenuItem>
                            </Select>
                          </FormControl>

                          <Stack spacing={2}>
                            <Typography variant="subtitle2" fontWeight={600}>
                              {t('qr.margin')} ({qrOptions.margin}px)
                            </Typography>
                            <Slider
                              value={qrOptions.margin}
                              onChange={(_, value) => handleOptionChange('margin', value)}
                              min={0}
                              max={20}
                              step={1}
                              marks={[
                                { value: 0, label: '0' },
                                { value: 10, label: '10' },
                                { value: 20, label: '20' }
                              ]}
                            />
                          </Stack>
                        </Stack>
                      </Grid>
                    </Grid>
                  </Stack>
                )}

                {/* Advanced Tab */}
                {activeTab === 2 && (
                  <Stack spacing={3}>
                    <Typography variant="h6" fontWeight={600}>
                      {t('qr.advancedOptions')}
                    </Typography>

                    <Alert severity="info">
                      {t('qr.advancedDescription')}
                    </Alert>

                    <Stack spacing={3}>
                      <Button
                        variant="outlined"
                        startIcon={<IconCamera />}
                        component="label"
                        sx={{ borderRadius: 2 }}
                      >
                        {t('qr.addLogo')}
                        <input
                          type="file"
                          hidden
                          accept="image/*"
                          onChange={(e) => {
                            if (e.target.files?.[0]) {
                              handleOptionChange('logo', e.target.files[0]);
                            }
                          }}
                        />
                      </Button>

                      {qrOptions.logo && (
                        <Stack spacing={2}>
                          <Typography variant="subtitle2" fontWeight={600}>
                            {t('qr.logoSize')} ({qrOptions.logoSize}%)
                          </Typography>
                          <Slider
                            value={qrOptions.logoSize}
                            onChange={(_, value) => handleOptionChange('logoSize', value)}
                            min={10}
                            max={30}
                            step={1}
                            marks={[
                              { value: 10, label: '10%' },
                              { value: 20, label: '20%' },
                              { value: 30, label: '30%' }
                            ]}
                          />
                        </Stack>
                      )}

                      <Button
                        variant="outlined"
                        startIcon={<IconRefresh />}
                        onClick={() => {
                          setQrOptions({
                            size: 300,
                            errorCorrection: 'M',
                            foregroundColor: '#000000',
                            backgroundColor: '#FFFFFF',
                            logo: null,
                            logoSize: 20,
                            borderRadius: 0,
                            margin: 4
                          });
                        }}
                        sx={{ borderRadius: 2, alignSelf: 'flex-start' }}
                      >
                        {t('qr.resetToDefault')}
                      </Button>
                    </Stack>
                  </Stack>
                )}
              </CardContent>
            </DashboardCard>
          </Grid>

          {/* QR Preview */}
          <Grid size={{ xs: 12, lg: 4 }}>
            <DashboardCard sx={{ position: 'sticky', top: 20 }}>
              <CardContent sx={{ p: { xs: 2, md: 3 } }}>
                <Stack spacing={3}>
                  <Typography variant="h6" fontWeight={600}>
                    {t('qr.preview')}
                  </Typography>

                  {/* QR Code Display */}
                  <Box
                    sx={{
                      display: 'flex',
                      justifyContent: 'center',
                      alignItems: 'center',
                      minHeight: 300,
                      backgroundColor: theme.palette.grey[50],
                      borderRadius: 3,
                      border: `1px solid ${theme.palette.divider}`,
                      position: 'relative'
                    }}
                  >
                    {loading ? (
                      <Stack alignItems="center" spacing={2}>
                        <Box
                          sx={{
                            width: 40,
                            height: 40,
                            border: `3px solid ${theme.palette.primary.light}`,
                            borderTop: `3px solid ${theme.palette.primary.main}`,
                            borderRadius: '50%',
                            animation: 'spin 1s linear infinite',
                            '@keyframes spin': {
                              '0%': { transform: 'rotate(0deg)' },
                              '100%': { transform: 'rotate(360deg)' }
                            }
                          }}
                        />
                        <Typography variant="body2" color="text.secondary">
                          {t('qr.generating')}
                        </Typography>
                      </Stack>
                    ) : generatedQR ? (
                      <img
                        src={generatedQR}
                        alt="Generated QR Code"
                        style={{
                          maxWidth: '100%',
                          maxHeight: '100%',
                          borderRadius: 8
                        }}
                      />
                    ) : (
                      <Stack alignItems="center" spacing={2}>
                        <IconQrcode size={48} color={theme.palette.text.secondary} />
                        <Typography variant="body2" color="text.secondary" textAlign="center">
                          {t('qr.enterDataToGenerate')}
                        </Typography>
                      </Stack>
                    )}
                  </Box>

                  {/* QR Info */}
                  {generatedQR && (
                    <Stack spacing={2}>
                      <Stack direction="row" justifyContent="space-between">
                        <Typography variant="body2" color="text.secondary">
                          {t('qr.type')}:
                        </Typography>
                        <Chip
                          label={currentQrType?.label}
                          size="small"
                          color="primary"
                          variant="outlined"
                        />
                      </Stack>

                      <Stack direction="row" justifyContent="space-between">
                        <Typography variant="body2" color="text.secondary">
                          {t('qr.size')}:
                        </Typography>
                        <Typography variant="body2">
                          {qrOptions.size}x{qrOptions.size}px
                        </Typography>
                      </Stack>

                      <Stack direction="row" justifyContent="space-between">
                        <Typography variant="body2" color="text.secondary">
                          {t('qr.errorCorrection')}:
                        </Typography>
                        <Typography variant="body2">
                          {qrOptions.errorCorrection}
                        </Typography>
                      </Stack>
                    </Stack>
                  )}

                  {/* Actions */}
                  {generatedQR && (
                    <Stack spacing={2}>
                      <Button
                        variant="contained"
                        startIcon={<IconDownload />}
                        onClick={handleDownload}
                        fullWidth
                        sx={{ borderRadius: 2 }}
                      >
                        {t('qr.download')}
                      </Button>

                      <Stack direction="row" spacing={1}>
                        <Button
                          variant="outlined"
                          startIcon={copied ? <IconCheck /> : <IconCopy />}
                          onClick={handleCopy}
                          sx={{ borderRadius: 2, flex: 1 }}
                          color={copied ? 'success' : 'primary'}
                        >
                          {copied ? t('qr.copied') : t('qr.copyUrl')}
                        </Button>

                        <Button
                          variant="outlined"
                          startIcon={<IconShare />}
                          onClick={() => {
                            if (navigator.share) {
                              navigator.share({
                                title: t('qr.shareTitle'),
                                url: generatedQR
                              });
                            }
                          }}
                          sx={{ borderRadius: 2, flex: 1 }}
                        >
                          {t('qr.share')}
                        </Button>
                      </Stack>
                    </Stack>
                  )}
                </Stack>
              </CardContent>
            </DashboardCard>
          </Grid>
        </Grid>
      </Container>
    </PageContainer>
  );
};

export default QRGenerator;

===== src/views/sample-page/SamplePage.tsx =====
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import React from 'react';
import { Typography } from '@mui/material';
import Breadcrumb from 'src/layouts/full/shared/breadcrumb/Breadcrumb';
import PageContainer from 'src/components/container/PageContainer';
import DashboardCard from '../../components/shared/DashboardCard';

const BCrumb = [
  {
    to: '/',
    title: 'Home',
  },
  {
    title: 'Sample Page',
  },
];

const SamplePage = () => {
  return (
    <PageContainer title="Sample Page" description="this is Sample page">
      {/* breadcrumb */}
      <Breadcrumb title="Sample Page" items={BCrumb} />
      {/* end breadcrumb */}
      <DashboardCard title="Sample Page">
        <Typography>This is a sample page</Typography>
      </DashboardCard>
    </PageContainer>
  );
};

export default SamplePage;

===== src/views/spinner/spinner.css =====
.fallback-spinner {
  position: relative;
  display: flex;
  height: 100vh;
  width: 100%;
}
.loading {
  position: absolute;
  left: calc(50% - 35px);
  top: 50%;
  width: 55px;
  height: 55px;
  border-radius: 50%;
  -webkit-box-sizing: border-box;
  box-sizing: border-box;
  border: 3px solid transparent;
}
.effect-1,
.effect-2 {
  position: absolute;
  width: 100%;
  height: 100%;
  border: 3px solid transparent;
  border-left: 3px solid #2962ff;
  border-radius: 50%;
  -webkit-box-sizing: border-box;
  box-sizing: border-box;
}

.effect-1 {
  animation: rotate 1s ease infinite;
}
.effect-2 {
  animation: rotateOpacity 1s ease infinite 0.1s;
}
.effect-3 {
  width: 100%;
  height: 100%;
  border: 3px solid transparent;
  border-left: 3px solid #2962ff;
  -webkit-animation: rotateOpacity 1s ease infinite 0.2s;
  animation: rotateOpacity 1s ease infinite 0.2s;
  border-radius: 50%;
  -webkit-box-sizing: border-box;
  box-sizing: border-box;
}

.loading .effects {
  transition: all 0.3s ease;
}
.fallback-logo {
  position: absolute;
  left: calc(50% - 45px);
  top: 40%;
}

@keyframes rotate {
  0% {
    -webkit-transform: rotate(0deg);
    transform: rotate(0deg);
  }
  100% {
    -webkit-transform: rotate(1turn);
    transform: rotate(1turn);
  }
}
@keyframes rotateOpacity {
  0% {
    -webkit-transform: rotate(0deg);
    transform: rotate(0deg);
    opacity: 0.1;
  }
  100% {
    -webkit-transform: rotate(1turn);
    transform: rotate(1turn);
    opacity: 1;
  }
}

===== src/views/spinner/Spinner.tsx =====
import { FC } from "react";
import "./spinner.css";

const Spinner: FC = () => (
  <div className="fallback-spinner">
    <div className="loading component-loader">
      <div className="effect-1 effects" />
      <div className="effect-2 effects" />
      <div className="effect-3 effects" />
    </div>
  </div>
);
export default Spinner;

===== src/vite-env.d.ts =====
/// <reference types="vite/client" />
